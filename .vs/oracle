--------------------------------------------------------
-- Archivo creado  - martes-septiembre-07-2021   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for DB Link SYS_HUB
--------------------------------------------------------

  CREATE DATABASE LINK "SYS_HUB"
   USING 'SEEDDATA';
--------------------------------------------------------
--  DDL for Type ADR_HOME_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_HOME_T" FORCE AS OBJECT
(
  product_type          VARCHAR2(8),                        /* product type */
  product_id            VARCHAR2(30),                         /* product id */
  instance_id           VARCHAR2(30),                        /* instance id */
  precedence            INTEGER,       /* precedence level of this adr home */
  adr_id                INTEGER,              /* hash value of the adr home */


-- **********************************************************************
-- Construct an ADR home object representing ADR home at a location
-- described by application specific naming
-- **********************************************************************

  CONSTRUCTOR FUNCTION adr_home_t
  (
    SELF IN OUT NOCOPY  adr_home_t,
    product_type        VARCHAR2,
    product_id          VARCHAR2,
    instance_id         VARCHAR2,
    precedence          INTEGER
  )
  RETURN SELF AS RESULT
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."ADR_HOME_T" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
374 1da
P9zZCTAoS//oIklLqMdGlhwD0V0wg2Pxmgwdf3TGEBkP98baUC06bSlrUA0x4rj2gIO2uSbn
nrzjyvm1dTME9njMdcYNyIsFXbchP7RmVjurjzpDgjQQNJ1Ali9I4Xz09v4M9m6whyMMS/zw
0oOrLxjm9ngEetXFh6bLmJQRHWH+cNigBahekEn6p9gGZ6/GR66skdV9wvXelWApJW4PBPT6
vzCZbMWRFyVCce8tjIvpfRJl7424fkW8bUt7b1PbDd+3juBZLazlqevLWZoyKrizXAfJzQXm
aWrvVielYuyOyj8nvlKvstHK92M+vc18gxx4hswyUu11mmg9LkWsYFIZyShSohWB+dRrXBpT
7JBGUtr4tu+7+K52WLUkyk4dyACiz5jeCFb+KJV0KsbCISRYWQpZw1nTbWWY542yXJ4NAxNM
3oiRblLLxkW0DtjQhqbUHeJf2Rj4MXijjHJQ

/

  GRANT EXECUTE ON "SYS"."ADR_HOME_T" TO "DBA";
--------------------------------------------------------
--  DDL for Type ADR_INCIDENT_CORR_KEYS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_INCIDENT_CORR_KEYS_T" FORCE AS
  VARRAY(10) OF adr_incident_corr_key_t;

/

  GRANT EXECUTE ON "SYS"."ADR_INCIDENT_CORR_KEYS_T" TO "DBA";
--------------------------------------------------------
--  DDL for Type ADR_INCIDENT_CORR_KEY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_INCIDENT_CORR_KEY_T" FORCE AS OBJECT
(
  name                  VARCHAR2(64),                /* correlation key name */
  value                 VARCHAR2(512),               /* correlation key value*/
  flags                 INTEGER                     /* correlation key flags */
);

/
--------------------------------------------------------
--  DDL for Type ADR_INCIDENT_ERR_ARGS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_INCIDENT_ERR_ARGS_T" FORCE AS
  VARRAY(12) OF VARCHAR2(64);

/
--------------------------------------------------------
--  DDL for Type ADR_INCIDENT_FILES_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_INCIDENT_FILES_T" FORCE AS
  VARRAY(10) OF adr_incident_file_t;

/

  GRANT EXECUTE ON "SYS"."ADR_INCIDENT_FILES_T" TO "DBA";
--------------------------------------------------------
--  DDL for Type ADR_INCIDENT_FILE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_INCIDENT_FILE_T" FORCE AS OBJECT
(
  dirpath               VARCHAR2(512),         /* directory path of the file */
  filename              VARCHAR2(64)                            /* file name */
);

/
--------------------------------------------------------
--  DDL for Type ADR_INCIDENT_INFO_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_INCIDENT_INFO_T" FORCE AS OBJECT
(
  problem_key             VARCHAR2(64),       /* problem key of the incident */
  error_facility          VARCHAR2(10),                    /* error facility */
  error_number            INTEGER,                           /* error number */
  error_message           VARCHAR2(1024),                   /* error message */
  ecid                    VARCHAR2(64),              /* execution context id */
  signalling_component    VARCHAR2(64),              /* signalling component */
  signalling_subcomponent VARCHAR2(64),          /* signalling sub component */
  suspect_component       VARCHAR2(64),                 /* suspect component */
  suspect_subcomponent    VARCHAR2(64),             /* suspect sub component */
  error_args              adr_incident_err_args_t,        /* error arguments */
  correlation_keys        adr_incident_corr_keys_t,      /* correlation keys */
  files                   adr_incident_files_t  /* additional incident files */
);

/

  GRANT EXECUTE ON "SYS"."ADR_INCIDENT_INFO_T" TO "DBA";
--------------------------------------------------------
--  DDL for Type ADR_INCIDENT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_INCIDENT_T" AS OBJECT
(
  home                   adr_home_t,           /* adr home for this incident */
  id                     INTEGER,                             /* incident id */
  staged                 VARCHAR2(1),                  /* is staged incident */
  in_update              VARCHAR2(1),         /* is in the process of update */
  pending                adr_incident_info_t,            /* for internal use */


  -- **********************************************************************
  -- Gets the id of this incident
  -- **********************************************************************

  MEMBER FUNCTION get_id RETURN INTEGER,


  -- **********************************************************************
  -- Gets the path to the directory where incident diagnostic files reside
  -- Value is <ADR_HOME>/incident/incdir_<ID>
  -- **********************************************************************

  MEMBER FUNCTION get_incident_location RETURN VARCHAR2,


  -- **********************************************************************
  -- Writes diagnostics to the default incident file
  -- **********************************************************************

  MEMBER PROCEDURE dump_incident
  (
    SELF     IN OUT NOCOPY adr_incident_t,
    data     IN VARCHAR2                    /* data to dump in incident file */
  ),


  -- **********************************************************************
  -- Writes RAW diagnostics to the default incident file
  -- **********************************************************************

  MEMBER PROCEDURE dump_incident_raw
  (
    SELF     IN OUT NOCOPY adr_incident_t,
    data     IN RAW                     /* RAW data to dump in incident file */
  ),


  -- **********************************************************************
  -- Writes diagnostics to a specified incident file in the incident
  -- directory
  -- **********************************************************************

  MEMBER PROCEDURE dump_incfile
  (
    SELF     IN OUT NOCOPY adr_incident_t,
    filename IN VARCHAR2,          /* additional incident file to be created */
    data     IN VARCHAR2                       /* data to dump in above file */
  ),


  -- **********************************************************************
  -- Writes raw diagnostic data to the specified incident file in the
  -- incident directory
  -- **********************************************************************

  MEMBER PROCEDURE dump_incfile_raw
  (
    SELF     IN OUT NOCOPY adr_incident_t,
    filename IN VARCHAR2,          /* additional incident file to be created */
    data     IN RAW                        /* RAW data to dump in above file */
  ),


  -- **********************************************************************
  -- Adds correlation key to this incident
  -- **********************************************************************

  MEMBER PROCEDURE add_correlation_key
  (
    SELF     IN OUT NOCOPY adr_incident_t,
    name     IN VARCHAR2,                            /* correlation key name */
    value    IN VARCHAR2,                           /* correlation key value */
    flags    IN INTEGER DEFAULT NULL                /* correlation key flags */
  ),


  -- **********************************************************************
  -- Registers a file with this incident.
  -- The file can be anywhere in ADR home.
  -- **********************************************************************

  MEMBER PROCEDURE register_file
  (
    SELF     IN OUT NOCOPY adr_incident_t,
    dirpath  IN VARCHAR2,                      /* directory path of the file */
    filename IN VARCHAR2                                        /* file name */
  ),


  -- **********************************************************************
  -- Registers a file in incident directory with this incident
  -- **********************************************************************

  MEMBER PROCEDURE register_file
  (
    SELF     IN OUT NOCOPY adr_incident_t,
    filename IN VARCHAR2                                        /* file name */
  ),


  -- **********************************************************************
  -- Marks the beginning of post-create updates to this incident
  --  This should be used to add correlation keys, adding additional
  --  incident files and other incident metadata changes after
  --  the incident has already been created
  -- **********************************************************************

  MEMBER PROCEDURE begin_update(SELF IN OUT NOCOPY adr_incident_t),


  -- **********************************************************************
  -- Marks the end of post-create updates to this incident
  --  begin_update and end_update must always be used together
  -- **********************************************************************

  MEMBER PROCEDURE end_update(SELF IN OUT NOCOPY adr_incident_t)
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."ADR_INCIDENT_T" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
1059 4ac
Z1AOX8Q1iflal7dHP4FVUb8DTcUwg83qea4GZy+8ZJvVGz9rFFpfwWwf9CynuazXjXkDVeXP
J1DTeRQRel+qtcmceQwp/fJHbJz2WgwXycF5TxeIXUcXfJt9dIsI9onYubcwLaOA9so1sB3I
EOh+e+Dh1KjEY4ZSdXyIrY42t2uPj7j6G1kOkLaPedsby8ZJkSN72+rUCPfaO06XeQdl0e+x
A/Snq0mxorTqom5jzHeVSGy2blNwGUwVSahYfEuC9ILTokepSug1ok24ZokEpEleOcYIVevZ
m7+H+GrgpGJPu8EeXUIyflYgdkJEYQcBGfLvm/TdQwQiS19RICG66t1oUvAELMuwyzx9veca
583FW5PWgtmzk+2IRVLOGnhWKdUFuZlyySGOdBFXgQPUjDc9MZcJQ72HFjcSYcFypkttOtFY
Gj73FA1Vg02HiNPe2C2GZW0H4gWxbRKt5mFSsXXiwAgmfj3m7Tq6Mbnqxuo3uXMqk5ZRV1gk
z2JdM+FMPEGyQexWg6lYgQM8XMk3HElUwFd7IMLFNsMOOueg7zVIy0D+1ICZwlwaJ/Wcvjrz
U6pFrHPKnV4FqqCq0820xiL1SkrL6b+ZU71j9829r3FzDIhz4IIWjO/tGBYm4fTRwBeh81ax
27KTjJW0bLdwxhVHW2cxdUbR6KnbTY9pxlD7YwtxtgIi30CvbPUXTMjqX7AOFUOEc5C++9mD
JggfR6zjve70N8rc3XeYkevwhXuttTpz0geDiKlIpc7kYV/uSPv+TkPA82oSwj9ZKxYwWiuz
BQx6D5bcbwq0zwLadp5BRQC2dV5ZwHUXaKFOM8wCfBUV9UEFQrDlbdng/qQiM2beSm2LEoja
XOqYsINlGFx0n1CUIYlcYVU7XogRsm+Yt2ccNP8FZ6Sibsv98NiDPWEfwDFePljY1YJemKl2
fSC4SjtFn2KyfSJuM5uENDIO0+cR25Djd7NSL2wm78+sW4Ad7iXrJhVRWcLWVzN4BDOWAwx5
TO9j3zmYlN7eWISVfEQfjV2zqwoRnOsa8UkjNven+wEkaoeyKoN1s9/6itqFw3ILAmnJtdm9
xHyTmIJWLfXsLj48t2ILgwLoo4a17np77M/fn9Sx8D3J4/2Riyf13SkYTbOE+LmU3WslR9Cp
ZwbdgG3C5ukmVJwaSJr5pj5mO64=

/

  GRANT EXECUTE ON "SYS"."ADR_INCIDENT_T" TO "DBA";
--------------------------------------------------------
--  DDL for Type ADR_LOG_MSG_ARGS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_LOG_MSG_ARGS_T" FORCE AS VARRAY(32) OF adr_log_msg_arg_t;

/

  GRANT EXECUTE ON "SYS"."ADR_LOG_MSG_ARGS_T" TO "DBA";
--------------------------------------------------------
--  DDL for Type ADR_LOG_MSG_ARG_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_LOG_MSG_ARG_T" FORCE AS OBJECT
(
  name       VARCHAR2(64),                      /* log message argument name */
  value      VARCHAR2(128)                     /* log message argument value */
);

/

  GRANT EXECUTE ON "SYS"."ADR_LOG_MSG_ARG_T" TO "DBA";
--------------------------------------------------------
--  DDL for Type ADR_LOG_MSG_ECID_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_LOG_MSG_ECID_T" FORCE AS OBJECT
(
  id         VARCHAR2(100),                          /* execution context id */
  rid        VARCHAR2(100)                  /* execution context sequence id */
);

/

  GRANT EXECUTE ON "SYS"."ADR_LOG_MSG_ECID_T" TO "DBA";
--------------------------------------------------------
--  DDL for Type ADR_LOG_MSG_ERRID_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_LOG_MSG_ERRID_T" FORCE AS OBJECT
(
  id         VARCHAR2(100),                             /* error instance id */
  rid        VARCHAR2(100)                              /* error sequence id */
);

/

  GRANT EXECUTE ON "SYS"."ADR_LOG_MSG_ERRID_T" TO "DBA";
--------------------------------------------------------
--  DDL for Type ADR_LOG_MSG_SUPPL_ATTRS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_LOG_MSG_SUPPL_ATTRS_T" FORCE AS
  VARRAY(32) OF adr_log_msg_suppl_attr_t;

/

  GRANT EXECUTE ON "SYS"."ADR_LOG_MSG_SUPPL_ATTRS_T" TO "DBA";
--------------------------------------------------------
--  DDL for Type ADR_LOG_MSG_SUPPL_ATTR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_LOG_MSG_SUPPL_ATTR_T" FORCE AS OBJECT
(
  name       VARCHAR2(64),                                 /* attribute name */
  value      VARCHAR2(128)                                /* attribute value */
);

/

  GRANT EXECUTE ON "SYS"."ADR_LOG_MSG_SUPPL_ATTR_T" TO "DBA";
--------------------------------------------------------
--  DDL for Type ADR_LOG_MSG_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_LOG_MSG_T" AS OBJECT
(
  -- Header attributes
  timestamp_originating  TIMESTAMP WITH TIME ZONE,       /* time originating */
  timestamp_normalized   TIMESTAMP WITH TIME ZONE,        /* time normalized */
  org_id                 VARCHAR2(64),                    /* organization id */
  component_id           VARCHAR2(64),                       /* component id */
  instance_id            VARCHAR2(64),                        /* instance id */
  hosting_client_id      VARCHAR2(64),                  /* hosting client id */
  msg_id                 VARCHAR2(64),                         /* message id */
  msg_type               INTEGER,                            /* message type */
  msg_group              VARCHAR2(64),                      /* message group */
  msg_level              INTEGER,                           /* message level */
  host_id                VARCHAR2(64),                            /* host id */
  host_nwaddr            VARCHAR2(46),                       /* host address */
  module_id              VARCHAR2(64),                         /* module id  */
  process_id             VARCHAR2(32),                        /* process id  */
  thread_id              VARCHAR2(64),                         /* thread id  */
  user_id                VARCHAR2(128),                          /* user id  */
  suppl_attrs            adr_log_msg_suppl_attrs_t,
                                                  /* Supplemental attributes */

  -- Correlation data fields
  problem_key            VARCHAR2(64),                        /* problem key */
  upstream_comp_id       VARCHAR2(64),             /* upstream component id  */
  downstream_comp_id     VARCHAR2(64),           /* downstream component id  */
  ecid                   adr_log_msg_ecid_t,        /* execution context id  */
  error_instance_id      adr_log_msg_errid_t,          /* error instance id  */

  -- Payload
  msg_text               VARCHAR2(2048),                     /* message text */
  msg_args               adr_log_msg_args_t,            /* message arguments */
  detail_location        VARCHAR2(160),                /* detailed location  */
  suppl_detail           VARCHAR2(128),             /* supplemental details  */

  -- CDB fields
  con_uid                INTEGER,                     /* container unique ID */
  con_id                 INTEGER,                            /* container ID */
  con_name               VARCHAR2(30)                      /* container name */
);

/

  GRANT EXECUTE ON "SYS"."ADR_LOG_MSG_T" TO "DBA";
--------------------------------------------------------
--  DDL for Type ADR_MSG_TEMPLATE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADR_MSG_TEMPLATE_T" AS OBJECT
(
  org_id                 VARCHAR2(64),                    /* organization id */
  component_id           VARCHAR2(64),                       /* component id */
  instance_id            VARCHAR2(64),                        /* instance id */
  hosting_client_id      VARCHAR2(64),                  /* hosting client id */
  msg_group              VARCHAR2(64),                      /* message group */
  host_id                VARCHAR2(64),                            /* host id */
  host_nwaddr            VARCHAR2(46),                       /* host address */
  module_id              VARCHAR2(64),                         /* module id  */
  process_id             VARCHAR2(32),                        /* process id  */
  thread_id              VARCHAR2(64),                         /* thread id  */
  user_id                VARCHAR2(128),                          /* user id  */
  upstream_comp_id       VARCHAR2(64),             /* upstream component id  */
  downstream_comp_id     VARCHAR2(64),           /* downstream component id  */
  ecid                   adr_log_msg_ecid_t,        /* execution context id  */
  error_instance_id      adr_log_msg_errid_t,          /* error instance id  */
  msg_args               adr_log_msg_args_t,           /* message arguments  */
  detail_location        VARCHAR2(160),                /* detailed location  */
  suppl_detail           VARCHAR2(128),             /* supplemental details  */
  -- CDB fields
  con_uid                INTEGER,                     /* container unique ID */
  con_id                 INTEGER,                            /* container ID */
  con_name               VARCHAR2(30)                      /* container name */
);

/
--------------------------------------------------------
--  DDL for Type ADVISOR_OBJECT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ADVISOR_OBJECT" authid current_user
  under generic_plan_object
(task_name       varchar2(128),
 execution_name  varchar2(128),
 sql_id          varchar2(13),
 plan_id         number,
 constructor function advisor_object(task_name       varchar2,
                                     execution_name  varchar2,
                                     sql_id          varchar2,
                                     plan_id         number default null)
   return self as result,
overriding member function get_plan_rows return sql_plan_table_type)
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."ADVISOR_OBJECT" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
890 46f
c2Wn4022HsSNUMy1tNUzfNwnzV0wg41cmiDrfC+LvqqVoXrYjdgAqdsUGxwl2/03d4hKXmFJ
2S6ymRQupzDWCLHH/3Jho8Xj5Xe/vPibVTH5VrlIFlaEu8t3Mz47bfJvEyx7f4+AA4hTqG02
0EzzwFMYWNXkyDeGO3MWXWVxP1HidZlJklZYA1FQIvYHmCyk+UBHjw8cIwxVtAafBLVYHBC9
GrvwM6romjbLBXIXCCehrTDSl/QdN8kvVlbTsGaLdGarcTe2a4gx3orzVikNcn7jkNogpVF8
i9EC/iyPBsB1iAVG+a8EwdD4qcwH4n+gCojvg7ND7sEFJkgwrcLGqAF9Zyj5FSpDaP7Pn7LV
g44AVqUqlMKhwe7q2LgWHCQ8UwIDdE2OU8e4JTOmT5Z/Q78JaBg4RIsgmnE0mFQhNkBxML2V
JQ2QYWt52hNu73F0I1cS8AEG6B2x9Ntosh32R0mnRT+FkVgmkNgYDyV6nCOH/QH14r9g6Lrh
mMZWExkbG9cq1MFsN/LB5ZKTthbyTD63b9raoLWB9T8SX13itCcl/ZVkkOI59rCbUvIBJns3
PLjNC3liYtZ6cwv79jvlXYcb6TN170nd/Bv38lyBsrT8JWi2Fm17eW3yGIOPulwF9QdGR4I3
1wOzsOUh/kXxYBBJb7QhV9MFK1iEgMxBkXeVKholg8Mpiy0LwyKXp1yjoNYpROtCPh4JbLT9
jRRF4gGTKXnsFrr7zwyC1sP+cetG5RUzvqhwxPs3By4rFCT4lPYn+ZAXbUQnr36jnEphOgaV
UNUc4g4/4nLE/WwSstQ79r9Ic+DUsdCJXnzlSL37HEEyfKokV4VXxHVwwXwo0iCQIUwiZ63S
8YxNXjAzU2MFHLANWsEAjbF2s38tNKpm7btDoMgSTSvZ2miLZHLRujsEwzBTzBbOCpSBz1uA
jOP1qCK27kuikJZK2G/Ll1lKXZz14AxgAaS8wSX9/XgFuqg5a90yGKaafmRfh8FwUAbcfTRD
xfHEYt+2iYJJV8H1AmVikA4tRKRcQhm3SbhA/i1qcfyQYns07+25NMYhFxJxsdwvXvQf4RlO
W0aARRLd+P/6Ca6R/+wGKGSI0oNANJKZhBYbkw==

/

  GRANT EXECUTE ON "SYS"."ADVISOR_OBJECT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AGGXMLIMP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AGGXMLIMP" 
   authid current_user as object
(
  key RAW(8),

  static function ODCIAggregateInitialize(sctx OUT AggXMLImp, outopn IN RAW,
                                          inpopn IN RAW ) return pls_integer
    is language c
    name "AggInitialize"
    library XMLtype_lib
    with context
    parameters (
      context,
      sctx, sctx INDICATOR STRUCT, sctx DURATION OCIDuration,
      outopn OCIRaw,
      inpopn OCIRaw,
      return INT
    ),

  member function ODCIAggregateIterate(self IN OUT NOCOPY AggXMLImp,
                                       value IN sys.xmltype) return pls_integer
    is language c
    name "AggIterate"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      value, value INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateTerminate(self IN OUT NOCOPY AggXMLImp,
                                         returnValue OUT sys.XMLType,
                                         flags IN number)
                  return pls_integer
    is language c
    name "AggTerminate"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT,
      returnValue, returnValue INDICATOR sb2, returnValue DURATION OCIDuration,
      flags, flags INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateMerge(self IN OUT NOCOPY AggXMLImp,
                                     valueB IN AggXMLImp) return pls_integer
    is language c
    name "AggMerge"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      valueB, valueB INDICATOR STRUCT,
      return INT
    ),

  member function ODCIAggregateWrapContext(self IN OUT NOCOPY AggXMLImp)
                  return pls_integer
    is language c
    name "AggWrap"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      return INT
    )
);

/
--------------------------------------------------------
--  DDL for Type AGGXQAVGIMP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AGGXQAVGIMP" 
   authid current_user as object
(
  key RAW(8),

  static function ODCIAggregateInitialize(sctx OUT AggXQAvgImp, outopn IN RAW,
                                          inpopn IN RAW ) return pls_integer
    is language c
    name "XQAggAvgInitialize"
    library XMLtype_lib
    with context
    parameters(
      context,
      sctx, sctx INDICATOR STRUCT, sctx DURATION OCIDuration,
      outopn OCIRaw,
      inpopn OCIRaw,
      return INT
    ),

  member function ODCIAggregateIterate(self IN OUT NOCOPY AggXQAvgImp,
                                       value IN sys.xmltype) return pls_integer
    is language c
    name "XQAggAvgIterate"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      value, value INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateTerminate(self IN OUT NOCOPY AggXQAvgImp,
                                         returnValue OUT sys.XMLType,
                                         flags IN number)
                  return pls_integer
    is language c
    name "XQAggAvgTerminate"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT,
      returnValue, returnValue INDICATOR sb2, returnValue DURATION OCIDuration,
      flags, flags INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateMerge(self IN OUT NOCOPY AggXQAvgImp,
                                     valueB IN AggXQAvgImp) return pls_integer
    is language c
    name "XQAggAvgMerge"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      valueB, valueB INDICATOR STRUCT,
      return INT
    ),

  member function ODCIAggregateWrapContext(self IN OUT NOCOPY AggXQAvgImp)
                  return pls_integer
    is language c
    name "XQAggAvgWrap"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      return INT
    )
);

/
--------------------------------------------------------
--  DDL for Type AGGXQIMP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AGGXQIMP" 
   authid current_user as object
(
  key RAW(8),

  static function ODCIAggregateInitialize(sctx OUT AggXQImp, outopn IN RAW,
                                          inpopn IN RAW ) return pls_integer
    is language c
    name "XQAggInitialize"
    library XMLtype_lib
    with context
    parameters(
      context,
      sctx, sctx INDICATOR STRUCT, sctx DURATION OCIDuration,
      outopn OCIRaw,
      inpopn OCIRaw,
      return INT
    ),

  member function ODCIAggregateIterate(self IN OUT NOCOPY AggXQImp,
                                       value IN sys.xmltype) return pls_integer
    is language c
    name "XQAggIterate"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      value, value INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateTerminate(self IN OUT NOCOPY AggXQImp,
                                         returnValue OUT sys.XMLType,
                                         flags IN number)
                  return pls_integer
    is language c
    name "XQAggTerminate"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT,
      returnValue, returnValue INDICATOR sb2, returnValue DURATION OCIDuration,
      flags, flags INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateMerge(self IN OUT NOCOPY AggXQImp,
                                     valueB IN AggXQImp) return pls_integer
    is language c
    name "XQAggMerge"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      valueB, valueB INDICATOR STRUCT,
      return INT
    ),

  member function ODCIAggregateWrapContext(self IN OUT NOCOPY AggXQImp)
                  return pls_integer
    is language c
    name "XQAggWrap"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      return INT
    )
);

/
--------------------------------------------------------
--  DDL for Type AGGXQSUMIMP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AGGXQSUMIMP" 
   authid current_user as object
(
  key RAW(8),

  static function ODCIAggregateInitialize(sctx OUT AggXQSumImp, outopn IN RAW,
                                          inpopn IN RAW ) return pls_integer
    is language c
    name "XQAggSumInitialize"
    library XMLtype_lib
    with context
    parameters(
      context,
      sctx, sctx INDICATOR STRUCT, sctx DURATION OCIDuration,
      outopn OCIRaw,
      inpopn OCIRaw,
      return INT
    ),

  member function ODCIAggregateIterate(self IN OUT NOCOPY AggXQSumImp,
                                       value IN sys.xmltype) return pls_integer
    is language c
    name "XQAggSumIterate"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      value, value INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateTerminate(self IN OUT NOCOPY AggXQSumImp,
                                         returnValue OUT sys.XMLType,
                                         flags IN number)
                  return pls_integer
    is language c
    name "XQAggSumTerminate"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT,
      returnValue, returnValue INDICATOR sb2, returnValue DURATION OCIDuration,
      flags, flags INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateMerge(self IN OUT NOCOPY AggXQSumImp,
                                     valueB IN AggXQSumImp) return pls_integer
    is language c
    name "XQAggSumMerge"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      valueB, valueB INDICATOR STRUCT,
      return INT
    ),

  member function ODCIAggregateWrapContext(self IN OUT NOCOPY AggXQSumImp)
                  return pls_integer
    is language c
    name "XQAggSumWrap"
    library xmltype_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      return INT
    )
);

/
--------------------------------------------------------
--  DDL for Type ALERT_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ALERT_TYPE" AS OBJECT (
        timestamp_originating    timestamp with time zone,
        organization_id          varchar2(10),
        component_id             varchar2(3),
        message_id               number,
        hosting_client_id        varchar2(64),
        message_type             varchar2(12),
        message_group            varchar2(30),
        message_level            number,
        host_id                  varchar2(256),
        host_nw_addr             varchar2(256),
        module_id                varchar2(64),
        process_id               varchar2(128),
        user_id                  varchar2(30),
        upstream_component_id    varchar2(30),
        downstream_component_id  varchar2(4),
        execution_context_id     varchar2(128),
        error_instance_id        varchar2(142),
        reason_argument_count    number,
        reason_argument_1        varchar2(513),
        reason_argument_2        varchar2(513),
        reason_argument_3        varchar2(513),
        reason_argument_4        varchar2(513),
        reason_argument_5        varchar2(513),
        sequence_id              number,
        reason_id                number,
        object_owner             varchar2(30),
        object_name              varchar2(513),
        subobject_name           varchar2(30),
        object_type              varchar2(30),
        instance_name            varchar2(16),
        instance_number          number,
        scope                    varchar2(10),
        advisor_name             varchar2(30),
        metric_value             number,
        suggested_action_msg_id  number,
        action_argument_count    number,
        action_argument_1        varchar2(30),
        action_argument_2        varchar2(30),
        action_argument_3        varchar2(30),
        action_argument_4        varchar2(30),
        action_argument_5        varchar2(30),
        pdb_name                 varchar2(128)
)
 ALTER TYPE     "SYS"."ALERT_TYPE" MODIFY ATTRIBUTE object_owner VARCHAR2(128)
CASCADE

/

  GRANT EXECUTE ON "SYS"."ALERT_TYPE" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."ALERT_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ANYDATA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ANYDATA" 
as OPAQUE VARYING (*)
USING library DBMS_ANYDATA_LIB
(
  /* CONSTRUCTION */
  /* There are 2 ways to construct an AnyData. The Convert*() calls
     enable construction of the AnyData in its entirity with a single call.
     They serve as explicit CAST functions from any type in the Oracle ORDBMS
     to SYS.AnyData.
  */
  STATIC FUNCTION ConvertNumber(num IN NUMBER) return AnyData,
  STATIC FUNCTION ConvertDate(dat IN DATE) return AnyData,
  STATIC FUNCTION ConvertChar(c IN CHAR) return AnyData,
  STATIC FUNCTION ConvertVarchar(c IN VARCHAR) return AnyData,
  STATIC FUNCTION ConvertVarchar2(c IN VARCHAR2) return AnyData,
  STATIC FUNCTION ConvertRaw(r IN RAW) return AnyData,
  STATIC FUNCTION ConvertBlob(b IN BLOB) return AnyData,
  STATIC FUNCTION ConvertClob(c IN CLOB) return AnyData,
  STATIC FUNCTION ConvertBfile(b IN BFILE) return AnyData,
  STATIC FUNCTION ConvertObject(obj IN "<ADT_1>") return AnyData,
  STATIC FUNCTION ConvertObject(obj IN "<OPAQUE_1>") return AnyData,
  STATIC FUNCTION ConvertRef(rf IN REF "<ADT_1>") return AnyData,
  STATIC FUNCTION ConvertCollection(col IN "<COLLECTION_1>") return AnyData,

  /* The 2nd way to construct an AnyData is a piece by piece approach. The
     BeginCreate() call begins the construction process and
     EndCreate() call finishes the construction process..
     In between these 2 calls, the individual attributes of an Object Type or
     the elements of a Collection can be set using Set*()calls.
     For piece by piece access of the attributes of Objects and elements of
     Collections, the PieceWise() call should be invoked prior to
     Get*() calls.
     Note: The AnyData has to be constructed or accessed sequentially starting
     from its first attribute(or collection element).
     The BeginCreate() call automatically begins the construction in a
     piece-wise mode. There is no need to call PieceWise() immediately
     after BeginCreate().
     EndCreate should be called to finish the construction
     process (before which no access calls can be made).
  */

  /* NAME
         BeginCreate
     DESCRIPTION
         Begins creation process on a new AnyData.
     PARAMETERS
         dtype - The Type of the AnyData. (should correspond to
                                           OCI_TYPECODE_OBJECT or
                                           a Collection typecode.)
         adata - AnyData being constructed.
     EXCEPTIONS
         - DBMS_TYPES.invalid_parameters
           dtype is invalid (not fully constructed etc.).
     NOTE
         There is NO NEED to call PieceWise() immediately after this
     call. Automatically the construction process begins in a piece-wise
     manner.
  */
  STATIC PROCEDURE BeginCreate(dtype IN OUT NOCOPY AnyType,
                               adata OUT NOCOPY AnyData),

  /* NAME
         PieceWise.
     DESCRIPTION
         This call sets the MODE of access of the current data value to
         be an attribute at a time (if the data value is of TYPECODE_OBJECT).
         It sets the MODE of access of the data value to be a
         collection element at a time (if the data value is of
         collection TYPE). Once this call has been made, subsequent
         Set*'s and Get*'s will sequentially obtain
         individual attributes or collection elements.
     EXCEPTIONS
         - DBMS_TYPES.invalid_parameters
         - DBMS_TYPES.incorrect_usage
           On incorrect usage.
     NOTE
         The current data value must be of an OBJECT or COLLECTION type before
         this call can be made.
         Piece-wise construction and access of nested attributes that are of
         object or collection types is not supported.
  */
  MEMBER PROCEDURE PieceWise(self IN OUT NOCOPY AnyData),

  /* NAME
         SetNumber, SetDate etc.
     DESCRIPTION
         Sets the current data value.
         This is a list of procedures that should be called depending on the
         type of the current data value.
         The type of the data value should be the type of the attribute at the
         current position during the piece-wise construction process.
         NOTE - When BeginCreate() is called, construction has already
                begun in a piece-wise fashion. Subsequent calls to
                Set*() will set the successive attribute values.
                If the AnyData is a standalone collection, the
                Set*() call will set the successive collection
                elements.
     PARAMETERS
         num - The Number that needs to be set. etc.

         last_elem - This parameter is relevant only if AnyData represents a
                     a collection.
                     Set to TRUE if it is the last element of the collection,
                     FALSE otherwise.
     EXCEPTIONS
         - DBMS_TYPES.invalid_parameters
           Invalid Parameters (if it is not appropriate to add a number
                               at this point in the creation process).
         - DBMS_TYPES.incorrect_usage
           Incorrect usage
         - DBMS_TYPES.type_mismatch
           When the expected type is different from the passed in type.
     NOTE
         Sets the current data value.
  */
  MEMBER PROCEDURE SetNumber(self IN OUT NOCOPY AnyData, num IN NUMBER,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetDate(self IN OUT NOCOPY AnyData, dat IN DATE,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetChar(self IN OUT NOCOPY AnyData, c IN CHAR,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetVarchar(self IN OUT NOCOPY AnyData, c IN VARCHAR,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetVarchar2(self IN OUT NOCOPY AnyData,
                    c IN VARCHAR2, last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetRaw(self IN OUT NOCOPY AnyData, r IN RAW,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetBlob(self IN OUT NOCOPY AnyData, b IN BLOB,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetClob(self IN OUT NOCOPY AnyData, c IN CLOB,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetBfile(self IN OUT NOCOPY AnyData, b IN BFILE,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetObject(self IN OUT NOCOPY AnyData,
                    obj IN "<ADT_1>", last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetObject(self IN OUT NOCOPY AnyData,
                    obj IN "<OPAQUE_1>", last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetRef(self IN OUT NOCOPY AnyData,
                    rf IN REF "<ADT_1>", last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetCollection(self IN OUT NOCOPY AnyData,
                    col IN "<COLLECTION_1>", last_elem IN boolean DEFAULT FALSE),

  /*
     NAME
          EndCreate
     DESCRIPTION
          Ends Creation of a AnyData. Other creation functions cannot be
          called after this call.
  */
  MEMBER PROCEDURE EndCreate(self IN OUT NOCOPY AnyData),


  /* ----------------------------------------------------------------------- */
  /* ACCESSORS */
  /* ----------------------------------------------------------------------- */
  /*
     NAME
          GetTypeName
     DESCRIPTION
          Get the fully qualified Type Name for the AnyData.
          If the AnyData is based on a builtin, this function will return
          NUMBER etc.
          If it is based on a user defined type, this function will return
          <schema_name>.<type_name>. e.g. SCOTT.FOO.
          If it is based on a transient anonymous type, this function will
          return NULL.
     RETURNS
          Type name of the AnyData.
  */
  MEMBER FUNCTION GetTypeName(self IN AnyData) return VARCHAR2
    DETERMINISTIC,

  /* NAME
         GetType
     DESCRIPTION
         Gets the Type of the AnyData.
     PARAMETERS
         typ (OUT) - The AnyType corresponding to the AnyData. May be NULL
                     if it does not represent a user-defined type.
     RETURNS
         The typecode corresponding to the type of the AnyData.

     EXCEPTIONS
  */
  MEMBER FUNCTION GetType(self IN AnyData, typ OUT NOCOPY AnyType)
      return PLS_INTEGER,

  /* NAME
         Get*()
     DESCRIPTION
         Gets the current data value (which should be of appropriate type)
         The type of the current data value depends on the MODE with which
         we are accessing (Depending on whether we have invoked the
         PieceWise() call).
         If PieceWise() has NOT been called, we are accessing the
         AnyData in its entirety and the type of the data value should match
         the type of the AnyData.
         If PieceWise() has been called, we are accessing the
         AnyData piece wise. The type of the data value should match the type
         of the attribute (or collection element) at the current position.
     PARAMETERS
         num - The Number that needs to be got. etc.
     RETURNS
         DBMS_TYPES.SUCCESS or DBMS_TYPES.NO_DATA
         The return value is relevant only if PieceWise
         has been already called (for a collection). In such a case,
         DBMS_TYPES.NO_DATA signifies the end of the collection when all
         elements have been accessed.
     EXCEPTIONS
         - DBMS_TYPES.type_mismatch
           When the expected type is different from the passed in type.
         - DBMS_TYPES.invalid_parameters
           Invalid Parameters (if it is not appropriate to add a number
                               at this point in the creation process).
         - DBMS_TYPES.incorrect_usage
           Incorrect usage.
  */
  MEMBER FUNCTION GetNumber(self IN AnyData, num OUT NOCOPY NUMBER)
              return PLS_INTEGER,
  MEMBER FUNCTION GetDate(self IN AnyData, dat OUT NOCOPY DATE)
              return PLS_INTEGER,
  MEMBER FUNCTION GetChar(self IN AnyData, c OUT NOCOPY CHAR)
              return PLS_INTEGER,
  MEMBER FUNCTION GetVarchar(self IN AnyData, c OUT NOCOPY VARCHAR)
              return PLS_INTEGER,
  MEMBER FUNCTION GetVarchar2(self IN AnyData, c OUT NOCOPY VARCHAR2)
              return PLS_INTEGER,
  MEMBER FUNCTION GetRaw(self IN AnyData, r OUT NOCOPY RAW)
              return PLS_INTEGER,
  MEMBER FUNCTION GetBlob(self IN AnyData, b OUT NOCOPY BLOB)
              return PLS_INTEGER,
  MEMBER FUNCTION GetClob(self IN AnyData, c OUT NOCOPY CLOB)
              return PLS_INTEGER,
  MEMBER FUNCTION GetBfile(self IN AnyData, b OUT NOCOPY BFILE)
              return PLS_INTEGER,
  MEMBER FUNCTION GetObject(self IN AnyData, obj OUT NOCOPY "<ADT_1>")
              return PLS_INTEGER,
  MEMBER FUNCTION GetObject(self IN AnyData, obj OUT NOCOPY "<OPAQUE_1>")
              return PLS_INTEGER,
  MEMBER FUNCTION GetRef(self IN AnyData, rf OUT NOCOPY REF "<ADT_1>")
              return PLS_INTEGER,
  MEMBER FUNCTION GetCollection(self IN AnyData,
                                col OUT NOCOPY "<COLLECTION_1>")
                                return PLS_INTEGER,
  /***************************************************************************/
  /* NEWLY ADDED FUNCTIONS IN 9iR2 */
  /***************************************************************************/
  /* Convert calls for Datetime and Nchar types. */
  STATIC FUNCTION ConvertTimestamp(ts IN TIMESTAMP_UNCONSTRAINED) return AnyData,
  STATIC FUNCTION ConvertTimestampTZ(ts IN TIMESTAMP_TZ_UNCONSTRAINED)
        return AnyData,
  STATIC FUNCTION ConvertTimestampLTZ(ts IN TIMESTAMP_LTZ_UNCONSTRAINED)
        return AnyData,
  STATIC FUNCTION ConvertIntervalYM(inv IN YMINTERVAL_UNCONSTRAINED)
        return AnyData,
  STATIC FUNCTION ConvertIntervalDS(inv IN DSINTERVAL_UNCONSTRAINED)
        return AnyData,
  STATIC FUNCTION ConvertNchar(nc IN NCHAR) return AnyData,
  STATIC FUNCTION ConvertNVarchar2(nc IN NVARCHAR2) return AnyData,
  STATIC FUNCTION ConvertNClob(nc IN NCLOB) return AnyData,
  /* Set calls for Datetime and Nchar types. */
  MEMBER PROCEDURE SetTimestamp(self IN OUT NOCOPY AnyData, ts IN TIMESTAMP_UNCONSTRAINED,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetTimestampTZ(self IN OUT NOCOPY AnyData,
                    ts IN TIMESTAMP_TZ_UNCONSTRAINED,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetTimestampLTZ(self IN OUT NOCOPY AnyData,
                    ts IN TIMESTAMP_LTZ_UNCONSTRAINED,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetIntervalYM(self IN OUT NOCOPY AnyData,
                    inv IN YMINTERVAL_UNCONSTRAINED,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetIntervalDS(self IN OUT NOCOPY AnyData,
                    inv IN DSINTERVAL_UNCONSTRAINED,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetNchar(self IN OUT NOCOPY AnyData,
                    nc IN NCHAR, last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetNVarchar2(self IN OUT NOCOPY AnyData,
                    nc IN NVarchar2, last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetNClob(self IN OUT NOCOPY AnyData,
                    nc IN NClob, last_elem IN boolean DEFAULT FALSE),
  /* Get calls for Datetime and Nchar types. */
  MEMBER FUNCTION GetTimestamp(self IN AnyData, ts OUT NOCOPY TIMESTAMP_UNCONSTRAINED)
       return PLS_INTEGER,
  MEMBER FUNCTION GetTimestampTZ(self IN AnyData,
       ts OUT NOCOPY TIMESTAMP_TZ_UNCONSTRAINED) return PLS_INTEGER,
  MEMBER FUNCTION GetTimestampLTZ(self IN AnyData,
       ts OUT NOCOPY TIMESTAMP_LTZ_UNCONSTRAINED) return PLS_INTEGER,
  MEMBER FUNCTION GetIntervalYM(self IN AnyData,
       inv IN OUT NOCOPY YMINTERVAL_UNCONSTRAINED) return PLS_INTEGER,
  MEMBER FUNCTION GetIntervalDS(self IN AnyData,
       inv IN OUT NOCOPY DSINTERVAL_UNCONSTRAINED) return PLS_INTEGER,
  MEMBER FUNCTION GetNchar(self IN AnyData, nc OUT NOCOPY NCHAR)
       return PLS_INTEGER,
  MEMBER FUNCTION GetNVarchar2(self IN AnyData, nc OUT NOCOPY NVARCHAR2)
       return PLS_INTEGER,
  MEMBER FUNCTION GetNClob(self IN AnyData, nc OUT NOCOPY NCLOB)
       return PLS_INTEGER,
  /*
     NAME
         AccessNumber, AccessDate etc.
     DESCRIPTION
         Access functions for AnyData based on Built-ins are provided for
         SQL queriability.
         These functions do not throw exceptions on type-mismatch.
         Instead, they return NULL if the type of the AnyData does not
         correspond to the type of Access so that it is SQL friendly.
         If users want only those AnyData's of the appropriate Types returned
         in a Query, they should use a WHERE clause which uses
         GetTypeName() and choose the type they are interested in
         (say "SYS.NUMBER" etc.)
  */
  MEMBER FUNCTION AccessNumber(self IN AnyData) return NUMBER DETERMINISTIC,
  MEMBER FUNCTION AccessDate(self IN AnyData) return DATE DETERMINISTIC,
  MEMBER FUNCTION AccessChar(self IN AnyData) return CHAR DETERMINISTIC,
  MEMBER FUNCTION AccessVarchar(self IN AnyData) return VARCHAR DETERMINISTIC,
  MEMBER FUNCTION AccessVarchar2(self IN AnyData) return VARCHAR2
                          DETERMINISTIC,
  MEMBER FUNCTION AccessRaw(self IN AnyData) return RAW DETERMINISTIC,
  MEMBER FUNCTION AccessBlob(self IN AnyData) return BLOB DETERMINISTIC,
  MEMBER FUNCTION AccessClob(self IN AnyData) return CLOB DETERMINISTIC,
  MEMBER FUNCTION AccessBfile(self IN AnyData) return BFILE DETERMINISTIC,
  MEMBER FUNCTION AccessTimestamp(self IN AnyData) return TIMESTAMP_UNCONSTRAINED
                           DETERMINISTIC,
  MEMBER FUNCTION AccessTimestampTZ(self IN AnyData)
         REturn TIMESTAMP_TZ_UNCONSTRAINED DETERMINISTIC,
  MEMBER FUNCTION AccessTimestampLTZ(self IN AnyData)
         return TIMESTAMP_LTZ_UNCONSTRAINED DETERMINISTIC,
  MEMBER FUNCTION AccessIntervalYM(self IN AnyData)
         return YMINTERVAL_UNCONSTRAINED DETERMINISTIC,
  MEMBER FUNCTION AccessIntervalDS(self IN AnyData)
         return DSINTERVAL_UNCONSTRAINED DETERMINISTIC,
  MEMBER FUNCTION AccessNchar(self IN AnyData) return NCHAR DETERMINISTIC,
  MEMBER FUNCTION AccessNVarchar2(self IN AnyData) return NVARCHAR2
                                  DETERMINISTIC,
  MEMBER fuNCTION AccessNClob(self IN AnyData) return NCLOB DETERMINISTIC,
  /***************************************************************************/
  /* NEWLY ADDED FUNCTIONS IN 10iR1 */
  /***************************************************************************/
  /* Convert calls for BFloat, BDouble, URowid */
  STATIC FUNCTION ConvertBFloat(fl IN BINARY_FLOAT) return AnyData,
  STATIC FUNCTION ConvertBDouble(dbl IN BINARY_DOUBLE) return AnyData,
  STATIC FUNCTION ConvertURowid(rid IN UROWID) return AnyData,
  /* Set calls for Float, Double */
  MEMBER PROCEDURE SetBFloat(self IN OUT NOCOPY AnyData, fl IN BINARY_FLOAT,
                            last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetBDouble(self IN OUT NOCOPY AnyData, dbl IN BINARY_DOUBLE,
                             last_elem IN boolean DEFAULT FALSE),
  /* Get calls for Float, Double */
  MEMBER FUNCTION GetBFloat(self IN AnyData, fl OUT NOCOPY BINARY_FLOAT)
      return PLS_INTEGER,
  MEMBER FUNCTION GetBDouble(self IN AnyData, dbl OUT NOCOPY BINARY_DOUBLE)
      return PLS_INTEGER,
  /* Access calls for Float, Double, Rowid */
  MEMBER FUNCTION AccessBFloat(self IN AnyData) return BINARY_FLOAT
          DETERMINISTIC,
  MEMBER FUNCTION AccessBDouble(self IN AnyData) return BINARY_DOUBLE
          DETERMINISTIC,
  MEMBER FUNCTION AccessURowid(self IN AnyData) return UROWID DETERMINISTIC
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."ANYDATA" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
6d35 b78
J89CcAbd3f9JhQyX0x2/oA3dS3gwg1VuDCAKVwRAF5APN0XyY9HTwOqA71J/AF/j+qberv8b
5SEek9fJ+XO0i9MdYQgCL+Yy3Ox1GjP4tI9yICK3TNzdwAu14K215MGqtfh5rSl+yZPei5Fr
F0QXfQE4dGKWQE/K+o86fayRSj+TqKCb6mQr4cLH4WJbh89Jx1CwanfhJILIZ0nCDsc2PNn+
mtkf1Z5V26HRp7sc6/YIudXFoLwVilviZoRP5iwkrb2SL5LPe5aemrhMK4oCQo062S+Sa8GR
UuBj4nNAIoBzji7lnWNWgXL0hMNrJFQilii8vJldjDnWrSPdBgjHoSlhWPVxqEg+5XyqfzS4
uwe3RwBW/SS3ie1lt83uK+iT0xUo5OAws0/cwOtMNMiJvEFA9ZjoVaeOnULACPROKq5LSNKi
CZs8WcCsBeMnanJAsR5gLdq/LXDkWQkI/1ktbbr0J23gZjYfeo/lQALB6ipC7vgcYHhi5PPv
aLIV545MSk/y8iRZDnIL/q6PAcfSmQqqOlUIAx6b0B8xysk4QKZcDBwRXJPAM5uEK4vGKDcv
T26d/2c3aoO5Tx1v3xRGNjZOFMqxQi9N0DZqMN+9pbWn6HB8Ood26amJDmDpOldTjSbIfHaZ
TQmbUI7jbblEhonbHGe7Z/YspfPmlvsUwnKlJ+f343JYRAuWIkxLn3GDEekexq8Y/U9q6WR6
EUCvf94nCAq975aRwnV/q1XO9YeFG6FKQ8rQppbbFsiwLzCP1VmvekTMUOgWGjgEloarTsZF
q9xeXmnRkTouYpx1K74GkcuphaED1ePd8ztrhudXEees3a2AWJRXzJ5TI3j+swV+AcFRWNPI
RR7UpVOkt0byp8ZmGnclOjvqQQU4MMU72x4RPd7xDbDjyQ0cu5xDSASnntl6QvF2iUPyvLfJ
CNQ/N7m7NvWmQeZuYeNJt3DXLjDrOSMwBvOXGxhiW7OPVs3jh1vo7QRAjNiYOJ73zgRmGI3G
s5bUQ3wElJxy1OuuH9eXVymc6ACP+mK7agTQLgZT9Sjc5GE/QuIbrXuZW4Qy4SeDIoPHyO0c
OQrCONIRS3jVoRPNIypa3RqLNYhypcppQJe4sNJbimcM3EQP2TBARa1UlzcWBQglsNpQ4cPX
1YLhdA4PtOD8P0rt/d1yJnTXKMg4xpnqhw0NfnApdKdty3eQTeUL58xwLCM0i5qqlRugf04q
B2l+Xn0TAvKIvEMe2CuaPvJkqCdDW1owgyi/sUqDjXjEaxwfMlOn5n4Xr6bezhAqt9BRK5Gg
IeKIJaUrbffOI55BrUUhuCY9dO3sbYB/7/R8g9un7/W5oEI9WRsna6KzZqEUg6CKB1csgMEX
NqU6Dd+SRaOi4ilQLe6NoVeD5Cu2wRfZ+6CBveKw8shhjxaa8KwH6zegvnlA/oMREfoQDj1W
eJeXDk33bmZ5fgXMRR+Stja36hCsfAYN/WMS6CS8J2GIF6n3dBt54Pje8EtAql6oauI5RM2n
uVGyuXwJW4r5fU31PkwjHluSB+z0KxX6t8DESLcXaRMA9qErg2hvjAMt0knWYapsITvsOSt5
Wd9exKKqNUEzwF9hp3alBizv++JHqdkV72fGSrBCp+DOPR7VIxd0s1zUvailAV5msu96d0Dg
NxgFNYcoT6S6qIU/DQ6RnatxyfWEe49+sDZJ4FD0X6WKG6lbD/LxrklFdsGo5Nv10cbCR6bw
OM9AE6yJibL6mRxbxq4MVz+DHW5qx2omYZTTu1vxX+FNS9cnCwSy3ezXpu0HEWTYE+ad/EgK
QzYEyDJSMbWbElLfnyyDKVwxEIEDvJU06ahRii84RiWNfKy2DMO812h0kbfF3LolDxfxha6F
qy6PZoNZQUwIabvtSz+5h3381lpovQkQL1Xttt+3ijbFK17NrEq04v7LBIX7K8sCkvzhjvMn
n/uWrIrtmZ+2zeG0DT6pvfGeXppZTcuRetWVv9SiDcQ5IawP78IHPvHNl8ZvSlxuY3ln9ZgE
8U3meuI1DaehPRjtKakTrEcDORflSvyfrZcw5gVqyel3O3zsxsIBWD64oEmXf+CpigYEWKlx
LpkU78J54FYVSZ5ssU3Dj1Mc3siRWfGeaZihwEwuRPETJvdGinffVNn4qQ1H30KjBVtE2vWf
8zRekltdsA0qjw3TBV37ueh0yJC4d3ZC9Zf3elNzWtbmAKNKwTchAcH06upk5Et3G6zNVSuo
WRBZNlxKzh6YlbFHl5vijobWCSO/bcx9bDF9rMvJTBjVLc4ObrRDFtun/ek2kNmh2EhIX/de
eSRYJ5hPc2eYPU31TgGCwHXVlX11brSBFtsGkfbMKANl0NU7zg5utNcW2xkbeO5jDBQxt6c0
pJCRzHgD06kgc1/QlyYZALcn4pZcPsEECfAurmVwM4xYYS0brVZ50F0NDYDIIIL6Uq1fX202
p1rwDBpEyZ0wq3zPlk3wAhf7+n+IgFdUxcg4JZ8yg1kwyUp2tvjedWc4RnRjhoZz/JMGC7SI
yuq7dT4uSfiBt0aXaQQuNSm4JyT/5/H5xu299Y7aMXrKvxW4hOOOcaH3ilUOsh2hw38my3Ov
VuQ2Gmf9N/k7S3POilEv67/ey0JriqSvsgsMcTKHOAJmIPARqpdMwolyoeSUkk4U0n9t5I1W
NmpX0z2hHLmtNlP+i2ZJrMDmcIHrIgLb/TDSneOaKImDUBBIM88SoAZWd7sdbTLhv4qMJbsH
ame981TD/g01nZYwmEj2SaI9HTV5cpN5l2nt10c4rXdnuXaYkhO3/dYzn9aOnETldV6JoTHW
sg25LWztgUrBi0s5PNf/a2B3WSKLenoiitSvYWzT/xzFLkM6mMMaZICokAqY5xYwwk5qwPJ4
jGmeDrX5BbXP1uEz

/

  GRANT EXECUTE ON "SYS"."ANYDATA" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type ANYDATASET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ANYDATASET" 
as OPAQUE VARYING (*)
USING library DBMS_ANYDATASET_LIB
(
/* CONSTRUCTION */

  /* NOTE - The AnyDataSet needs to be contructed value by value sequentially.
            For each data instance (of the type of the AnyDataSet),
            the AddInstance() function need to be invoked.
            This adds a new data instance to the AnyDataSet.
            Subsequently, Set*() can be called to set each value
            in its entirety.

            The MODE of construction/access can be changed to attribute/
            collection element wise by making calls to PieceWise()
             - If the type of the AnyDataSet is TYPECODE_OBJECT,
               individual attributes will be set with subsequent
               Set*() calls. Likewise on access.
             - If the type of the current data value is a collection type
               individual collection elements will be set with subsequent
               Set*() calls. Likewise on access.
            This call is very similar to AnyData.PieceWise() call defined for
            the type SYS.AnyData.
            NOTE - There is no support for piecewise construction and access
                   of nested (not top level) attributes that are of object
                   types or collection types.

            EndCreate should be called to finish the construction
            process (before which no access calls can be made).
  */

  /* NAME
         BeginCreate
     DESCRIPTION
         Creates a new AnyDataSet which can be used to create a Set of data
         values of the given ANYTYPE.
     PARAMETERS
         typecode - the typecode for the type of the AnyDataSet
         dtype - The Type of the data values. This parameter is a must for
                 user-defined types like TYPECODE_OBJECT, Collection typecodes
                 etc.
         aset - The AnyDataSet being constructed.
     EXCEPTIONS
         - DBMS_TYPES.invalid_parameters
           dtype is invalid (not fully constructed etc.).
  */
  STATIC PROCEDURE BeginCreate(typecode IN PLS_INTEGER,
           rtype IN OUT NOCOPY AnyType, aset OUT NOCOPY AnyDataSet),

  /* NAME
         AddInstance.
     DESCRIPTION
         Add a new data instance to a AnyDataSet.
     EXCEPTIONS
         - DBMS_TYPES.invalid_parameters
         - DBMS_TYPES.incorrect_usage
           On incorrect usage.
     NOTE
         The data instances have to be added sequentially. The previous data
         instance must be fully constructed (or set to null) before a new one
         can be added.
         This call DOES NOT automatically set the mode of construction to be
         piece-wise. The user has to explicitly call PieceWise() if a
         piece-wise construction of the instance is intended.
  */
  MEMBER PROCEDURE AddInstance(self IN OUT NOCOPY AnyDataSet),

  /* NAME
         PieceWise.
     DESCRIPTION
         This call sets the MODE of construction, access of the data value to
         be an attribute at a time (if the data value is of TYPECODE_OBJECT).
         It sets the MODE of construction, access of the data value to be a
         collection element at a time (if the data value is of
         collection TYPE). Once this call has been made, subsequent
         Set*'s and Get* will sequentially obtain
         individual attributes or collection elements.
    EXCEPTIONS
         - DBMS_TYPES.invalid_parameters
         - DBMS_TYPES.incorrect_usage
           On incorrect usage.
    NOTE
         The current data value must be of an OBJECT or COLLECTION type before
         this call can be made. There is no support for piece-wise
         construction or access of embedded object type attributes (or nested
         collections).
  */
  MEMBER PROCEDURE PieceWise(self IN OUT NOCOPY AnyDataSet),

  /* NAME
         Set*.
     DESCRIPTION
         Sets the current data value.
         The type of the current data value depends on the MODE with which
         we are constructing (Depending on how we have invoked the
         PieceWise() call).
         The type of the current data should be the type of the
         AnyDataSet if PieceWise() has NOT been called. The type
         should be the type of the attribute at the current position if
         PieceWise() has been called.
     PARAMETERS
         num - The Number that needs to be set. etc.

         last_elem - This parameter is relevant only if PieceWise()
                     has been already called (for a collection).
                     Set to TRUE if it is the last element of the collection,
                     FALSE otherwise.
     EXCEPTIONS
         - DBMS_TYPES.invalid_parameters
           Invalid Parameters (if it is not appropriate to add a number
                               at this point in the creation process).
         - DBMS_TYPES.incorrect_usage
           Incorrect usage.
         - DBMS_TYPES.type_mismatch
           When the expected type is different from the passed in type.
     NOTE
         Sets the current data value.
  */
  MEMBER PROCEDURE SetNumber(self IN OUT NOCOPY AnyDataSet,
             num IN NUMBER, last_elem boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetDate(self IN OUT NOCOPY AnyDataSet,
             dat IN DATE, last_elem boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetChar(self IN OUT NOCOPY AnyDataSet, c IN CHAR,
             last_elem boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetVarchar(self IN OUT NOCOPY AnyDataSet,
             c IN VARCHAR, last_elem boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetVarchar2(self IN OUT NOCOPY AnyDataSet,
             c IN VARCHAR2, last_elem boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetRaw(self IN OUT NOCOPY AnyDataSet, r IN RAW,
             last_elem boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetBlob(self IN OUT NOCOPY AnyDataSet, b IN BLOB,
             last_elem boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetClob(self IN OUT NOCOPY AnyDataSet, c IN CLOB,
             last_elem boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetBfile(self IN OUT NOCOPY AnyDataSet,
             b IN BFILE, last_elem boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetObject(self IN OUT NOCOPY AnyDataSet,
             obj IN "<ADT_1>", last_elem boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetObject(self IN OUT NOCOPY AnyDataSet,
             obj IN "<OPAQUE_1>", last_elem boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetRef(self IN OUT NOCOPY AnyDataSet,
             rf IN REF "<ADT_1>", last_elem boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetCollection(self IN OUT NOCOPY AnyDataSet,
             col IN "<COLLECTION_1>", last_elem boolean DEFAULT FALSE),

  /*
     NAME
          EndCreate
     DESCRIPTION
          Ends Creation of a AnyDataSet. Other creation functions cannot be
          called after this call.
  */
  MEMBER PROCEDURE EndCreate(self IN OUT NOCOPY AnyDataSet),

  /* ----------------------------------------------------------------------- */
  /* ACCESSORS */
  /* ----------------------------------------------------------------------- */

  /*
     NAME
          GetTypeName
     DESCRIPTION
          Get the fully qualified Type Name for the AnyDataSet.
          If the AnyDataSet is based on a builtin, this function will return
          NUMBER etc.
          If it is based on a user defined type, this function will return
          <schema_name>.<type_name>. e.g. SCOTT.FOO.
          If it is based on a transient anonymous type, this function will
          return NULL.
     RETURNS
          Type name of the AnyDataSet.
  */
  MEMBER FUNCTION GetTypeName(self IN AnyDataSet) return VARCHAR2
    DETERMINISTIC,
  /* NAME
         GetType
     DESCRIPTION
         Gets the AnyType describing the type of the data instances in an
         AnyDataSet.
     PARAMETER
         typ (OUT) - The AnyType corresponding to the AnyData. May be NULL
                     if it does not represent a user-defined type.
     RETURNS
         The typecode corresponding to the type of the AnyData.
     EXCEPTIONS
  */
  MEMBER FUNCTION GetType(self IN AnyDataSet, typ OUT NOCOPY AnyType)
           return PLS_INTEGER,

  /* NAME
         GetInstance
     DESCRIPTION
         Get's the next instance in an AnyDataSet. Only sequential access to
         the instances in an AnyDataSet is allowed. After this function has
         been called, the Get*() functions can be invoked on the
         AnyDataSet to access the current instance. If PieceWise() is called
         before doing the Get*() calls, the individual attributes
         (or collection elements) can be accessed. It is an error to invoke
          this function before the AnyDataSet is fully created.
     PARAMETERS
         self (IN OUT )   - The AnyDataSet being accessed.
         return          - DBMS_TYPES.SUCCESS or DBMS_TYPES.NO_DATA.
                           DBMS_TYPES.NO_DATA signifies the end of the
                           AnyDataSet when all instances have been accessed.
     NOTE
         This function should be called even before accessing the 1st
         instance.
  */
  MEMBER FUNCTION GetInstance(self IN OUT NOCOPY AnyDataSet)
            return PLS_INTEGER,

  /* NAME
         Get*.
     DESCRIPTION
         Gets the current data value (which should be of appropriate type)
         The type of the current data value depends on the MODE with which
         we are accessing (Depending on how we have invoked the
         PieceWise() call).
         If PieceWise() has NOT been called, we are accessing the
         instance in its entirety and the type of the data value should match
         the type of the AnyDataSet.
         If PieceWise() has been called, we are accessing the
         instance piece wise. The type of the data value should match the type
         of the attribute (or collection element) at the current position.

     PARAMETERS
         num - The Number that needs to be got. etc.
     RETURNS
         DBMS_TYPES.SUCCESS or DBMS_TYPES.NO_DATA
         The return value is relevant only if PieceWise
         has been already called (for a collection). In such a case,
         DBMS_TYPES.NO_DATA signifies the end of the collection when all
         elements have been accessed.
     EXCEPTIONS
         - DBMS_TYPES.invalid_parameters
           Invalid Parameters (if it is not appropriate to add a number
                               at this point in the creation process).
         - DBMS_TYPES.incorrect_usage
           Incorrect usage.
         - DBMS_TYPES.type_mismatch
           When the expected type is different from the passed in type.
  */
  MEMBER FUNCTION GetNumber(self IN AnyDataSet, num OUT NOCOPY NUMBER)
              return PLS_INTEGER,
  MEMBER FUNCTION GetDate(self IN AnyDataSet, dat OUT NOCOPY DATE)
              return PLS_INTEGER,
  MEMBER FUNCTION GetChar(self IN AnyDataSet, c OUT NOCOPY CHAR)
              return PLS_INTEGER,
  MEMBER FUNCTION GetVarchar(self IN AnyDataSet, c OUT NOCOPY VARCHAR)
              return PLS_INTEGER,
  MEMBER FUNCTION GetVarchar2(self IN AnyDataSet, c OUT NOCOPY VARCHAR2)
              return PLS_INTEGER,
  MEMBER FUNCTION GetRaw(self IN AnyDataSet, r OUT NOCOPY RAW)
              return PLS_INTEGER,
  MEMBER FUNCTION GetBlob(self IN AnyDataSet, b OUT NOCOPY BLOB)
              return PLS_INTEGER,
  MEMBER FUNCTION GetClob(self IN AnyDataSet, c OUT NOCOPY CLOB)
              return PLS_INTEGER,
  MEMBER FUNCTION GetBfile(self IN AnyDataSet, b OUT NOCOPY BFILE)
              return PLS_INTEGER,
  MEMBER FUNCTION GetObject(self IN AnyDataSet, obj OUT NOCOPY "<ADT_1>")
              return PLS_INTEGER,
  MEMBER FUNCTION GetObject(self IN AnyDataSet, obj OUT NOCOPY "<OPAQUE_1>")
              return PLS_INTEGER,
  MEMBER FUNCTION GetRef(self IN AnyDataSet, rf OUT NOCOPY REF "<ADT_1>")
              return PLS_INTEGER,
  MEMBER FUNCTION GetCollection(self IN AnyDataSet,
              col OUT NOCOPY "<COLLECTION_1>") return PLS_INTEGER,

  /* NAME
         GetCount
     DESCRIPTION
         Gets the number of data instances in a AnyDataSet.
     PARAMETERS
     EXCEPTIONS
         None.
  */
  MEMBER FUNCTION GetCount(self IN AnyDataSet) return PLS_INTEGER,
  /***************************************************************************/
  /* NEWLY ADDED FUNCTIONS IN 9iR2 */
  /***************************************************************************/
  /* Set Functions for Datetime and NCHAR types. */
  MEMBER PROCEDURE SetTimestamp(self IN OUT NOCOPY AnyDataSet, ts IN TIMESTAMP_UNCONSTRAINED,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetTimestampTZ(self IN OUT NOCOPY AnyDataSet,
                    ts IN TIMESTAMP_TZ_UNCONSTRAINED,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetTimestampLTZ(self IN OUT NOCOPY AnyDataSet,
                    ts IN TIMESTAMP_LTZ_UNCONSTRAINED,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetIntervalYM(self IN OUT NOCOPY AnyDataSet,
                    inv IN YMINTERVAL_UNCONSTRAINED,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetIntervalDS(self IN OUT NOCOPY AnyDataSet,
                    inv IN DSINTERVAL_UNCONSTRAINED,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetNchar(self IN OUT NOCOPY AnyDataSet,
                    nc IN NCHAR, last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetNVarchar2(self IN OUT NOCOPY AnyDataSet,
                    nc IN NVarchar2, last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetNClob(self IN OUT NOCOPY AnyDataSet,
                    nc IN NClob, last_elem IN boolean DEFAULT FALSE),
  /* Get Functions for Datetime and NCHAR types. */
  MEMBER FUNCTION GetTimestamp(self IN AnyDataSet, ts OUT NOCOPY TIMESTAMP_UNCONSTRAINED)
       return PLS_INTEGER,
  MEMBER FUNCTION GetTimestampTZ(self IN AnyDataSet,
       ts OUT NOCOPY TIMESTAMP_TZ_UNCONSTRAINED) return PLS_INTEGER,
  MEMBER FUNCTION GetTimestampLTZ(self IN AnyDataSet,
       ts OUT NOCOPY TIMESTAMP_LTZ_UNCONSTRAINED) return PLS_INTEGER,
  MEMBER FUNCTION GetIntervalYM(self IN AnyDataSet,
       inv IN OUT NOCOPY YMINTERVAL_UNCONSTRAINED) return PLS_INTEGER,
  MEMBER FUNCTION GetIntervalDS(self IN AnyDataSet,
       inv IN OUT NOCOPY DSINTERVAL_UNCONSTRAINED) return PLS_INTEGER,
  MEMBER FUNCTION GetNchar(self IN AnyDataSet, nc OUT NOCOPY NCHAR)
       return PLS_INTEGER,
  MEMBER FUNCTION GetNVarchar2(self IN AnyDataSet, nc OUT NOCOPY NVARCHAR2)
       return PLS_INTEGER,
  MEMBER FUNCTION GetNClob(self IN AnyDataSet, nc OUT NOCOPY NCLOB)
       return PLS_INTEGER,
  /***************************************************************************/
  /* NEWLY ADDED FUNCTIONS IN 10iR1 */
  /***************************************************************************/
  /* Set functions for BFloat, BDouble and UROWID. */
  MEMBER PROCEDURE SetBFloat(self IN OUT NOCOPY AnyDataSet, fl IN BINARY_FLOAT,
                    last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetBDouble(self IN OUT NOCOPY AnyDataSet,
                    dbl IN BINARY_DOUBLE, last_elem IN boolean DEFAULT FALSE),
  MEMBER PROCEDURE SetURowid(self IN OUT NOCOPY AnyDataSet, rid IN UROWID,
                    last_elem IN boolean DEFAULT FALSE),
  /* Get functions for Float, Double and UROWID. */
  MEMBER FUNCTION GetBFloat(self IN AnyDataSet, fl OUT NOCOPY BINARY_FLOAT)
       return PLS_INTEGER,
  MEMBER FUNCTION GetBDouble(self IN AnyDataSet, dbl OUT NOCOPY BINARY_DOUBLE)
       return PLS_INTEGER,
  MEMBER FUNCTION GetURowid(self IN AnyDataSet, rid OUT NOCOPY UROWID)
       return PLS_INTEGER
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."ANYDATASET" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
46c2 830
+ytiqHLNxbo1w59Fv8CZACagWmEwg0MTNccK3y/GEv+wUF2JR7jjeYrbTnuQ88rBJtYC1aLT
nW1JB4cSKZjSBb8CS2I4fMrW5t4bt1Lbnp+q1a/80FYz2qysFIPv5LEks8FyctJyT+ewv7/n
Y+GZq1GkrubTAXZHhdUBqElUyFv7cxUUZuNloG3rHQGsNNO5NZ3rKJxgJcr6NuChdYqPxX6W
ugBTOfNjHfNvwoHz/zVeoiI27nTG4+5iNf5PqnK5zFkdSjoc6a/fAG4Sdg6k7V4IpAK9zgio
j3TaR2ssbmYQFqsA9cB7mYuDqonpIdtm7hYCnwCsZjm7jhhIVCHhq4+JZ4moAD/RkBTQDXet
IAqKEywj5BteS2wFqbhiRFcYFtbbS8h6GhQZcSV5qVediFE02JL2QMOGCErxyDTrdyWaAvaq
7kdWt3mxc2IBBEVaXj3rhH/clTfbkZle1fS9yRZm/W6V4Xm4bvFFcHOvrIFQY518i0r5xf6y
+Mfn3o+cUQAs9qEh8cRf0XprXOyXPzwhnP8R8iBDdP/tXOKxmsxZS1WTQJpS67Sia3obsvZk
VfRdl4j6acBZRLCKXOl/dsZ4R7oOVphbQOmAHlI6ejjsx/Zux/ZBll5d+ggS6xTBmwS0gYLG
sf8WwKHMkpCAfHYVytysG0A3ehuy+DdXEsBgf8iOrwhX+i7DFh0iMqPdw66Q+XD/aNx+pItL
t9q0UFO6ABrUJorJEBNu17B737ePv9MY3HprbSHttZSABnz4zRlB/BWIXKUx1XYkk71BAuYN
GBaI87GRB7WFhS4RHw9tK6Oyao23LklNesRGhxBf6r/2Wcsr5BU5o5JJqxtSdISNG9i6c1jb
J6BB+Jo5sVXxtnoznrWy1TF3gg8VUebSAwm4ydV40/8bC0I5s9XzCXW3sSRC2L69tqGR5DS5
qXcVPWGJNQGuakXKOXGgkF5cMCtBf+VcO9riQHHzSNHHK+dL0EBpCuIOKVMyBIdxcKa1iQVs
L8ImNXnt8nyYZeDy7E/LfLGX/6aNQ4ytr3vKcdCAXZgKnmvJ0kQ/YtqEVev6Q0W0WG6gA4vf
qquwbhcu1y9PRwGJ1FmjMYITEPAh4bV5CIBZXYlOE29ePKbZ4YdiahVQHIbkqqlSGeyGaBxd
4JfKMvr/dykhQHCR0HK14fDLIvyKznyKdDv/jn0hMCWXQRnA2JIHc+8aSuw65770gyfYZm5z
VIJ3xJKvG9eKvgCuSKCNXcqkbnehIfVJWBUcmtkwASpJpnKSWCpqAiQJc0f5vQq9F9S2nwt6
4DJrRz824sYWiTEkxdGUwqOTVh/3X7MR/AvQpNSP61qULf1nyVlx642jZ1LEVvZQhJt8CoZ+
vtfYhHdOzOnwaQi67z6ZRWxncJj2Ix6T7NoCRo2XHLDHdqZ+4Wet6F+ihwEfTInNzlHbTAGZ
UpSX41/XXlIzpcmWrpU9IeMs7RTm5ARXHwq1z9HsZfN46FFcGwavXgh6PcOF/WKqagg/9rfn
lxmR0HMzMOw364/iiZz3NRxKUkLpTWpJZvIgWqKJe/LbI0X0cJDEwBya910Tp1RChBfqYbyY
e5yIJRv9n7DTA4Ox3sI7g48xWLt+Uc+6igqYe0hDSJi6U/+kxz0y5fkxq5bblp4whjsw5evi
PneuBjUe6UqdBPbXOO2PO+XdCpe5e1FDZWRq8bP+sAyC4tQxooK8RMHAwFfVxe6edelrY/s7
1T+YUHHwxG5FWLArUGEGk+pqn+46ejVB2J8H4YIZs38L1uYSyZYP6m8pIAIxZ2T8tD3XvWxG
HwW2gwtxrnYLzW0GmxZ3D5TE1MTPqyDzMUoxk57ic9Rgbo/oO6URtyBJyxYd0wc0gJr2zmOY
Mi82twemsW/S8I6zss5jdRb6rEoPbcwFgeGkmHvZYvZRY5gq9/VMrc9R2FGIy8fUt7+rKj/E
yGCbTWW5EC+YuhQ1dsZwkjWjxGPbUwCJub2S6NPNGXBSjIGk//nUvSCd+7Ah6/BiajWUlj2v
4bQlQ8NIQTQ8hfIDYXpcKuCXJeE9J3G3wrLFFVEgneSZxhTqFA==

/

  GRANT EXECUTE ON "SYS"."ANYDATASET" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type ANYTYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ANYTYPE" 
AS OPAQUE VARYING (*)
USING library DBMS_ANYTYPE_LIB
(

  /* NAME
         BeginCreate()
     DESCRIPTION
         Creates a new instance of ANYTYPE which can be used to create a
         transient type Description.
     PARAMETERS
         typecode - Use a constant from DBMS_TYPES package.
                    Typecodes for  user-defined type:
                     can be  DBMS_TYPES.TYPECODE_OBJECT
                             DBMS_TYPES.TYPECODE_VARRAY or
                             DBMS_TYPES.TYPECODE_TABLE
                    Typecodes for builtin types:
                             DBMS_TYPES.TYPECODE_NUMBER etc.
         atype - AnyType for a transient-type.

     EXCEPTIONS
  */
  STATIC PROCEDURE BeginCreate(typecode IN PLS_INTEGER,
                               atype OUT NOCOPY AnyType),

  /*
     NAME
         SetInfo
     DESCRIPTION
          This procedure sets any additional information required for
          constructing a COLLECTION or builtin type.
          NOTE: It is an error to call this function on an ANYTYPE that
                represents a persistent user defined type.
     PARAMETERS
          self     - The transient ANYTYPE that is being constructed.

          prec, scale (OPTIONAL) - REQUIRED IF TYPECODE REPRESENTS A NUMBER.
                                   Give precision and scale. ignored otherwise.

          len (OPTIONAL) - REQUIRED IF TYPECODE REPRESENTS A RAW, CHAR,
                           VARCHAR, VARCHAR2 types. Gives length.

          csid, csfrm (OPTIONAL) -  REQUIRED IF TYPECODE REPRESENTS Types
                                    requiring character info. For eg: CHAR,
                                    VARCHAR, VARCHAR2, CFILE.

          atype (OPTIONAL)     - REQUIRED IF collection element TYPECODE IS
                                 a user-defined type like TYPECODE_OBJECT
                                 etc. It is also required for a built-in type
                                 that needs user-defined type information
                                 such as TYPECODE_REF. This parameter is not
                                 needed otherwise.

          The following parameters are required for Collection types:

          elem_tc (OPTIONAL)   - Must be of the collection element's typecode
                                 (from DBMS_TYPES package).
          elem_count (OPTIONAL) - Pass 0 for elem_count if the self represents
                                  a nested table (TYPECODE_TABLE). Otherwise
                                  pass the collection count if self represents
                                  a VARRAY.
     EXCEPTIONS
          - DBMS_TYPES.invalid_parameters
            Invalid Parameters (typecode, typeinfo)
          - DBMS_TYPES.incorrect_usage
            incorrect usage (cannot call after calling EndCreate()
                             etc.)
  */
  MEMBER PROCEDURE SetInfo(self IN OUT NOCOPY AnyType,
           prec IN PLS_INTEGER, scale IN PLS_INTEGER,
           len IN PLS_INTEGER,
           csid IN PLS_INTEGER, csfrm IN PLS_INTEGER,
           atype IN ANYTYPE DEFAULT NULL,
           elem_tc IN PLS_INTEGER DEFAULT NULL,
           elem_count IN PLS_INTEGER DEFAULT 0),

  /*
     NAME
          AddAttr
     DESCRIPTION
          This procedure Adds an attribute to an AnyType (of typecode
          DBMS_TYPES.TYPECODE_OBJECT)
     PARAMETERS
          self     - The transient ANYTYPE that is being constructed.
                     Must be of Type DBMS_TYPES.TYPECODE_OBJECT.

          aname (OPTIONAL) - Attribute's name. Could be null.

          typecode - Attribute's typecode. Can be builtin or user-defined.
                     typecode (from DBMS_TYPES package).

          prec, scale (OPTIONAL) - REQUIRED IF TYPECODE REPRESENTS A NUMBER.
                                   Give precision and scale. ignored otherwise.

          len (OPTIONAL) - REQUIRED IF TYPECODE REPRESENTS A RAW, CHAR,
                           VARCHAR, VARCHAR2 types. Gives length.

          csid, csfrm (OPTIONAL) -  REQUIRED IF TYPECODE REPRESENTS Types
                                    requiring character info. For eg: CHAR,
                                    VARCHAR, VARCHAR2, CFILE.

          attr_type (OPTIONAL) - AnyType corresponding to a User defined Type.
                                 This parameter is required if the attribute is
                                 a user defined type.
       EXCEPTIONS
          - DBMS_TYPES.invalid_parameters
            Invalid Parameters (typecode, typeinfo)
          - DBMS_TYPES.incorrect_usage
            incorrect usage (cannot call after calling EndCreate()
                             etc.)
  */
  MEMBER PROCEDURE AddAttr(self IN OUT NOCOPY AnyType,
           aname IN VARCHAR2,
           typecode IN PLS_INTEGER,
           prec IN PLS_INTEGER, scale IN PLS_INTEGER,
           len IN PLS_INTEGER,
           csid IN PLS_INTEGER, csfrm IN PLS_INTEGER,
           attr_type IN ANYTYPE DEFAULT NULL),


  /*
     NAME
          EndCreate
     DESCRIPTION
          Ends Creation of a transient AnyType. Other creation functions cannot
          be called after this call.
  */
  MEMBER PROCEDURE EndCreate(self IN OUT NOCOPY AnyType),

  /* NAME
         GetPersistent()
     DESCRIPTION
        This function is desupported. Use GetANYTypeFromPersistent().
  */
  STATIC FUNCTION GetPersistent(schema_name IN VARCHAR2,
                      type_name IN VARCHAR2,
                      version IN varchar2 DEFAULT NULL) return AnyType,

/* ANYTYPE ACCESSOR FUNCTIONS */

  /*
     NAME
          GetInfo
     DESCRIPTION
          Get the Type Information for the ANYTYPE

     PARAMETERS
          prec, scale  - IF TYPECODE REPRESENTS A NUMBER.
                         Give precision and scale. ignored otherwise.

          len  - IF TYPECODE REPRESENTS A RAW, CHAR,
                 VARCHAR, VARCHAR2 types. Gives length.

          csid, csfrm -  IF TYPECODE REPRESENTS Types
                         requiring character info. For eg: CHAR,
                         VARCHAR, VARCHAR2, CFILE.
          schema_name, type_name, version - Type's schema (if persistent),
                                            typename and version.

          numelems - if self is a VARRAY, this gives the varray count.
                  if self is of TYPECODE_OBJECT, this gives the number of
                  attributes.

     RETURNS
          The typecode of self.

     EXCEPTIONS
          - DBMS_TYPES.invalid_parameters
            Invalid Parameters (position is beyond bounds or
                                the AnyType is not properly Constructed).)
  */
  MEMBER FUNCTION GetInfo (self IN AnyType,
       prec OUT PLS_INTEGER, scale OUT PLS_INTEGER,
       len OUT PLS_INTEGER, csid OUT PLS_INTEGER,
       csfrm OUT PLS_INTEGER,
       schema_name OUT VARCHAR2, type_name OUT VARCHAR2, version OUT varchar2,
       numelems OUT PLS_INTEGER)
                 return PLS_INTEGER,


  /*
     NAME
          GetAttrElemInfo
     DESCRIPTION
          Gets the Type Information for an attribute of the
          type (if it is of TYPECODE_OBJECT)
          Gets the Type Information for a collection's element type if the
          self parameter is of a collection type.
     PARAMETERS
          position  - If self is of TYPECODE_OBJECT, this gives the attribute
                      position (starting at 1). It is ignored otherwise.

          prec, scale  - IF attribute/collection element TYPECODE
                         REPRESENTS A NUMBER. gives precision and scale.
                         ignored otherwise.

          len  - IF attribute/collection element TYPECODE REPRESENTS A RAW,
                 CHAR, VARCHAR, VARCHAR2 types. Gives length.

          csid, csfrm -  IF attribute/collection element TYPECODE REPRESENTS
                         Types requiring character info. For eg: CHAR,
                         VARCHAR, VARCHAR2, CFILE, gives charset id etc.

          attr_elt_type - IF attribute/collection element TYPECODE REPRESENTS
                         a user-defined type, this returns the ANYTYPE
                         corresponding to it. User can subsequently describe
                         the attr_elt_type.
          aname  - Attribute name (if it is an attribute of an object type.
                   NULL otherwise.

     RETURNS
          The typecode of the attribute or collection element.

     EXCEPTIONS
          - DBMS_TYPES.invalid_parameters
            Invalid Parameters (position is beyond bounds or
                                the AnyType is not properly Constructed).)
  */
  MEMBER FUNCTION GetAttrElemInfo (self IN AnyType, pos IN PLS_INTEGER,
       prec OUT PLS_INTEGER, scale OUT PLS_INTEGER,
       len OUT PLS_INTEGER, csid OUT PLS_INTEGER, csfrm OUT PLS_INTEGER,
       attr_elt_type OUT ANYTYPE, aname OUT VARCHAR2) return PLS_INTEGER

);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."ANYTYPE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
10c4 3fe
lUg7qCXCfHtNkyPVt2nBvumx8Wwwgz2cr8AFyi9AEjNeil1dR31QGt4Shb1rDddfNqtn3s8l
0lD2sAeHmzNEFJHIRCslyfGSyC2cVUQzmijjImHnY01KZz8iKbAPJKlN1zlHgN5RiAIrnhhc
SfAfuYiw0/TUO984w8PnX4S6CkFS8BKJAm1HP+OyRLPej6wYPEfZ0Dz1zeZY4c93Fq0mN7c5
7vz4uxPVTZM+9HrmXN/lLB0jC0YgWSypnoL4jJ+9o2YudfoOYYy+qd4tTEK63clSNV/qX9Ni
FBYeIQTXYS6yNls1WLUiSkyaKFwnSz7MOVwJTYia9DsVIxcKx7zrTVo7onuWZhby/H7e9l2+
OOVUMqeJ5ZB+wMy8Lz+Qae5K9Q2TP+qx90k8tNIjvLmZ+cP1cbDmIuhDnXO6OjvTapq+l/9h
FptYokxCXjAtBnbc1QEH7X7uznEN4jTVYDpRIdzCSJKn3GWFfaeGlPDTkD6jVp/O8W5Ikrdh
k/41LgMTFOca5eM8wGLn2yl55BzjGltmhq2xbni7nmxi+HbcKZ+10jzNIudroJHPD1nCovQG
HTIGCzVfv/CXGgkJmN1V0q3dwLDvZNT2f1Ue3q+7K55Ihk9iRbDHNEe/pLDc5AD8PBRw8u+x
uukotMgiDI901D3/KJ+rr4SxdTbITdqtOPHY68GqCbBwsLyVhlWw7D4ZU9CyDPdt0lylUrDl
XVHUl0eDn6DRJNxANbHYUphAJQVbnlnXeyTwpEVh1h/LJb5CtqUjbwalWel0ouhghC7YcncB
NZULmGQRkYEpMLG0ugzXwRPslkts/aXZHpBHtR7zq0XRDpTsq5t96qDLU3Z+NcJc5+ilmU5x
YMD8ZsEkc5d63cKmv7CGQr0JEigxvZtL5tV3MfhdMr28qeKYJC08c9LQQQ9OznXnvS7hU1qP
scEvznE2lQ72og5poQmcpV9ShfGeIPQnFMx/Xn4BtNkc8ai4XeGg9o9/rmT4KKqmFJK9vQ==


/

  GRANT EXECUTE ON "SYS"."ANYTYPE" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type AQ$_AGENT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_AGENT" 
                                                                      
AS OBJECT
( name          varchar2(30), -- M_IDEN, name of a message producer or consumer
  address       varchar2(1024),           -- address where message must be sent
  protocol      number)                -- protocol for communication, must be 0
 alter type     "SYS"."AQ$_AGENT" modify attribute
           (name varchar2(512)) CASCADE

/

  GRANT EXECUTE ON "SYS"."AQ$_AGENT" TO PUBLIC WITH GRANT OPTION;
  GRANT EXECUTE ON "SYS"."AQ$_AGENT" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type AQ$_CACHE_MSGBM
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_CACHE_MSGBM" FORCE
AS OBJECT (
  msgid         RAW(16),
  bitmap        RAW(256),
  lck_bitmap    RAW(256),
  correlation   VARCHAR2(128),
  priority      NUMBER,
  state         NUMBER,
  enq_time      TIMESTAMP(6),
  delivery_time TIMESTAMP(6),
  expiration    TIMESTAMP(6)
 ) NOT PERSISTABLE;

/

  GRANT EXECUTE ON "SYS"."AQ$_CACHE_MSGBM" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_DEQUEUE_HISTORY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_DEQUEUE_HISTORY" 
                                                                      
AS OBJECT
( consumer              varchar2(30),                    -- identifies dequeuer
  transaction_id        varchar2(22),     -- M_LTID, transaction id of dequeuer
  deq_time              date,                                -- time of dequeue
  deq_user              number,         -- user id of client performing dequeue
  remote_apps           varchar2(4000),        -- string repn. of remote agents
  agent_naming          number,            -- how was the message sent to agent
  propagated_msgid      raw(16))                  -- message id in remote queue
 alter type     "SYS"."AQ$_DEQUEUE_HISTORY" modify attribute
           (consumer varchar2(512)) CASCADE

/

  GRANT EXECUTE ON "SYS"."AQ$_DEQUEUE_HISTORY" TO PUBLIC WITH GRANT OPTION;
  GRANT EXECUTE ON "SYS"."AQ$_DEQUEUE_HISTORY" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type AQ$_DESCRIPTOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_DESCRIPTOR" AS OBJECT (
        queue_name       VARCHAR2(65),                -- name of the queue
        consumer_name    VARCHAR2(30),                -- name of the consumer
        msg_id           RAW(16),                     -- message identifier
        msg_prop         msg_prop_t,                  -- message properties
        gen_desc         sys.aq$_ntfn_descriptor,     -- generic descriptor
        msgid_array      sys.aq$_ntfn_msgid_array,    -- grp ntfn msgid list
        ntfnsRecdInGrp   NUMBER)                      -- ntfns recd in grp
 alter type     "SYS"."AQ$_DESCRIPTOR" modify attribute
           (queue_name varchar2(261),
            consumer_name varchar2(512)) CASCADE

/

  GRANT EXECUTE ON "SYS"."AQ$_DESCRIPTOR" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_EVENT_MESSAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_EVENT_MESSAGE" 
AS OBJECT (
       sub_name            VARCHAR2(128),        -- name of the subscription
       sub_namespace       NUMBER,              -- namespace of the subscription
       payloadt            NUMBER,              -- payload type
       payload             RAW(2000),           -- message payload
       queue_name          VARCHAR2(65),        -- name of the queue
       msg_id              RAW(16),             -- message identifier
       consumer_name       VARCHAR2(30),        -- name of the consumer
       priority            NUMBER,              -- priority
       delay               NUMBER,              -- delay
       expiration          NUMBER,              -- expiration
       attempts            NUMBER,              -- number of attempts
       enqueue_time        DATE,                -- time of enqueue
       state               NUMBER,              -- state
       exception_queue     VARCHAR2(51),        -- exception queue
       correlation         VARCHAR2(128),       -- correlation
       original_msgid      RAW(16),             -- original message id
       agent_name          VARCHAR2(30),        -- sender name
       agent_address       VARCHAR2(1024),      -- sender address
       agent_protocol      NUMBER,              -- sender protocol
       recipient_list      SYS.AQ$_RECIPIENTS,  -- recipient list
       xmlpayload          VARCHAR2(4000),      -- payload in xml, if reqd.
       pblob               BLOB,                -- blob for storing raw payload
       pdb                 NUMBER)
                                                -- for 11.0 compatible
 alter type     "SYS"."AQ$_EVENT_MESSAGE" modify attribute
           (sub_name varchar2(512),
            queue_name varchar2(261),
            consumer_name varchar2(512),
            exception_queue varchar2(128),
            agent_name varchar2(512))
            CASCADE

/
--------------------------------------------------------
--  DDL for Type AQ$_HISTORY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_HISTORY" 
                                                                      
AS VARRAY(1024) OF sys.aq$_dequeue_history

/

  GRANT EXECUTE ON "SYS"."AQ$_HISTORY" TO PUBLIC WITH GRANT OPTION;
  GRANT EXECUTE ON "SYS"."AQ$_HISTORY" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_ARRAY_ERROR_INFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_ARRAY_ERROR_INFO" 
                                                                      
as object
(
   error_position    int,
   error_no          int,
   error_msg         varchar2(4000)
);

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_ARRAY_ERROR_INFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_ARRAY_ERRORS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_ARRAY_ERRORS" 
                                                                      
as varray(2147483647) of aq$_jms_array_error_info;

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_ARRAY_ERRORS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_ARRAY_MSGID_INFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_ARRAY_MSGID_INFO" 
                                                                      
as object
(
   msgid    raw(16)
);

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_ARRAY_MSGID_INFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_ARRAY_MSGIDS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_ARRAY_MSGIDS" 
                                                                      
as varray(2147483647) of raw(16);

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_ARRAY_MSGIDS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_BYTES_MESSAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_BYTES_MESSAGE" 
                                      
as object
(
  header     aq$_jms_header,
  bytes_len  int,
  bytes_raw  raw(2000),
  bytes_lob  blob,
  STATIC FUNCTION construct RETURN aq$_jms_bytes_message,

  --
  -- set_bytes sets payload in RAW into bytes_raw if the length of
  -- payload is <= 2000, otherwise into bytes_lob.
  --
  -- @param payload (IN)
  --
  MEMBER PROCEDURE set_bytes ( payload IN RAW ),

  --
  -- set_bytes sets payload in blob in bytes_lob.
  --
  -- @param payload (IN)
  --
  MEMBER PROCEDURE set_bytes ( payload IN BLOB ),

  --
  -- get_bytes puts bytes_raw into payload if it is not null,
  -- or transfers bytes_lob in blob into payload in RAW if the
  -- length of bytes_lob is =< 32767 (2**16 -1).
  -- Maximum length of raw in PL/SQL is 32767.
  --
  -- @param payload (OUT)
  --
  -- @throws -24190 if bytes_raw is null and
  -- the length of bytes_lob is > 32767.
  --
  MEMBER PROCEDURE get_bytes ( payload OUT RAW ),

  --
  -- get_bytes puts bytes_lob into payload if it is not null,
  -- or transfers bytes_raw in RAW into payload in blob.
  --
  -- @param payload (OUT)
  --
  MEMBER PROCEDURE get_bytes ( payload OUT NOCOPY BLOB ),
 -- *******************************************
  -- The following are common procedures of aq$_jms_stream_message,
  -- aq$_jms_bytes_message and aq$_jms_map_message types to synchronize
  -- the data between JAVA stored procedure and PL/SQL.
  -- *******************************************

  --============================================
  -- Get the JAVA exception thrown during the previous failure.
  -- Only one JAVA exception is recorded for a session. If the
  -- exception is not fetched in time, it might be overwritten
  -- by the exception thrown in next failure.

  STATIC FUNCTION get_exception
  RETURN AQ$_JMS_EXCEPTION,


  --============================================
  -- Clean all the messages in the JVM session memory.
  --

  STATIC PROCEDURE clean_all,


  --============================================
  -- Populate the data at JAVA stored procedure with the data at PL/SQL side.
  --
  -- Underlying, it takes the RAW/BLOB stored in PL/SQL aq$_jms_bytes_message
  -- to construct a JAVA object (for aq$_jms_bytes_message is DataInputStream)
  -- which is stored in ORACLE JVM session memeory.
  --
  -- Parameter "id" is called operation id that is used to identify the slot
  -- where the JAVA object is stored in the ORACLE JVM session memeory.
  -- If "id" is NULL, a new slot is created for this PL/SQL object.
  -- Later JMS operations on the payload need to provide this operation id.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --        if id is negative, the system will create a new operation id.
  --
  -- Returns:
  --  the operation id.
  --
  -- The prepare procedure for aq$_jms_bytes_message sets the message access mode
  -- to MESSAGE_ACCESS_READONLY. Later calls of write_XXX procedure raise ORA-24196 error.
  -- User can call clear_body procedure to set the message access mode to
  -- MESSAGE_ACCESS_WRITEONLY.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.
  -- Raise ORA-24199: JAVA store procedure message store overflow.

  MEMBER FUNCTION prepare (id IN PLS_INTEGER)
 RETURN PLS_INTEGER,


  --============================================
  -- Set the data at JAVA stored procedure as empty payload.
  --
  -- Underlying, it initializes a new DataOutputStream object and set it to
  -- the static varaible in ORACLE JVM session memeory.
  --
  -- Parameter "id" is called operation id that is used to identify the slot
  -- where the JAVA object is stored in the ORACLE JVM session memeory.
  -- If "id" is NULL, a new slot is created for this PL/SQL object.
  -- Later JMS operations on the payload need to provide this operation id.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --        if id is negative, the system will create a new operation id.
  --
  -- Returns:
  --  the operation id.
  --
  -- The clear_body procedure for aq$_jms_bytes_message sets the message access mode
  -- to MESSAGE_ACCESS_WRITEONLY. Later calls of read_XXX procedure raise ORA-24196 error.
  -- User can call reset procedure or prepare procedure to set the message access mode
  -- to MESSAGE_ACCESS_READONLY. Note the difference between prepare procedure and
  -- reset procedure.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.
  -- Raise ORA-24199: JAVA store procedure message store overflow.

  MEMBER FUNCTION clear_body (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Get the current message access mode of this message
  -- The result will be either dbms_aqjms.MESSAGE_ACCESS_WRITEONLY or
  -- dbms_aqjms.MESSAGE_ACCESS_READONLY.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION get_mode (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,
--============================================
  -- Reset reposition the bytes to the begining for reading.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- The reset procedure for aq$_jms_bytes_message sets the message access mode
  -- to MESSAGE_ACCESS_READONLY. Later calls of write_XXX procedure raise ORA-24196 error.
  -- User can call clear_body procedure to set the message access mode to
  -- MESSAGE_ACCESS_WRITEONLY.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE reset (id IN PLS_INTEGER),


  --============================================
  -- Flush the data at JAVA stored procedure side to PL/SQL side.
  --
  -- Underlying, it update the data at PL/SQL side to the payload stored at
  -- the JAVA stored procedure side.
  --
  -- The flush procedure for aq$_jms_bytes_message does not affect current message access
  -- mode. User can continue to call procedures appropriate to the current mode.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE flush (id IN PLS_INTEGER),


  --============================================
  -- clean the data at JAVA stored procedure side to PL/SQL side.
  --
  -- Underlying, it close and clean upthe DataInputStream or DataOutputStream
  -- at the JAVA stored procedure side corresponding to the operation id.
  -- It is very import to call this procedure to avoid memeory leak!
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE clean (id IN PLS_INTEGER),
--*******************************************
  -- JMS operations member functions and procedures
  --*******************************************

  --============================================
  -- Read a boolean value from the bytes message.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24196: The bytes message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_boolean (id IN PLS_INTEGER)
  RETURN BOOLEAN,


  --============================================
  -- Read a byte from the bytes message.
  --
  -- The function guarantees that the returned value is in the JAVA byte value range.
  -- This also means if this value is issued with a write_byte function,
  -- there wont be an out of range error raised.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24196: The bytes message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_byte (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Read a byte array from the bytes message.
  --
  -- The function read length of the bytes from bytes message stream into value.
  -- It returns the total number of bytes read or -1 when there is no more data
  -- to be read from the bytes stream.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the bytes read.
  --  length - the length of bytes to read.
-- Raise ORA-24196: The bytes message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_bytes (id IN PLS_INTEGER, value OUT NOCOPY BLOB, length IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Read a char from the bytes message.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24196: The bytes message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_char (id IN PLS_INTEGER)
  RETURN CHAR,


  --============================================
  -- Read a double from the bytes message.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24196: The bytes message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_double (id IN PLS_INTEGER)
  RETURN DOUBLE PRECISION,

  --============================================
  -- Read a float from the bytes message.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24196: The bytes message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_float (id IN PLS_INTEGER)
RETURN FLOAT,


  --============================================
  -- Read a int from the bytes message.
  --
  -- The function guarantees that the returned value is in the JAVA int value range.
  -- This also means if this value is issued with a write_int function,
  -- there wont be an out of range error raised.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24196: The bytes message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_int (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Read a long from the bytes message.
  --
  -- The function guarantees that the returned value is in the JAVA long value range.
  -- This also means if this value is issued with a write_long function,
  -- there wont be an out of range error raised.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24196: The bytes message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_long (id IN PLS_INTEGER)
  RETURN NUMBER,


  --============================================
  -- Read a short from the bytes message.
  --
  -- The function guarantees that the returned value is in the JAVA short value range.
  -- This also means if this value is issued with a write_short function,
  -- there wont be an out of range error raised.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
--  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24196: The bytes message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_short (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Read a unsigned byte from the bytes message.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24196: The bytes message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_unsigned_byte (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Read a unsigned short from the bytes message.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24196: The bytes message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_unsigned_short (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Read a String from the bytes message.
  --
 -- The function reads a string that has been encoded using UTF-8 fromat within the bytes messaeg.
  -- It returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id    - the operation id for this ADT instance.
  --  value - the UTF string that is read.
  --
  -- Raise ORA-24196: The bytes message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE read_utf (id IN PLS_INTEGER, value OUT NOCOPY CLOB),


  --============================================
  -- Write a boolean to the bytes message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the boolean value to be written. The value is copied into the bytes message.
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_boolean (id IN PLS_INTEGER, value IN BOOLEAN),


  --============================================
  -- Write a byte to the bytes message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the byte value to be written. The value is copied into the bytes message.
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_byte (id IN PLS_INTEGER, value IN PLS_INTEGER),


  --============================================
  -- Write a byte array to the bytes message.
  --
  -- This procedure takes a RAW type.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the byte array value to be written. The value is copied into the bytes message.
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
 -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_bytes (id IN PLS_INTEGER, value IN RAW),


  --============================================
  -- Write a byte array to the bytes message.
  --
  -- This procedure takes a BLOB type.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the byte array value to be written. The value is copied into the bytes message.
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_bytes (id IN PLS_INTEGER, value IN BLOB),


  --============================================
  -- Write a portion of byte array to the bytes message.
  --
  -- This procedure takes a RAW type.
  -- If the range [offset, offset+length] exceeds the boundary of the byte array value,
  -- a JAVA IndexOutOfBoundsException is thrown at the JAVA stored procedure and ORA-24197
  -- ora error is raised at the PL/SQL side. The index starts from 0.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the byte array value to be written. The value is copied into the bytes message.
  --  offset - the initial offset within the byte array.
  --  length - the number of bytes to use
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_bytes (
         id        IN      PLS_INTEGER,
         value     IN      RAW,
         offset    IN      PLS_INTEGER,
         length    IN      PLS_INTEGER
  ),


  --============================================
  -- Write a portion of byte array to the bytes message.
  --
-- This procedure takes a BLOB type.
  -- If the range [offset, offset+length] exceeds the boundary of the byte array value,
  -- a JAVA IndexOutOfBoundsException is thrown at the JAVA stored procedure and ORA-24197
  -- ora error is raised at the PL/SQL side. The index starts from 0.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the byte array value to be written. The value is copied into the bytes message.
  --  offset - the initial offset within the byte array.
  --  length - the number of bytes to use
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_bytes (
         id        IN      PLS_INTEGER,
         value     IN      BLOB,
         offset    IN      PLS_INTEGER,
         length    IN      PLS_INTEGER
  ),

  --============================================
  -- Write a char to the bytes message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the char value to be written. The value is copied into the bytes message.
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_char (id IN PLS_INTEGER, value IN CHAR),


  --============================================
  -- Write a double to the bytes message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the double value to be written. The value is copied into the bytes message.
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_double (id IN PLS_INTEGER, value IN DOUBLE PRECISION),


  --============================================
  -- Write a float to the bytes message.
  --
 -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the float value to be written. The value is copied into the bytes message.
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_float (id IN PLS_INTEGER, value IN FLOAT),


  --============================================
  -- Write a int to the bytes message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the int value to be written. The value is copied into the bytes message.
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_int (id IN PLS_INTEGER, value IN PLS_INTEGER),


  --============================================
  -- Write a long to the bytes message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the long value to be written. The value is copied into the bytes message.
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_long (id IN PLS_INTEGER, value IN NUMBER),


  --============================================
  -- Write a short to the bytes message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the short value to be written. The value is copied into the bytes message.
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.
MEMBER PROCEDURE write_short (id IN PLS_INTEGER, value IN PLS_INTEGER),


  --============================================
  -- Write a String to the bytes message.
  --
  -- This procedure writes a VARCHAR2 to the bytes message using UTF-8 encoding.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the string value to be written. The value is copied into the bytes message.
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_utf (id IN PLS_INTEGER, value IN VARCHAR2),


  --============================================
  -- Write a String to the bytes message.
  --
  -- This procedure writes a CLOB to the bytes message using UTF-8 encoding.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the string value to be written. The value is copied into the bytes message.
  --
  -- Raise ORA-24196: The bytes message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_utf (id IN PLS_INTEGER, value IN CLOB),


  --*******************************************
  -- The following are JMS header related procedures
  --*******************************************

  MEMBER PROCEDURE set_replyto (replyto IN      sys.aq$_agent),

  MEMBER PROCEDURE set_type (type       IN      VARCHAR ),

  MEMBER PROCEDURE set_userid (userid   IN      VARCHAR ),

  MEMBER PROCEDURE set_appid (appid     IN      VARCHAR ),

  MEMBER PROCEDURE set_groupid (groupid IN      VARCHAR ),

  MEMBER PROCEDURE set_groupseq (groupseq       IN      int ),
MEMBER PROCEDURE clear_properties ,

  MEMBER PROCEDURE set_boolean_property (
                property_name   IN      VARCHAR,
                property_value  IN      BOOLEAN ),

  MEMBER PROCEDURE set_byte_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_short_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_int_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_long_property (
                property_name   IN      VARCHAR,
                property_value  IN      NUMBER ),

  MEMBER PROCEDURE set_float_property (
                property_name   IN      VARCHAR,
                property_value  IN      FLOAT ),

  MEMBER PROCEDURE set_double_property (
                property_name   IN      VARCHAR,
                property_value  IN      DOUBLE PRECISION ),

  MEMBER PROCEDURE set_string_property (
                property_name   IN      VARCHAR,
                property_value  IN      VARCHAR ),

  MEMBER FUNCTION get_replyto RETURN sys.aq$_agent,

  MEMBER FUNCTION get_type RETURN VARCHAR,

  MEMBER FUNCTION get_userid RETURN VARCHAR,

  MEMBER FUNCTION get_appid RETURN VARCHAR,

  MEMBER FUNCTION get_groupid RETURN VARCHAR,

  MEMBER FUNCTION get_groupseq RETURN int,

  MEMBER FUNCTION get_boolean_property ( property_name   IN      VARCHAR)
  RETURN   BOOLEAN,

  MEMBER FUNCTION get_byte_property ( property_name   IN      VARCHAR)
  RETURN   int,
  MEMBER FUNCTION get_short_property ( property_name   IN      VARCHAR)
  RETURN   int,

  MEMBER FUNCTION get_int_property ( property_name   IN      VARCHAR)
  RETURN   int,

  MEMBER FUNCTION get_long_property ( property_name   IN      VARCHAR)
  RETURN   NUMBER,

  MEMBER FUNCTION get_float_property ( property_name   IN      VARCHAR)
  RETURN   FLOAT,

  MEMBER FUNCTION get_double_property ( property_name   IN      VARCHAR)
  RETURN   DOUBLE PRECISION,

  MEMBER FUNCTION get_string_property ( property_name   IN      VARCHAR)
  RETURN   VARCHAR

);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."AQ$_JMS_BYTES_MESSAGE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
5f12 be5
V2oTwJHeQbi6RzHPzGn7ApJF4OUwg81xuiAF344ZA6pELJ7DOaDK+kCUuuzhwlnaq5GhY01h
P9N7DgR8DiiE/sKqJBkg02yS01yHdjb0YqSbz8HPB8SE9DAPNUvFsRKlOrvqzQ8PnQ2q5Phy
nCDNsZaavBD5Tpla/JXhqatJVwyv6D4Jbo1EWtlR1E2hf2cveE2m+vjqzbuYRUzNf9gFpNge
kZmhr9gbqiu4E5RdJASJSnVGOu+VQXDCQBbF7HrQr86aAWgmKTxFtWe5auBzZ2KGndpTujU2
xcPouFXK5yfjrXsvN8UxwQHCOZP7aZvzVpjJAf1e2Mmj3dOPSVQEaVMNrVbdINCPb3r1II3V
I22nuRka5RJIwNCb1Xxk7qz5MPXfV7A9aMhkuuSOvd0MzFPKUHgomXnI0fgz82iaGRl7Gzo1
uuMCqx0GTUwePUpcz7dmdXDj7uLFzKwz875g4rCPCJA8HNYhoU/K7WDm09GYDc+iiEDbDhkl
kFTMs8TVE+H9FUulmZwTsr2Ixc/BH6MqE7L0ZWZdMnNSOL5RFDAGm9JL0qKHnD98jpwcAhga
YttyHJzyiL0KDYhZ5mMHRaVaBCgdpB2XvtmE7EABblWgrIwRCoxaYIAxcLDHhlf6DX2w+Hid
NDjK+umL/tjduJmzhMS2d93eNI1Tlosa3OCp0+rRfIgbYJL291SSC1o9DpgdhwMW6WYHWD15
yytfqX19ItbVe7rQryRi1zkRkvdVXHjNOcZW5f4ymfPFs7Lywqsluxq6Q5xRLLuqvPiNX/dk
3vYjO42FyMLlIXflhYr07VBN1Zeg2DPtTHWeCshNnoiCkYIkydsEuWZBQjR9KdWs/fKwvvMI
SNCGS556EBj8w9sgcmjIm3QkY0vgmm+QoU9FSfobMusWfuvAsj7xNEjwy0Boc8MywUblb9GE
f7cJ9khtTNa5UXQAwgUOMvM6/jrwAtpm8gtcHgkoJGCUIJr37iWl0jDa6wIA1hNlhvNoWFyZ
H/z33Q7caO+p7YapDlrElSEHobMbQhzUNQ5bQjAmRYw+aOgVCdJ4xXTVNgpGdasBfhiRVKB3
f95xsvDU4T9+Aw1+KknOoaYUzuDM3tgFQnRH836sj7fz1KkwH1oj+1paYGK6eP88r6uM7oaT
I7efANoYhqIPM75f9Vje8iu0ca/j6vTqZe3DV4Woy0R26ivPWpt+13MZCAmmByWCXzVqyKHe
IdI5GssvGu8SJLdbgQ0D79aTby5QQGAQNPoTkiZyxlnkwu1Hfm3SEWfB95oXcARjN7KBtdlp
F6cuiPw8iYOkLH0JiXSRQ6mY6epsRqzGg0DFJ/QDqxa8R7woZuKPWjpNSFQvmOk8vdyjNGQO
9RlGtkJqLej43d1fGWL+EWrT6d+9WPj4K/v1AP2ny8Cs9tASFyyPGiZ2O1y0wJOGbqQLg19r
5+/mt//yIeUHuEoeHPEL3T7Awn9/j76gTkA26ea2uHNeXOXqREfyFMWLHD6K7yiORA97lqc5
2VCP1LNxX/EQyGGIPBMpdrHc7A6DyhEaU/U1rr/S5LMWR3R0ldI+NRkpE033l0ZglI1cUoSd
or/ZDOekOY1gSt9wJSKiCrIUSEzfCs9+Gi/mlKzeKyzIfYZDNtBIbB/fyXVhdF+rcX4J/y6R
8TIizXaPELecvRz2LVkWiX4bVgVW+MA4dP05dC9HGhtDsd2UWZY4yV9o79Qjm+kylx96c17J
dFBWAN9ss57qcJqQnJWfXwFInxavoGCVpenRLA1EHV0Ja6FYPU3hJjtP8kZynT8LPfKslsT7
/cl0S0caG2Mx3ZSFx153MWGpsYGSKR4y2Y1Oh1PVTbHJPyOCxJCtmDNIue/M/AgbVgu3JbI3
UFUo3duBrDrm02LbiM8tfujaitjyg9flGsbJXCW7p1yI9HQz9SXdP6l00FnNW1aW9YSpER7o
UB8ArnUzb2VGYphabmgy033i281SN5e+WLs5AnEvrAjO/E/gBK8yrdo/gJWzf35y4JyPfEoe
OPEphAdVSdnwBuhVxC348fu7JISHvudgogNVWzX8QiLOWlSSzC6BRtPpXUjJ29S3pcX7UTYp
0fkVENN3XventhN/c8CiiunE3cseaArAH8k/YrlWN6DCT+mdYCVtGBRyHOyzzAn0Hy7og4cT
yRdibtq73+yvQZj7YTaxrStQdvZRAA24YRATFzkxzxN98rgvr+uKJgJOBZ0Sn0wWkBUIw/0n
7lYSYXJ07L5C6kBqBEGR6mJuhw9Ic4NfrqhC7BQSV9lqOvXAgYSsfdgI+em2VrbNxxPf0MKc
7CZr1ce2ZRftnXy4I0SsXLzGbONdW1jWyqsgfdnt+m9vU7VWmT/LXyAfgGi8f6BabABJVuNF
43hj4IYaiMxHqkdfV645dpIVdJVg+OkvLZ2fGYD1AHB3zj9qAGF0T5yGKtvASUTZLwcckOt3
L/fflPS1nHDvB8UvB4NYw5Qqt7WYdNGIK0pXd5dixf3JsOR8qtVECfTOygz2zod18iQxeYnR
gcknYvsKaZYdDxmEYjqHNUaCVL8706txr1CGA85K6FZTW1UdvF07YVqfSwUj4Kr793TqWLgt
HyIkJ3GWoqfXLXlQqEm3LgaxQkCYAfmTdpdPR0K+HA3NJG0MKev6lrFr6IEXUkkSFDCeqpuV
c3RMJ0KPViJDIPJZ7sO8HXwkT4McV21elR7pXjA9VagTa9akIG4XSxUWE02Cdbs2mlIV90oN
3I/zCvkCx0BjkFilQd7VS4iUN3wN9UxVsyZxLFHQQ9MViQhDeYBV+5fb8SJZpLrJQVHwZNhq
ifQNGT78XeH+pgKRDT2zdQKV9FYs6DuYQavei9kCHdmtdpHng6XCbEs1rdmJcFNF8zZ7wHA1
L+c9TKZ6LDxrJp/KVBInc89pc7e0Zw7/GoHnGjP444RwW+gHNxFVKY/zuDt4DgdQyy404e6f
G6OAj4HtJiQ2ELjytoNoaD5H87QofTxbSZk5kZL+B7WmKY8zrA==

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_BYTES_MESSAGE" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_BYTES_MESSAGE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_BYTES_MESSAGES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_BYTES_MESSAGES" 
                                                                      
as varray(2147483647) of aq$_jms_bytes_message;

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_BYTES_MESSAGES" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_BYTES_MESSAGES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_EXCEPTION
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_EXCEPTION" 
                                      
as object
(
  id          number, -- reserved for later use
  exp_name    varchar(200),
  err_msg     varchar(500),
  stack       varchar(4000)
);

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_EXCEPTION" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_HEADER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_HEADER" 
                                      
as object
(
  replyto     sys.aq$_agent,
  type        varchar(100),
  userid      varchar(100),
  appid       varchar(100),
  groupid     varchar(100),
  groupseq    int,
  properties  aq$_jms_userproparray,
   --
  -- lookup_property_name checks whether new_property_name has existed
  -- in the properties.
  --
  -- @param new_property_name (IN)
  --
  -- @throws -24191 if the property name  has existed
  -- @throws -24192 if the property name  is null
  --
  MEMBER PROCEDURE lookup_property_name (new_property_name IN VARCHAR ),

  --
  -- set_replyto sets replyto which corresponds to JMSReplyTo
  --
  -- @param replyto (IN)
  --
  MEMBER PROCEDURE set_replyto (replyto IN      sys.aq$_agent),

  --
  -- set_type sets JMS type which can be any text, which
  -- corresponds to JMSType
  --
  -- @param type (IN)
  --
  MEMBER PROCEDURE set_type (type       IN      VARCHAR ),

  --
  -- set_userid sets userid which corresponds to JMSXUserID
  --
  -- @param userid (IN)
  --
MEMBER PROCEDURE set_userid (userid   IN      VARCHAR ),

  --
  -- set_appid sets appid which corresponds to JMSXAppID
  --
  -- @param appid (IN)
  --
  MEMBER PROCEDURE set_appid (appid     IN      VARCHAR ),

  --
  -- set_groupid sets groupid which corresponds to JMSXGroupID
  --
  -- @param groupid (IN)
  --
  MEMBER PROCEDURE set_groupid (groupid IN      VARCHAR ),

  --
  -- set_groupseq sets groupseq which corresponds to JMSXGroupSeq
  --
  -- @param groupseq (IN)
  --
  MEMBER PROCEDURE set_groupseq (groupseq       IN      int ),

  --
  -- clear_properties nukes properties.
  --
  MEMBER PROCEDURE clear_properties ,

  --
  -- set_boolean_property checks whether property_name is null or
  -- has existed. If not, it translates property_value into
  -- the NUMBER type since Oracle RDBMS doesnt know BOOLEAN.
  --
  -- @param property_name (IN), property_value (IN)
--
  MEMBER PROCEDURE set_boolean_property (
                property_name   IN      VARCHAR,
                property_value  IN      BOOLEAN ),

  --
  -- set_byte_property checks whether property_name is null or
  -- has existed. If not, it checks whether property_value
  -- is within -128 to 127 (8-bits) because both PL/SQL and Oracle
  -- RDBMS dont have the type byte.
  --
  -- @param property_name (IN), property_value (IN)
  --
  -- @throws -24193 if the property value excceeds the valid range
  --
  MEMBER PROCEDURE set_byte_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  --
  -- set_short_property checks whether property_name is null or
  -- has existed. If not, it checks whether property_value
  -- is within -32768 to 32767 (16-bits) because both PL/SQL
  -- and Oracle RDBMS dont have the type short.
  --
  -- @param property_name (IN), property_value (IN)
  --
  -- @throws -24193 if the property value excceeds the valid range
  --
  MEMBER PROCEDURE set_short_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  --
  -- set_int_property checks whether property_name is null or
  -- has existed. If not, it checks whether property_value
  -- is within -2147483648 to 2147483647 (32-bits) because in
  -- both PL/SQL and Oracle RDBMS the type int (or INTEGER) is
  -- 38 bit.
  --
  -- @param property_name (IN), property_value (IN)
  --
  -- @throws -24193 if the property value excceeds the valid range
  --
  MEMBER PROCEDURE set_int_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),
--
  -- set_long_property checks whether property_name is null or
  -- has existed. If not, it stores the property_value.
  -- In Java the type long is 64-bit long. In
  -- both PL/SQL and Oracle RDBMS the type NUMBER is
  -- 38 bit. So there is no need to check the range.
  --
  -- @param property_name (IN), property_value (IN)
  --
  MEMBER PROCEDURE set_long_property (
                property_name   IN      VARCHAR,
                property_value  IN      NUMBER ),

  --
  -- set_float_property checks whether property_name is null or
  -- has existed. If not, it stores the property_value.
  --
  -- @param property_name (IN), property_value (IN)
  --
  MEMBER PROCEDURE set_float_property (
                property_name   IN      VARCHAR,
                property_value  IN      FLOAT ),

  --
  -- set_double_property checks whether property_name is null or
  -- has existed. If not, it stores the property_value.
  --
  -- @param property_name (IN), property_value (IN)
  --
  MEMBER PROCEDURE set_double_property (
                property_name   IN      VARCHAR,
                property_value  IN      DOUBLE PRECISION ),

  --
  -- set_string_property checks whether property_name is null or
  -- has existed. If not, it stores the property_value.
  --
  -- @param property_name (IN), property_value (IN)
  --
  MEMBER PROCEDURE set_string_property (
                property_name   IN      VARCHAR,
                property_value  IN      VARCHAR ),

  --
  -- get_replyto returns replyto which corresponds to JMSReplyTo.
  --
  -- @return sys.aq$_agent
  --
  MEMBER FUNCTION get_replyto RETURN sys.aq$_agent,
 --
  -- get_type returns type which corresponds to JMSType.
  --
  -- @return VARCHAR
  --
  MEMBER FUNCTION get_type RETURN VARCHAR,

  --
  -- get_userid returns userid which corresponds to JMSXUserID.
  --
  -- @return VARCHAR
  --
  MEMBER FUNCTION get_userid RETURN VARCHAR,

  --
  -- get_appid returns appid which corresponds to JMSXAppID.
  --
  -- @return VARCHAR
  --
  MEMBER FUNCTION get_appid RETURN VARCHAR,

  --
  -- get_groupid returns groupid which corresponds to JMSXGroupID.
  --
  -- @return VARCHAR
  --
  MEMBER FUNCTION get_groupid RETURN VARCHAR,

  --
  -- get_groupseq returns groupseq which corresponds to JMSXGroupSeq.
  --
  -- @return int
  --
  MEMBER FUNCTION get_groupseq RETURN int,

  --
  -- get_boolean_property returns a BOOLEAN value if it can find
  -- property_name and its java_type is BOOLEAN, and returns a NULL
  -- if it cannot find.
  --
  -- @param property_name (IN)
  --
  -- @return BOOLEAN
  --
  MEMBER FUNCTION get_boolean_property ( property_name   IN      VARCHAR)
  RETURN   BOOLEAN,
 --
  -- get_boolean_property_as_int returns 1 (for TRUE) and 0 (for FALSE)
  -- value if it can find property_name and its java_type is BOOLEAN,
  -- and returns a NULL otherwise.
  --
  -- @param property_name (IN)
  --
  -- @return int
  --
  MEMBER FUNCTION get_boolean_property_as_int ( property_name   IN   VARCHAR)
  RETURN   int,

  --
  -- get_byte_property returns a "byte" value if it can find
  -- property_name and its java_type is byte, and returns a NULL
  -- if it cannot find.
  --
  -- @param property_name (IN)
  --
  -- @return int
  --
  MEMBER FUNCTION get_byte_property ( property_name   IN      VARCHAR)
  RETURN   int,

  --
  -- get_short_property returns a "short" value if it can find
  -- property_name and its java_type is short, and returns a NULL
  -- if it cannot find.
  --
  -- @param property_name (IN)
  --
  -- @return int
  --
  MEMBER FUNCTION get_short_property ( property_name   IN      VARCHAR)
  RETURN   int,

  --
  -- get_int_property returns a int value if it can find
  -- property_name and its java_type is int, and returns a NULL
  -- if it cannot find.
  --
  -- @param property_name (IN)
  --
  -- @return int
  --
  MEMBER FUNCTION get_int_property ( property_name   IN      VARCHAR)
  RETURN   int,

  --
  -- get_long_property returns a int value if it can find
  -- property_name and its java_type is long, and returns a NULL
  -- if it cannot find.
 --
  -- @param property_name (IN)
  --
  -- @return NUMBER
  --
  MEMBER FUNCTION get_long_property ( property_name   IN      VARCHAR)
  RETURN   NUMBER,

  --
  -- get_float_property returns a FLOAT value if it can find
  -- property_name and its java_type is float, and returns a NULL
  -- if it cannot find.
  --
  -- @param property_name (IN)
  --
  -- @return FLOAT
  --
  MEMBER FUNCTION get_float_property ( property_name   IN      VARCHAR)
  RETURN   FLOAT,

  --
  -- get_double_property returns a DOUBLE PRECISION value if it can find
  -- property_name and its java_type is double, and returns a NULL
  -- if it cannot find.
  --
  -- @param property_name (IN)
  --
  -- @return DOUBLE PRECISION
  --
  MEMBER FUNCTION get_double_property ( property_name   IN      VARCHAR)
  RETURN   DOUBLE PRECISION,

  --
  -- get_string_property returns a varchar value if it can find
  -- property_name and its java_type is string, and returns a NULL
  -- if it cannot find.
  --
  -- @param property_name (IN)
  --
  -- @return VARCHAR
  --
  MEMBER FUNCTION get_string_property ( property_name   IN      VARCHAR)
  RETURN   VARCHAR

);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."AQ$_JMS_HEADER" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
2d85 682
QW3HHSY/cLu59DLyTxreLnU5Fmgwg82TutAG3465gp0VKNV5yFSi4R0FJSaR3Xwxsr0L2utD
PqMm1VyN5eWctWSDSi4GDDm3vUd0A+fzSbzPxvkiLLfHfT8H3Wa6za+xnZqUquQ6IAj4xGSd
EPhbplojAKZhEZhnBIq4YaIKdu/IkTHBz+pLW9pGKbxa7m83yumdq9AGjnpnNDTWBNIxV384
JJmg9F6fAcT2L6aASeEleqFnLFDaw2GRTz3gDJ7CSUQVV2qEdAuszgDpBZvMpajsRiRgc759
NyWU/aoZtngedNZ1/e834KJAHgS2e3Y8QRTIaSIDkKxWYtijNlKqFlY0DTs88ADPejvLW0rz
wT0RJ9/lRzuRxx70mL63ZqwRN7PRMet0NuXdp2fPdUSEMLXiqf2JCVuCNmwea/zS62LIlUKy
S+R7OD6cXso/Q2XytICgyi/pHznGZEFUrTVXhzdnh3MtkVtAGwxBqbjEhjBDQ4n6jQAEQRYw
UXm4p5l6XKXpXs2IQcVB4aFQ7dtdbJCVV2PQapvRnpycAKmcvaxTTWHsAM9cxsZvyxXH5m1W
C4ywB1VE4fYT/MuFBvVQaO77G63le1pWxxAjW78JE0Cbx0WGTYNNrzE/3YrgOh956VaZOjP5
224o6nggvX9A+Gd55COyB56glASpESGr5x45yl2/ENf9bNsBQ6sbXTpHdr5HonI4oTr2q15O
j+je4ushEXqZJ0lvkuYC+U8UQYP7eHHJrdooij3eYhPLw8cb+GDoENDVi02UrvPyA9zlqn8i
Skius+k0boY2fSq9pR8vYILIOE46co+EBBD1tfabcwUhHKn+4Im1+QYWu/hKMk6BmJI6JViC
UBfX5RWXYm7ZmTAKYRM6oLbVvtl8EDcnpIAD3taHQlwfGGLGOOyUVFUmM8+A7JUj9QHFSqPl
dd4eRCdXnkkD+sYI9SXKXYQQHyfistQUTDWd8kzQZFmxhqdF3ML1x/M4sL5nILW80nHyWHFY
CRtijcLcZTCILBbIh2sJSOJZPnhijcKXm+nAWB+J0xhcjAFZBlYQAuVYh1gn6HmathZKlvVv
KtvDEj8JrbBp5rxLi/GXpa9ZvWPRt16iJVbzrjf1gpkAIOsO8DJB0T6aUBPF7cw7KmAhxiZB
VUvv+sKN8iDOOAiJRkT1yFnv44URzqiJ3ueZhgQVLYoCQKgJKEmEiViZJDZYfleIhhHxFWCo
fRms9CyocTKb1ksDOYDkWZ0XtGaAS80IekJdfDSLS+/w6iaCkd/w2BtZ6i75XjP4NixwWJuY
AVupc+YmLlymQ7opQjo0gvzs+LPixHB3pbnlPC42p8HJ7ZQGPZKlVL5V6Zn63yiGBtkAqaRd
jb1Mxmc726NnFYS2SNffKQ1hv4lLtmwGvj5wh8bHz8a/8p0J1R+ku1TBVfJuCmABixWN6pwz
QIFcYb33O2Cj1ZC9x3iIdCPYmBxS/jMvPfsG9VTqisrmE64Nb7K67UO8CGtyXzWqwbsWqsxO
PzR6qiPSgdoSgDH9eLm8XvoeqQDv1LSsvGUwzugEbjQUOde0D5melS8gGK8TnNsOlLf2NWuI
fhJeftzaCwPWnYLJTdhEWPC7KepH7ke3hGG8bwd+nw/gkqIJOrsotR3Vcrjj

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_HEADER" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_HEADER" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_MAP_MESSAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_MAP_MESSAGE" 
                                       authid current_user
as object
(
  header     aq$_jms_header,
  bytes_len  int,
  bytes_raw  raw(2000),
  bytes_lob  blob,
  STATIC FUNCTION construct RETURN aq$_jms_map_message,


  -- *******************************************
  -- The following are common procedures of aq$_jms_stream_message,
  -- aq$_jms_bytes_message and aq$_jms_map_message types to synchronize
  -- the data between JAVA stored procedure and PL/SQL.
  -- *******************************************

  --============================================
  -- Get the JAVA exception thrown during the previous failure.
  -- Only one JAVA exception is recorded for a session. If the
  -- exception is not fetched in time, it might be overwritten
  -- by the exception thrown in next failure.

  STATIC FUNCTION get_exception
  RETURN AQ$_JMS_EXCEPTION,


  --============================================
  -- Clean all the messages in the JVM session memory.
  --

  STATIC PROCEDURE clean_all,


  --============================================
  -- Populate the data at JAVA stored procedure with the data at PL/SQL side.
  --
  -- Underlying, it takes the RAW/BLOB stored in PL/SQL aq$_jms_map_message
  -- to construct a JAVA object (for aq$_jms_map_message is Hashtable)
  -- which is stored in ORACLE JVM session memeory.
  --
  -- Parameter "id" is called operation id that is used to identify the slot
  -- where the JAVA object is stored in the ORACLE JVM session memeory.
  -- If "id" is NULL, a new slot is created for this PL/SQL object.
  -- Later JMS operations on the payload need to provide this operation id.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --        if id is negative, the system will create a new operation id.
  --
  -- Returns:
  --  the operation id.
  --
  -- There is no message access mode concept in aq$_jms_map_message.
  -- The map message can be both written and read at any time and change is reflect immediately.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.
  -- Raise ORA-24199: JAVA store procedure message store overflow.
 MEMBER FUNCTION prepare (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Set the data at JAVA stored procedure as empty payload.
  --
  -- Underlying, it initialize an new Hashtable object and set it to
  -- the static varaible in ORACLE JVM session memeory.
  --
  -- Parameter "id" is called operation id that is used to identify the slot
  -- where the JAVA object is stored in the ORACLE JVM session memeory.
  -- If "id" is NULL, a new slot is created for this PL/SQL object.
  -- Later JMS operations on the payload need to provide this operation id.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --        if id is negative, the system will create a new operation id.
  --
  -- Returns:
  --  the operation id.
  --
  -- There is no message access mode concept in aq$_jms_map_message.
  -- The map message can be both written and read at any time and change is reflect immediately.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.
  -- Raise ORA-24199: JAVA store procedure message store overflow.

  MEMBER FUNCTION clear_body (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,

  --============================================
  -- Flush the data at JAVA stored procedure side to PL/SQL side.
  --
  -- Underlying, it update the data at PL/SQL side to the payload stored at
  -- the JAVA stored procedure side.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE flush (id IN PLS_INTEGER),

--============================================
  -- clean the data at JAVA stored procedure side to PL/SQL side.
  --
  -- Underlying, it set the static variable of Hashtable to null
  -- at the JAVA stored procedure side corresponding to the operation id.
  -- It is very import to call this procedure to avoid memeory leak!
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE clean (id IN PLS_INTEGER),


  --*******************************************
  -- JMS operations member functions and procedures
  --*******************************************

  --============================================
  -- Retrieve the size of the map message.
  --
  -- Parameters:
  --  id   - the operation id for this ADT instance.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION get_size (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Retrieve all the names within the map message.
  -- Since aq$_jms_namearray has a size of 1024 and each element a varchar(200),
  -- this function raise error if either of sizes limit is exceeded.
  --
  -- Parameters:
  --  id   - the operation id for this ADT instance.
  --
  -- Raise ORA-24195: size of the name array or the size of a name eceed the limit.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION get_names (id IN PLS_INTEGER)
  RETURN AQ$_JMS_NAMEARRAY,

--============================================
  -- Retrieve a portion of the names within the map message.
  -- Since aq$_jms_namearray has a size of 1024 and each element a varchar(200),
  -- this function raise error if either of sizes limit is exceeded.
  -- The index of map message starts from 0.
  --
  -- The function returns the number of names that has been retrieved.
  -- The names retrieved is the intersection of the interval [offset, offset+length-1]
  -- and interval [0, size-1] where size is the size of this map message.
  -- If the intersection is empty set, names will be NULL and the function returns 0
  -- as the number of names retrieved. These can be used as a test that there is
  -- no more name to read from the map message.
  --
  -- Parameters:
  --  id      - the operation id for this ADT instance.
  --  names   - the names that has been retrieved.
  --  offset  - the offset from which to start retrieving.
  --  length  - the length of the names to be retrieved.
  --
  -- Raise ORA-24195: size of the name array or the size of a name eceed the limit.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION get_names (
         id       IN        PLS_INTEGER,
         names    OUT       AQ$_JMS_NAMEARRAY,
         offset   IN        PLS_INTEGER,
         length   IN        PLS_INTEGER )
  RETURN PLS_INTEGER,


  --============================================
  -- Test whether an item exists in the map message.
  -- Return TRUE if the item exists.
  --
  -- Parameters:
  --  id   - the operation id for this ADT instance.
  --  name - the specified name.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION item_exists (id IN PLS_INTEGER, name IN VARCHAR2)
  RETURN BOOLEAN,


  --============================================
  -- Read a object value from the map message.
  --
  -- The function returns a general value ADT AQ$_JMS_VALUE. User can use the
  -- "type" attribute of this ADT to interpret the data.
-- The following is a map among type attribute, JAVA type and value attributes
  --
  -- -----------------------------------------------------------------
  --               type                 | JAVA type | value attributes
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_BYTE      |  byte     |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_SHORT     |  short    |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_INTEGER   |  int      |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_LONG      |  long     |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_FLOAT     |  float    |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_DOUBLE    |  double   |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_BOOLEAN   |  boolean  |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_CHARACTER |  char     |    char_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_STRING    |  String   |    text_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_BYTES     |  byte[]   |    bytes_val
  -- -----------------------------------------------------------------
  --
  -- The function returns NULL if there is no such item with the specified name.
  --
  -- Also note that this memeber procedure might bring additional overhead
  -- comparing to other "read" memeber procedures. It is used only if the user
  -- does not know the data type before hand, otherwise it is always a good idea
  -- to use a specific read member procedure.
  --
  -- Parameters:
  --  id    - the operation id for this ADT instance.
  --  name  - the specified name.
  --  value - the object that is read.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  --                  In this particular case, an object with unsupported type is read from the stream.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE get_object (id IN PLS_INTEGER, name IN VARCHAR2, value OUT NOCOPY AQ$_JMS_VALUE),
 --============================================
  -- Get a boolean value from the map message with the specified name.
  --
  -- The function returns NULL if there is no such item with the specified name.
  --
  -- Parameters:
  --  id   - the operation id for this ADT instance.
  --  name - the specified name.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION get_boolean (id IN PLS_INTEGER, name IN VARCHAR2)
  RETURN BOOLEAN,


  --============================================
  -- Get a byte from the map message with the specified name.
  --
  -- The function guarantees that the returned value is in the JAVA byte value range.
  -- This also means if this value is issued with a set_byte function,
  -- there wont be an out of range error raised.
  --
  -- The function returns NULL if there is no such item with the specified name.
  --
  -- Parameters:
  --  id   - the operation id for this ADT instance.
  --  name - the specified name.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION get_byte (id IN PLS_INTEGER, name IN VARCHAR2)
  RETURN PLS_INTEGER,


  --============================================
  -- Get a byte array from the map message with the specified name.
  --
  -- The function returns NULL if there is no such item with the specified name.
  --
  -- Parameters:
  --  id    - the operation id for this ADT instance.
  --  name  - the specified name.
  --  value - the bytes that is read.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
-- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE get_bytes (id IN PLS_INTEGER, name IN VARCHAR2, value OUT NOCOPY BLOB),

  --============================================
  -- Get a char from the map message with the specified name.
  --
  -- The function returns NULL if there is no such item with the specified name.
  --
  -- Parameters:
  --  id   - the operation id for this ADT instance.
  --  name - the specified name.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION get_char (id IN PLS_INTEGER, name IN VARCHAR2)
  RETURN CHAR,


  --============================================
  -- Get a double from the map message with the specified name.
  --
  -- The function returns NULL if there is no such item with the specified name.
  --
  -- Parameters:
  --  id   - the operation id for this ADT instance.
  --  name - the specified name.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION get_double (id IN PLS_INTEGER, name IN VARCHAR2)
  RETURN DOUBLE PRECISION,

  --============================================
  -- Get a float from the map message with the specified name.
  --
  -- The function returns NULL if there is no such item with the specified name.
  --
  -- Parameters:
  --  id   - the operation id for this ADT instance.
  --  name - the specified name.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.
MEMBER FUNCTION get_float (id IN PLS_INTEGER, name IN VARCHAR2)
  RETURN FLOAT,


  --============================================
  -- Get a int from the map message with the specified name.
  --
  -- The function guarantees that the returned value is in the JAVA int value range.
  -- This also means if this value is issued with a set_int function,
  -- there wont be an out of range error raised.
  --
  -- The function returns NULL if there is no such item with the specified name.
  --
  -- Parameters:
  --  id   - the operation id for this ADT instance.
  --  name - the specified name.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION get_int (id IN PLS_INTEGER, name IN VARCHAR2)
  RETURN PLS_INTEGER,


  --============================================
  -- Get a long from the map message with the specified name.
  --
  -- The function guarantees that the returned value is in the JAVA long value range.
  -- This also means if this value is issued with a set_long function,
  -- there wont be an out of range error raised.
  --
  -- The function returns NULL if there is no such item with the specified name.
  --
  -- Parameters:
  --  id   - the operation id for this ADT instance.
  --  name - the specified name.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION get_long (id IN PLS_INTEGER, name IN VARCHAR2)
  RETURN NUMBER,


  --============================================
  -- Get a short from the map message with the specified name.
  --
  -- The function guarantees that the returned value is in the JAVA short value range.
  -- This also means if this value is issued with a set_short function,
  -- there wont be an out of range error raised.
  --
  -- The function returns NULL if there is no such item with the specified name.
  --
  -- Parameters:
  --  id   - the operation id for this ADT instance.
  --  name - the specified name.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION get_short (id IN PLS_INTEGER, name IN VARCHAR2)
  RETURN PLS_INTEGER,

  --============================================
  -- Get a String from the map message with the specified name.
  --
  -- The function returns NULL if there is no such item with the specified name.
  --
  -- Parameters:
  --  id    - the operation id for this ADT instance.
  --  name  - the specified name.
  --  value - the string that is read.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE get_string (id IN PLS_INTEGER, name IN VARCHAR2, value OUT NOCOPY CLOB),


  --============================================
  -- Set a boolean to the map message with the specified name.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  name   - the specified name.
  --  value  - the boolean value to be written. The value is copied into the map message.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE set_boolean (id IN PLS_INTEGER, name IN VARCHAR2, value IN BOOLEAN),


  --============================================
  -- Set a byte to the map message with the specified name.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
--  name   - the specified name.
  --  value  - the byte value to be written. The value is copied into the map message.
  --
  -- Raise ORA-24193: The parameter value exceeds the valid JAVA type range.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE set_byte (id IN PLS_INTEGER, name IN VARCHAR2, value IN PLS_INTEGER),


  --============================================
  -- Set a byte array to the map message with the specified name.
  --
  -- This procedure takes a RAW type.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  name   - the specified name.
  --  value  - the byte array value to be written. The value is copied into the map message.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE set_bytes (id IN PLS_INTEGER, name IN VARCHAR2, value IN RAW),


  --============================================
  -- Set a byte array to the map message with the specified name.
  --
  -- This procedure takes a BLOB type.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  name   - the specified name.
  --  value  - the byte array value to be written. The value is copied into the map message.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE set_bytes (id IN PLS_INTEGER, name IN VARCHAR2, value IN BLOB),


  --============================================
  -- Set a portion of byte array to the map message with the specified name.
  --
  -- This procedure takes a RAW type.
  -- If the range [offset, offset+length] exceeds the boundary of the byte array value,
  -- a JAVA IndexOutOfBoundsException is thrown at the JAVA stored procedure and ORA-24197
  -- ora error is raised at the PL/SQL side. The index starts from 0.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
 --  name   - the specified name.
  --  value  - the byte array value to be written. The value is copied into the map message.
  --  offset - the initial offset within the byte array.
  --  length - the number of bytes to use
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE set_bytes (
         id        IN      PLS_INTEGER,
         name      IN      VARCHAR2,
         value     IN      RAW,
         offset    IN      PLS_INTEGER,
         length    IN      PLS_INTEGER
  ),


  --============================================
  -- Set a portion of byte array to the map message with the specified name.
  --
  -- This procedure takes a BLOB type.
  -- If the range [offset, offset+length] exceeds the boundary of the byte array value,
  -- a JAVA IndexOutOfBoundsException is thrown at the JAVA stored procedure and ORA-24197
  -- ora error is raised at the PL/SQL side. The index starts from 0.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  name   - the specified name.
  --  value  - the byte array value to be written. The value is copied into the map message.
  --  offset - the initial offset within the byte array.
  --  length - the number of bytes to use
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE set_bytes (
         id        IN      PLS_INTEGER,
         name      IN      VARCHAR2,
         value     IN      BLOB,
         offset    IN      PLS_INTEGER,
         length    IN      PLS_INTEGER
  ),

  --============================================
  -- Set a char to the map message with the specified name.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  name   - the specified name.
  --  value  - the char value to be written. The value is copied into the map message.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.
  MEMBER PROCEDURE set_char (id IN PLS_INTEGER, name IN VARCHAR2, value IN CHAR),


  --============================================
  -- Set a double to the map message with the specified name.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  name   - the specified name.
  --  value  - the double value to be written. The value is copied into the map message.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE set_double (id IN PLS_INTEGER, name IN VARCHAR2, value IN DOUBLE PRECISION),


  --============================================
  -- Set a float to the map message with the specified name.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  name   - the specified name.
  --  value  - the float value to be written. The value is copied into the map message.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE set_float (id IN PLS_INTEGER, name IN VARCHAR2, value IN FLOAT),


  --============================================
  -- Set a int to the map message with the specified name.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  name   - the specified name.
  --  value  - the int value to be written. The value is copied into the map message.
  --
  -- Raise ORA-24193: The parameter value exceeds the valid JAVA type range.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE set_int (id IN PLS_INTEGER, name IN VARCHAR2, value IN PLS_INTEGER),


  --============================================
  -- Set a long to the map message with the specified name.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  name   - the specified name.
 --  value  - the long value to be written. The value is copied into the map message.
  --
  -- Raise ORA-24193: The parameter value exceeds the valid JAVA type range.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE set_long (id IN PLS_INTEGER, name IN VARCHAR2, value IN NUMBER),


  --============================================
  -- Set a short to the map message with the specified name.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  name   - the specified name.
  --  value  - the short value to be written. The value is copied into the map message.
  --
  -- Raise ORA-24193: The parameter value exceeds the valid JAVA type range.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE set_short (id IN PLS_INTEGER, name IN VARCHAR2, value IN PLS_INTEGER),


  --============================================
  -- Set a String to the map message with the specified name.
  --
  -- This procedure takes VARCHAR2 type.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  name   - the specified name.
  --  value  - the string value to be written. The value is copied into the map message.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE set_string (id IN PLS_INTEGER, name IN VARCHAR2, value IN VARCHAR2),


  --============================================
  -- Set a String to the map message with the specified name.
  --
  -- This procedure takes CLOB type.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  name   - the specified name.
  --  value  - the string value to be written. The value is copied into the map message.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.
MEMBER PROCEDURE set_string (id IN PLS_INTEGER, name IN VARCHAR2, value IN CLOB),


  --*******************************************
  -- The following are JMS header related procedures
  --*******************************************

  MEMBER PROCEDURE set_replyto (replyto IN      sys.aq$_agent),

  MEMBER PROCEDURE set_type (type       IN      VARCHAR ),

  MEMBER PROCEDURE set_userid (userid   IN      VARCHAR ),

  MEMBER PROCEDURE set_appid (appid     IN      VARCHAR ),

  MEMBER PROCEDURE set_groupid (groupid IN      VARCHAR ),

  MEMBER PROCEDURE set_groupseq (groupseq       IN      int ),

  MEMBER PROCEDURE clear_properties ,

  MEMBER PROCEDURE set_boolean_property (
                property_name   IN      VARCHAR,
                property_value  IN      BOOLEAN ),

  MEMBER PROCEDURE set_byte_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_short_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_int_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_long_property (
                property_name   IN      VARCHAR,
                property_value  IN      NUMBER ),

  MEMBER PROCEDURE set_float_property (
                property_name   IN      VARCHAR,
                property_value  IN      FLOAT ),

  MEMBER PROCEDURE set_double_property (
                property_name   IN      VARCHAR,
                property_value  IN      DOUBLE PRECISION ),

  MEMBER PROCEDURE set_string_property (
                property_name   IN      VARCHAR,
                property_value  IN      VARCHAR ),
MEMBER FUNCTION get_replyto RETURN sys.aq$_agent,

  MEMBER FUNCTION get_type RETURN VARCHAR,

  MEMBER FUNCTION get_userid RETURN VARCHAR,

  MEMBER FUNCTION get_appid RETURN VARCHAR,

  MEMBER FUNCTION get_groupid RETURN VARCHAR,

  MEMBER FUNCTION get_groupseq RETURN int,

  MEMBER FUNCTION get_boolean_property ( property_name   IN      VARCHAR)
  RETURN   BOOLEAN,

  MEMBER FUNCTION get_byte_property ( property_name   IN      VARCHAR)
  RETURN   int,

  MEMBER FUNCTION get_short_property ( property_name   IN      VARCHAR)
  RETURN   int,

  MEMBER FUNCTION get_int_property ( property_name   IN      VARCHAR)
  RETURN   int,

  MEMBER FUNCTION get_long_property ( property_name   IN      VARCHAR)
  RETURN   NUMBER,

  MEMBER FUNCTION get_float_property ( property_name   IN      VARCHAR)
  RETURN   FLOAT,

  MEMBER FUNCTION get_double_property ( property_name   IN      VARCHAR)
  RETURN   DOUBLE PRECISION,

  MEMBER FUNCTION get_string_property ( property_name   IN      VARCHAR)
  RETURN   VARCHAR


);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."AQ$_JMS_MAP_MESSAGE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
5b41 aa1
hSV1KNJOc0C9QukBxYVX+boMDeIwg81xDNAF3y+5QqpEKK1aqS200lRJ+5FYM8VQ8p6hbFKW
5ss1N+H7o121HUMTd+vvBThs2B/0vwH3bli7/cutFGyf5XyDjfi2kjO7E4u7LCQTLJr53j/P
tTpOBQ+azOYsHC8ltc6ql9OnY31pHz7Zl+FjATWIJl5A58kqPmmbKS5OCALflqE9NHDyt++L
PWWXJJ/OdZTkeOwW/fr4+dA+0l+3ABvMzME6OZC1X3jtp0Gj/sTkItEzunK8zNXQdSrO9hjV
QoFQgt0Zguib6L0+obenEkeW5W7fk6+l87c7RfgN/LoRuswBRqc0PIenKaCPDtJd5Agczb80
pLNvlrU+qn4ppFJr/QUnVrLB/BzkGxkQZ67jAIbm1kkFjEniExZOWvFf4FLXpW2SxcCNC3mr
sVfaUzw7iLuzup3esmtTO9WLjsS7UgISecWXdoCUPl40ZL1g3kq3UaGbdmDhL+buE2FDFjYn
PBUf5MJq20I46biNuISMX5xizxLgwfEZxGkXVqWcGwX2FzR2bDscsUiME2gOVfQ4g8hdbTqC
lr84enJTnMMamrGYtJ4Yoe9qj+buMqsj55a9DLG2KEIuTwe4iZUXgS5IdRFAl1d/cujLQPKH
K8/cm35kDh6II6c23pNdetrGlbVdXRehyDX221ixWTeg1Z6PkocUn4LWSGgv71bX+TQQaW/o
l0CzGFN/EYUc4Fbnq4xfadrxGBKGOA8WcRTPua3XT1hr9FG9qPq9dvhCAkCxEddOftVtwQnm
jED9eVq0+4CZgejppmZVNJpKRW60+c4ebOflG7U+9jxYibrCNAZD7md/HaDZBwfvEhzVBIwK
ZjZkoWXkiLsfjqhTIbL/2rnzbH/nNBKany9EV796eHPEaXpV1LopYArCs/J+duCv8SzGs0Km
QCOpO7tFpqvNHVjDivZgMWlXXk3jliRJFBDchbuHqQWNYwQrrzg7b/H9ub0qh9ePXa8LkJHr
ZWxw3IruwR1GoF/0dr667YZURZeo7jHSVIfXWvBb6/+vryUuPulJ1b8sUpdn+Q018oTzw21l
Ygq38OWeSDb+eIUJheFbaQKnwUglpUQ7FRZA1AZQOn/qW0rICGBMVqq5FD129CETSDsQFfFA
kMV+L0zcVp6kRv9XdnJLOBmfVYryhbPUO9Vd0uT/k2VDMjRpUL7t655LpzjjsJxK2totFB3o
QR9hd21tlcfRLQg+xG8E3Hluv8Rh1Ktyhzhc+kBihmMcKDYLSNxc8UZuUad1a7SbbbGFsAZG
pTZwbqXhAs45/BtR2DK2UvPt8B+7PgmuwRb/QA6QmvRVrIVonIHRTywzMg0YjyGMgp/BwwDX
ecT3gbKmvK22hKnFb3coz9dh31tYMwKEhxt+P3KnPQ7LypkTvGKWPMZFF2o2KcLDaf8A7Q6J
x0iLtj+vbtAPtKm8ua1PDZGsIwOeiPHPCh9WucEBUm5yNOYd8kXIOJMP9kgpX3XKcY6el2Hr
nmB4ENG9mfdooTVA0ly/9XLxvYsBJg53EiP7TtqXWjmKzR29h8XTeqUj4PwXMCmrZXoCSiTH
LK4IJT8YnIfsBmPZ8ghu2VBYbdDUF2WYzgRk9YH3DB6WPA08POjFOhJpvExoIBkzp/xFbNGD
7IzVVHQNBSzBestFkn2+BSP/GXFdk5wIneOBha3Y676gt10MaCQ6WVsrHiFvrv3DA3Fu7xLD
/Tz3GJgIbwSylrPCDXyeXOtKlM+RRWA9N7erMxqi2akzofCfNfaJ1ZHHV7padv/9V51/FnmP
ztRprYeKPZ/B87ERT8RUo/6ywXlRXlVVzQ1F/TDBr5lqBpI9JQUxt+cDpPsBx9Q81sYXv+vK
YP5YLLiLHxH94Zckz5ivjA875Zo+Wwkcybbhl1f1xO5BBkzGI01zWxa7j9c50DAB0pDHFsE1
YcoORmrE/blMc3uDaookqUJPnetQrZWSxZO7eTVW9lE/iAo+5HCPkLMFgnvSfgETK6wK5Nvy
jlgkR4PnnIEWHElaSlNwHQx1cRCBl+MtpJYQ+LO34Ebb7ZAv629b6+czh/JrCvCd9+adI+HX
EOPqfRtmFhhdwY+jjnv25Evu72FZnaMLd8hvbuaTJn/1NVPodaXRlCma9kvMJuUqQINYw418
XnOjW5wJ6mN/d5fvPvbesDoLOisnLvDUA1ZjzrffXOQ9uYxmWHFNDXGTCjJ0z2um3s4yAr3Z
fM26Y2z1mUgXzYsTGEl3qh/Ivj19AjpKD3nU1X3pI5jmZK7LVtDs0Z7M2YsuBQ6t+Hk1uEzo
mMRHnb0O/DDrHumgebUuypSAhA+WDryBeDdeQe10N7CjdFTKGmI2SKwme0Uc4cMNHkt6WQXn
aDbDc3Ra58OYmMCZNlPW1Hk51ViLWzUwvrbky+cf4QV74uIDP1tKrfiKZFlfvOQJHosqRnDg
6YdVt95rB4W39r18OMXtzfQTqFmw0nxSZdc0YOyX2DgV9eK/8Fe3j/8vhQM7Qdt0i0no+Z//
Cog0P6roE8YopA17IN51CXl7efufTdzs4SuxMuHKyLa9NXqGzI3KRdwuDTeXYbA8ndw9CKF+
dKoZHnsuBXI/Lj7afwA2JwWQy4cOSB4mdz55sBuHCG4HTWTrv4r0/D49SbAhULk8kBVxDvhf
SyKtk6XDb0+dc1u8tD7E

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_MAP_MESSAGE" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_MAP_MESSAGE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_MAP_MESSAGES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_MAP_MESSAGES" 
                                                                      
as varray(2147483647) of aq$_jms_map_message;

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_MAP_MESSAGES" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_MAP_MESSAGES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_MESSAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_MESSAGE" 
                                      
as object
(
  header        aq$_jms_header,
  senderid      varchar2(100),
  message_type  int,
  text_len      int,
  bytes_len     int,
  text_vc       varchar2(4000),
  bytes_raw     raw(2000),
  text_lob      clob,
  bytes_lob     blob,
  STATIC FUNCTION construct ( mtype IN int ) RETURN aq$_jms_message,

  --*******************************************
  -- Pseudo upcast to aq$_jms_messaeg
  --*******************************************

  STATIC FUNCTION construct( text_msg IN  aq$_jms_text_message)
  RETURN aq$_jms_message,

  STATIC FUNCTION construct( bytes_msg IN  aq$_jms_bytes_message)
  RETURN aq$_jms_message,

  STATIC FUNCTION construct( stream_msg IN  aq$_jms_stream_message)
  RETURN aq$_jms_message,

  STATIC FUNCTION construct( map_msg IN  aq$_jms_map_message)
  RETURN aq$_jms_message,

  STATIC FUNCTION construct( object_msg IN  aq$_jms_object_message)
  RETURN aq$_jms_message,

  -- cast an aq$_jms_message to an aq$_jms_text_message
  --
  -- Return aq$_jms_text_message or NULL if message_type attribute of the aq$_jms_message
  -- is not DBMS_AQ.JMS_TEXT_MESSAGE.

  MEMBER FUNCTION cast_to_text_msg RETURN aq$_jms_text_message,

  --
  -- cast an aq$_jms_message to an aq$_jms_bytes_message
  --
  -- Return aq$_jms_bytes_message or NULL if message_type attribute of the aq$_jms_message
  -- is not DBMS_AQ.JMS_BYTES_MESSAGE.

  MEMBER FUNCTION cast_to_bytes_msg RETURN aq$_jms_bytes_message,
--
  -- cast an aq$_jms_message to an aq$_jms_stream_message
  --
  -- Return aq$_jms_stream_message or NULL if message_type attribute of the aq$_jms_message
  -- is not DBMS_AQ.JMS_STREAM_MESSAGE.

  MEMBER FUNCTION cast_to_stream_msg RETURN aq$_jms_stream_message,

  --
  -- cast an aq$_jms_message to an aq$_jms_map_message
  --
  -- Return aq$_jms_map_message or NULL if message_type attribute of the aq$_jms_message
  -- is not DBMS_AQ.JMS_MAP_MESSAGE.
MEMBER FUNCTION cast_to_map_msg RETURN aq$_jms_map_message,

  --
  -- cast an aq$_jms_message to an aq$_jms_object_message
  --
  -- Return aq$_jms_object_message or NULL if message_type attribute of the aq$_jms_message
  -- is not DBMS_AQ.JMS_OBJECT_MESSAGE.

  MEMBER FUNCTION cast_to_object_msg RETURN aq$_jms_object_message,


  --
  -- set_text sets payload in varchar2 into text_vc if the length of
  -- payload is <= 4000, into text_lob if otherwise.
  --
  -- @param payload (IN)
  --
  MEMBER PROCEDURE set_text ( payload IN VARCHAR2 ),

  --
  -- set_text sets payload in clob in text_lob.
  --
  -- @param payload (IN)
  --
  MEMBER PROCEDURE set_text ( payload IN CLOB ),

  --
  -- get_text puts text_vc into payload if text_vc is not null,
  -- or transfers text_lob in clob into payload in varchar2 if the
  -- length of text_lob is =< 32767 (2**16 -1).
  -- Maximum length of varchar2 in PL/SQL is 32767.
  --
  -- @param payload (OUT)
  --
  -- @throws -24190 if the length of text_lob is > 32767.
  --
  MEMBER PROCEDURE get_text ( payload OUT VARCHAR2 ),

  --
  -- get_text puts text_lob into payload if text_lob is not null,
  -- or transfers text_vc in varchar2 into payload in clob.
--
  -- @param payload (OUT)
  --
  MEMBER PROCEDURE get_text ( payload OUT NOCOPY CLOB ),

  --
  -- set_bytes sets payload in RAW into bytes_raw if the length of
  -- payload is <= 2000, otherwise into bytes_lob.
  --
  -- @param payload (IN)
-- @param payload (IN)
  --
  MEMBER PROCEDURE set_bytes ( payload IN RAW ),

  --
  -- set_bytes sets payload in blob in bytes_lob.
  --
  -- @param payload (IN)
  --
  MEMBER PROCEDURE set_bytes ( payload IN BLOB ),

  --
  -- get_bytes puts bytes_raw into payload if it is not null,
  -- or transfers bytes_lob in blob into payload in RAW if the
  -- length of bytes_lob is =< 32767 (2**16 -1).
  -- Maximum length of raw in PL/SQL is 32767.
  --
  -- @param payload (OUT)
  --
  -- @throws -24190 if bytes_raw is null and
  -- the length of bytes_lob is > 32767.
  --
  MEMBER PROCEDURE get_bytes ( payload OUT RAW ),

  --
  -- get_bytes puts bytes_lob into payload if it is not null,
  -- or transfers bytes_raw in RAW into payload in blob.
  --
  -- @param payload (OUT)
  --
  MEMBER PROCEDURE get_bytes ( payload OUT NOCOPY BLOB ),


  MEMBER PROCEDURE set_replyto (replyto IN      sys.aq$_agent),

  MEMBER PROCEDURE set_type (type       IN      VARCHAR ),

  MEMBER PROCEDURE set_userid (userid   IN      VARCHAR ),

  MEMBER PROCEDURE set_appid (appid     IN      VARCHAR ),

  MEMBER PROCEDURE set_groupid (groupid IN      VARCHAR ),

  MEMBER PROCEDURE set_groupseq (groupseq       IN      int ),
  MEMBER PROCEDURE clear_properties ,

  MEMBER PROCEDURE set_boolean_property (
                property_name   IN      VARCHAR,
                property_value  IN      BOOLEAN ),
MEMBER PROCEDURE set_byte_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_short_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_int_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_long_property (
                property_name   IN      VARCHAR,
                property_value  IN      NUMBER ),

  MEMBER PROCEDURE set_float_property (
                property_name   IN      VARCHAR,
                property_value  IN      FLOAT ),

  MEMBER PROCEDURE set_double_property (
                property_name   IN      VARCHAR,
                property_value  IN      DOUBLE PRECISION ),

  MEMBER PROCEDURE set_string_property (
                property_name   IN      VARCHAR,
                property_value  IN      VARCHAR ),

  MEMBER FUNCTION get_replyto RETURN sys.aq$_agent,

  MEMBER FUNCTION get_type RETURN VARCHAR,

  MEMBER FUNCTION get_userid RETURN VARCHAR,

  MEMBER FUNCTION get_appid RETURN VARCHAR,

  MEMBER FUNCTION get_groupid RETURN VARCHAR,

  MEMBER FUNCTION get_groupseq RETURN int,

  MEMBER FUNCTION get_boolean_property ( property_name   IN      VARCHAR)
  RETURN   BOOLEAN,

  MEMBER FUNCTION get_byte_property ( property_name   IN      VARCHAR)
  RETURN   int,

  MEMBER FUNCTION get_short_property ( property_name   IN      VARCHAR)
RETURN   int,

  MEMBER FUNCTION get_int_property ( property_name   IN      VARCHAR)
  RETURN   int,
MEMBER FUNCTION get_long_property ( property_name   IN      VARCHAR)
  RETURN   NUMBER,

  MEMBER FUNCTION get_float_property ( property_name   IN      VARCHAR)
  RETURN   FLOAT,

  MEMBER FUNCTION get_double_property ( property_name   IN      VARCHAR)
  RETURN   DOUBLE PRECISION,

  MEMBER FUNCTION get_string_property ( property_name   IN      VARCHAR)
  RETURN   VARCHAR

);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."AQ$_JMS_MESSAGE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
3d93 9ca
8aa896MQhxCaOggmzkM91cHLaVswg0O6uiCMYI65A6qVetiOyHHZoepMDd7F+xwLKwRuOIU8
rjwi2MVcgwcntZ13voIfBCh1VxlIjjFGvm67z27VL896Z8g8E+/O5LuY6yQPnZC8PzozzU6a
D2clVm+mIVev6TlheY3uUeJnK+qyYHlANTYzddHRxZttNXQv22LlZ5vkudJSmm4zS97xdvEA
GEDPGnyWxZuyOYvpflm197affDFnjlx5k9GvOnIwJp8GSYhHbFQDmjcq0JGy2N/QmeWCtaR3
euEE+QKu+BuwRdV15BTqG4epgvWmyGoYzTguMCFT8bc/quHXLZMxbqHK1f/3w9638a36TpdA
DTbL+gAkJ16faRXySPbLNJFzwdl7PVpceucue1EdMNzQBN/LswaKMlgraXrD/d0VU4sT9RNO
7/DHEudsT0BA5wicXty8OMK/V5ywZAwjW9RqRb15dM2DM8u7/3VgNJhIy4v++q9rkJCY0cHh
QAe4sncEYUPUyz2LqdQDDeDL8R7S70dotGKuD5z8y18HebaDBBUNzaT/kH/wn79MfE4SU66o
JXWuq88VgaHJ55xUAAC+Y+YtROCK2yfwsK93OaXLK6z90ONa01VD341HkTPTRRXCN4tAiRx/
K3nnYbhzXE2fvXzx1FQ5X5Ucnl9CGB3XxSHvS2Q6bnr19+tsFV+GC1h86hJNfEm8qB9mRYHb
7NG8SgE1uvxrZxOBQJK/ONRj3XQjC5N86hLjfEmH0G0d5YJT3vM2sttWIumPyHbZezFQoNLx
Dn6cDlsvE+wMPYxQDgTHVQGXDgyNdUCvRC3c0BmmL4HeGaPWxkGvnF9KMpKjDB71cHW2Y9wn
jjPjGw+tGaHbUsTyyPZ9bMmwJ3vOhr00D2Sx4kAiX+yf4IyoSxwctEPK4SuIvSoE4FMkdxY1
xuNu78GCpdJJfaNjVvqfyJDmYl8S/jpGnnQmSgAeEIFnwmS6JewKKdtREOsezae075A/u5Cc
YQViLeBlIM6DVKpZUtZfh4xT1b5NHWUFFsV0x+NTaZfRutVVG5JD7mpkLAbGvmgb3fZAdsm0
JTk7xtIvaov1PpchwOOkJMzVFvUNGGeGSzc4lfEAwilVkEgQxZ5lO0XzrPq06s6T0BPeutU0
LhPxdFav/DK0EH4MeB01qyakCx2ydlToCzzXCVjWO+FahSENamMIhGukNh7wY0WO3j/i5tIw
UvceQxWBZ8ESMm34wC/+I63dVXRQC7n2zTyf/9locr4JRhb8qiochXHTIoZBcrHWxJ/6vQoZ
kBrRc0rJgb2rWb5KdcsXsJaY5aShwLSpESNZHyXJyynkFmHTxNRiTw7Q2t5uJlp7GbaiTWDV
iY6yGqq2nI+wUU8sGZq1YYes2tTrkKjcxHkSx7IHuX+S03k1u4ptTIzlA5K4kSne6OHXy7HB
VgAa3Wnzn6MQqJyd3kKoheNJRS2kL4Wsayf/wo6PjiG3VtkPpUs2mV/xByGrtxg/TqdT/SSE
5T+CmgUBnSdGOcUSPaTwTeQfZkJiemejcQkmCgPXqfMHPcsU0yTSG1KWh4QxghCpnHUvgFxa
6EUnxDVwGWnNzY3sNwjtZ9D2GmB4fE8gaOj2dG3+K/lkKY5gVdPwoZSMWZaFuaDA6fEsrsBp
hAvG60kxIBkxZIcqdWuQhknB0kiBUZ6ScZ59EefXWCcCtz/aPNEWjM343k49s4wdBrVryOgc
pHGAT5aMmCkQxxI0qHcoooHko+56UEcg4qw/OxpoLCzGMC2288lWjFtvX9VvL3qJgHHWWhxQ
SZjSgCLHbEAJ7lP+PuGdQyAvDgpyB+rsjj7bEOfK/sIcMxjEnNvC7uqc25ihykGbNjdFodsi
AknnOdvXq7grOj+VW/UIndYqTeM1SUTZL8Y3e2GyokT0Tgb4ElD3hJTjhIFZy1vlG7WSIuJs
apfzBydYjEUBI5fWBbEJyo3jgN6D3RdrxQBlEIntekITg9NLnjLjvJO9tvVmqizKFUR+0ee+
Myu2UeCjsZG38kjANrnV6MB9w2wSfZKDwDCvDAlhS7rKkVWPAqCT43SQnOjma2DXHPFx1rEF
9cuEc5PneZ8qFSR8jOj5A2nyjnM3vT0NTwL/wuKbCqWTDVmSzcwnfHyZsLol+HHGWlga/V13
kXBvCXgyE6ex+txxjohAk7NQvwVI0HBt8ELxlGCVjayvzWEdb7229Fwg6YtVYkACgZHdNNB/
zrXD4RNh8+e2DJi4gOhRIqIcmE4vG194akpT8xXbsql8Utg+7aKru2pqRvT/pdNSwqQcqMjS
yUrbZkfcXZJ83kgkMtTXCx473zFsAmdOxGI3ywENPq+42knnFCXrLzbmDf2psWr81Q0dr+xj
gR41pNHgHTej6R42GjSrsvsePigds4NDjzZTfm0voLwV1S/iXhEu3fbqaahQ7WwuTZgxbEc2
iu8VRcRUUMrrck/5HWZCHNc=

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_MESSAGE" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_MESSAGE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_MESSAGE_PROPERTIES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_MESSAGE_PROPERTIES" 
                                                                      
as varray(2147483647) of aq$_jms_message_property;

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_MESSAGE_PROPERTIES" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_MESSAGE_PROPERTIES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_MESSAGE_PROPERTY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_MESSAGE_PROPERTY" 
                                                                      
as object
(
   priority          int,
   delay             int,
   expiration        int,
   correlation       varchar2(128),
   attempts          int,
   recipient_list    sys.aq$_recipients,
   exception_queue   varchar2(128),
   enqueue_time      date,
   state             int,
   sender_id         sys.aq$_agent,
   original_msgid    raw(16),
   signature         sys.aq$_sig_prop,
   transaction_group varchar2(30)
);

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_MESSAGE_PROPERTY" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_MESSAGE_PROPERTY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_MESSAGES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_MESSAGES" 
                                                                      
as varray(2147483647) of aq$_jms_message;

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_MESSAGES" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_MESSAGES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_NAMEARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_NAMEARRAY" 
                                      
as varray(1024) of varchar(200);

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_NAMEARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_OBJECT_MESSAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_OBJECT_MESSAGE" 
                                      
as object
(
  header     aq$_jms_header,
  bytes_len  int,
  bytes_raw  raw(2000),
  bytes_lob  blob
);

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_OBJECT_MESSAGE" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_OBJECT_MESSAGE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_OBJECT_MESSAGES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_OBJECT_MESSAGES" 
                                                                      
as varray(2147483647) of aq$_jms_object_message;

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_OBJECT_MESSAGES" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_OBJECT_MESSAGES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_STREAM_MESSAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_STREAM_MESSAGE" 
                                       authid current_user
as object
(
  header     aq$_jms_header,
  bytes_len  int,
  bytes_raw  raw(2000),
  bytes_lob  blob,
  --============================================
  STATIC FUNCTION construct RETURN aq$_jms_stream_message,


  -- *******************************************
  -- The following are common procedures of aq$_jms_stream_message,
  -- aq$_jms_bytes_message and aq$_jms_map_message types to synchronize
  -- the data between JAVA stored procedure and PL/SQL.
  -- *******************************************

  --============================================
  -- Get the JAVA exception thrown during the previous failure.
  -- Only one JAVA exception is recorded for a session. If the
  -- exception is not fetched in time, it might be overwritten
  -- by the exception thrown in next failure.

  STATIC FUNCTION get_exception
  RETURN AQ$_JMS_EXCEPTION,


  --============================================
  -- Clean all the messages in the JVM session memory.
  --

  STATIC PROCEDURE clean_all,


  --============================================
  -- Populate the data at JAVA stored procedure with the data at PL/SQL side.
  --
  -- Underlying, it takes the RAW/BLOB stored in PL/SQL aq$_jms_stream_message
  -- to construct a JAVA object (for aq$_jms_stream_message is ObjectInputStream)
  -- which is stored in ORACLE JVM session memeory.
  --
  -- Parameter "id" is called operation id that is used to identify the slot
  -- where the JAVA object is stored in the ORACLE JVM session memeory.
  -- If "id" is NULL, a new slot is created for this PL/SQL object.
  -- Later JMS operations on the payload need to provide this operation id.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --        if id is negative, the system will create a new operation id.
  --
  -- Returns:
  --  the operation id.
  --
  -- The prepare procedure for aq$_jms_stream_message sets the message access mode
  -- to MESSAGE_ACCESS_READONLY. Later calls of write_XXX procedure raise ORA-24196 error.
  -- User can call clear_body procedure to set the message access mode to
  -- MESSAGE_ACCESS_WRITEONLY.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.
-- Raise ORA-24199: JAVA store procedure message store overflow.

  MEMBER FUNCTION prepare (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Set the data at JAVA stored procedure as empty payload.
  --
  -- Underlying, it initialize an new ObjectOutputStream object and set it to
  -- the static varaible in ORACLE JVM session memeory.
  --
  -- Parameter "id" is called operation id that is used to identify the slot
  -- where the JAVA object is stored in the ORACLE JVM session memeory.
  -- If "id" is NULL, a new slot is created for this PL/SQL object.
  -- Later JMS operations on the payload need to provide this operation id.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --        if id is negative, the system will create a new operation id.
  --
  -- Returns:
  --  the operation id.
  --
  -- The clear_body procedure for aq$_jms_stream_message sets the message access mode
  -- to MESSAGE_ACCESS_WRITEONLY. Later calls of read_XXX procedure raise ORA-24196 error.
  -- User can call reset procedure or prepare procedure to set the message access mode
  -- to MESSAGE_ACCESS_READONLY. Note the difference between prepare procedure and
  -- reset procedure.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.
  -- Raise ORA-24199: JAVA store procedure message store overflow.

  MEMBER FUNCTION clear_body (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Get the current message access mode of this message
  -- The result will be either dbms_aqjms.MESSAGE_ACCESS_WRITEONLY or
  -- dbms_aqjms.MESSAGE_ACCESS_READONLY.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION get_mode (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,

  --============================================
  -- Reset reposition the stream to the begining for reading.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- The reset procedure for aq$_jms_stream_message sets the message access mode
  -- to MESSAGE_ACCESS_READONLY. Later calls of write_XXX procedure raise ORA-24196 error.
  -- User can call clear_body procedure to set the message access mode to
  -- MESSAGE_ACCESS_WRITEONLY.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE reset (id IN PLS_INTEGER),


  --============================================
  -- Flush the data at JAVA stored procedure side to PL/SQL side.
  --
  -- Underlying, it update the data at PL/SQL side to the payload stored at
  -- the JAVA stored procedure side.
  --
  -- The flush procedure for aq$_jms_stream_message does not affect current message access
  -- mode. User can continue to call procedures appropriate to the current mode.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE flush (id IN PLS_INTEGER),


  --============================================
  -- clean the data at JAVA stored procedure side to PL/SQL side.
  --
  -- Underlying, it close and clean upthe ObjectInputStream or ObjectOutputStream
  -- at the JAVA stored procedure side corresponding to the operation id.
  -- It is very import to call this procedure to avoid memeory leak!
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE clean (id IN PLS_INTEGER),


  --*******************************************
 -- JMS operations member functions and procedures
  --*******************************************

  --============================================
  -- Read a object value from the stream message.
  --
  -- The function returns a general value ADT AQ$_JMS_VALUE. User can use the
  -- "type" attribute of this ADT to interpret the data.
  -- The following is a map among type attribute, JAVA type and value attributes
  --
  -- -----------------------------------------------------------------
  --               type                 | JAVA type | value attributes
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_BYTE      |  byte     |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_SHORT     |  short    |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_INTEGER   |  int      |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_LONG      |  long     |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_FLOAT     |  float    |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_DOUBLE    |  double   |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_BOOLEAN   |  boolean  |    num_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_CHARACTER |  char     |    char_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_STRING    |  String   |    text_val
  -- -----------------------------------------------------------------
  -- DBMS_JMS_PLSQL.DATA_TYPE_BYTES     |  byte[]   |    bytes_val
  -- -----------------------------------------------------------------
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Also note that this memeber procedure might bring additional overhead
  -- comparing to other "read" memeber procedures. It is used only if the user
  -- does not know the data type before hand, otherwise it is always a good idea
  -- to use a specific read member procedure.
  --
  -- Parameters:
  --  id    - the operation id for this ADT instance.
  --  value - the object that is read.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  --                  In this particular case, an object with unsupported type is read from the stream.
  -- Raise ORA-24196: The stream message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
-- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE read_object (id IN PLS_INTEGER, value OUT NOCOPY AQ$_JMS_VALUE),


  --============================================
  -- Read a boolean value from the stream message.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24196: The stream message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_boolean (id IN PLS_INTEGER)
  RETURN BOOLEAN,


  --============================================
  -- Read a byte from the stream message.
  --
  -- The function guarantees that the returned value is in the JAVA byte value range.
  -- This also means if this value is issued with a write_byte function,
  -- there wont be an out of range error raised.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24196: The stream message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_byte (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Read a byte array from the stream message.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
 --  id    - the operation id for this ADT instance.
  --  value - the bytes that is read.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24196: The stream message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE read_bytes (id IN PLS_INTEGER, value OUT NOCOPY BLOB),


  --============================================
  -- Read a char from the stream message.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24196: The stream message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_char (id IN PLS_INTEGER)
  RETURN CHAR,


  --============================================
  -- Read a double from the stream message.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24196: The stream message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_double (id IN PLS_INTEGER)
  RETURN DOUBLE PRECISION,

  --============================================
  -- Read a float from the stream message.
  --
  -- The function returns NULL if the end of the message stream has been reached.
--
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24196: The stream message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_float (id IN PLS_INTEGER)
  RETURN FLOAT,


  --============================================
  -- Read a int from the stream message.
  --
  -- The function guarantees that the returned value is in the JAVA int value range.
  -- This also means if this value is issued with a write_int function,
  -- there wont be an out of range error raised.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24196: The stream message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_int (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,


  --============================================
  -- Read a long from the stream message.
  --
  -- The function guarantees that the returned value is in the JAVA long value range.
  -- This also means if this value is issued with a write_long function,
  -- there wont be an out of range error raised.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24196: The stream message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
-- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_long (id IN PLS_INTEGER)
  RETURN NUMBER,


  --============================================
  -- Read a short from the stream message.
  --
  -- The function guarantees that the returned value is in the JAVA short value range.
  -- This also means if this value is issued with a write_short function,
  -- there wont be an out of range error raised.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id  - the operation id for this ADT instance.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24196: The stream message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER FUNCTION read_short (id IN PLS_INTEGER)
  RETURN PLS_INTEGER,

  --============================================
  -- Read a String from the stream message.
  --
  -- The function returns NULL if the end of the message stream has been reached.
  --
  -- Parameters:
  --  id    - the operation id for this ADT instance.
  --  value - the string that is read.
  --
  -- Raise ORA-24194: The type conversion between the type of real value and the expected type is invalid.
  -- Raise ORA-24196: The stream message is in write-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE read_string (id IN PLS_INTEGER, value OUT NOCOPY CLOB),


  --============================================
  -- Write a boolean to the stream message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the boolean value to be written. The value is copied into the stream message.
--
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_boolean (id IN PLS_INTEGER, value IN BOOLEAN),


  --============================================
  -- Write a byte to the stream message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the byte value to be written. The value is copied into the stream message.
  --
  -- Raise ORA-24193: The parameter value exceeds the valid JAVA type range.
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_byte (id IN PLS_INTEGER, value IN PLS_INTEGER),


  --============================================
  -- Write a byte array to the stream message.
  --
  -- This procedure takes a RAW type.
  -- Note that two consecutively written byte arrays are read as two distinct fields.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the byte array value to be written. The value is copied into the stream message.
  --
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_bytes (id IN PLS_INTEGER, value IN RAW),


  --============================================
  -- Write a byte array to the stream message.
  --
  -- This procedure takes a BLOB type.
  -- Note that two consecutively written byte arrays are read as two distinct fields.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
 --  value  - the byte array value to be written. The value is copied into the stream message.
  --
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_bytes (id IN PLS_INTEGER, value IN BLOB),


  --============================================
  -- Write a portion of byte array to the stream message.
  --
  -- This procedure takes a RAW type.
  -- Note that two consecutively written byte arrays are read as two distinct fields.
  -- If the range [offset, offset+length] exceeds the boundary of the byte array value,
  -- a JAVA IndexOutOfBoundsException is thrown at the JAVA stored procedure and ORA-24197
  -- ora error is raised at the PL/SQL side. The index starts from 0.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the byte array value to be written. The value is copied into the stream message.
  --  offset - the initial offset within the byte array.
  --  length - the number of bytes to use
  --
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_bytes (
         id        IN      PLS_INTEGER,
         value     IN      RAW,
         offset    IN      PLS_INTEGER,
         length    IN      PLS_INTEGER
  ),


  --============================================
  -- Write a portion of byte array to the stream message.
  --
  -- This procedure takes a BLOB type.
  -- Note that two consecutively written byte arrays are read as two distinct fields.
  -- If the range [offset, offset+length] exceeds the boundary of the byte array value,
  -- a JAVA IndexOutOfBoundsException is thrown at the JAVA stored procedure and ORA-24197
  -- ora error is raised at the PL/SQL side. The index starts from 0.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the byte array value to be written. The value is copied into the stream message.
  --  offset - the initial offset within the byte array.
  --  length - the number of bytes to use
--
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_bytes (
         id        IN      PLS_INTEGER,
         value     IN      BLOB,
         offset    IN      PLS_INTEGER,
         length    IN      PLS_INTEGER
  ),

  --============================================
  -- Write a char to the stream message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the char value to be written. The value is copied into the stream message.
  --
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_char (id IN PLS_INTEGER, value IN CHAR),


  --============================================
  -- Write a double to the stream message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the double value to be written. The value is copied into the stream message.
  --
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_double (id IN PLS_INTEGER, value IN DOUBLE PRECISION),


  --============================================
  -- Write a float to the stream message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the float value to be written. The value is copied into the stream message.
  --
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.
MEMBER PROCEDURE write_float (id IN PLS_INTEGER, value IN FLOAT),


  --============================================
  -- Write a int to the stream message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the int value to be written. The value is copied into the stream message.
  --
  -- Raise ORA-24193: The parameter value exceeds the valid JAVA type range.
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_int (id IN PLS_INTEGER, value IN PLS_INTEGER),


  --============================================
  -- Write a long to the stream message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the long value to be written. The value is copied into the stream message.
  --
  -- Raise ORA-24193: The parameter value exceeds the valid JAVA type range.
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_long (id IN PLS_INTEGER, value IN NUMBER),


  --============================================
  -- Write a short to the stream message.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the short value to be written. The value is copied into the stream message.
  --
  -- Raise ORA-24193: The parameter value exceeds the valid JAVA type range.
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_short (id IN PLS_INTEGER, value IN PLS_INTEGER),


  --============================================
  -- Write a String to the stream message.
  --
  -- This procedure takes VARCHAR2 type.
--
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the string value to be written. The value is copied into the stream message.
  --
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_string (id IN PLS_INTEGER, value IN VARCHAR2),


  --============================================
  -- Write a String to the stream message.
  --
  -- This procedure takes CLOB type.
  --
  -- Parameters:
  --  id     - the operation id for this ADT instance.
  --  value  - the string value to be written. The value is copied into the stream message.
  --
  -- Raise ORA-24196: The stream message is in read-only mode.
  -- Raise ORA-24197: JAVA stored procedure throws Exception during execution.
  -- Raise ORA-24198: Invalid operation id.

  MEMBER PROCEDURE write_string (id IN PLS_INTEGER, value IN CLOB),


  --*******************************************
  -- The following are JMS header related procedures
  --*******************************************

  MEMBER PROCEDURE set_replyto (replyto IN      sys.aq$_agent),

  MEMBER PROCEDURE set_type (type       IN      VARCHAR ),

  MEMBER PROCEDURE set_userid (userid   IN      VARCHAR ),

  MEMBER PROCEDURE set_appid (appid     IN      VARCHAR ),

  MEMBER PROCEDURE set_groupid (groupid IN      VARCHAR ),

  MEMBER PROCEDURE set_groupseq (groupseq       IN      int ),

  MEMBER PROCEDURE clear_properties ,

  MEMBER PROCEDURE set_boolean_property (
                property_name   IN      VARCHAR,
                property_value  IN      BOOLEAN ),

  MEMBER PROCEDURE set_byte_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),
  MEMBER PROCEDURE set_short_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_int_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_long_property (
                property_name   IN      VARCHAR,
                property_value  IN      NUMBER ),

  MEMBER PROCEDURE set_float_property (
                property_name   IN      VARCHAR,
                property_value  IN      FLOAT ),

  MEMBER PROCEDURE set_double_property (
                property_name   IN      VARCHAR,
                property_value  IN      DOUBLE PRECISION ),

  MEMBER PROCEDURE set_string_property (
                property_name   IN      VARCHAR,
                property_value  IN      VARCHAR ),

  MEMBER FUNCTION get_replyto RETURN sys.aq$_agent,

  MEMBER FUNCTION get_type RETURN VARCHAR,

  MEMBER FUNCTION get_userid RETURN VARCHAR,

  MEMBER FUNCTION get_appid RETURN VARCHAR,

  MEMBER FUNCTION get_groupid RETURN VARCHAR,

  MEMBER FUNCTION get_groupseq RETURN int,

  MEMBER FUNCTION get_boolean_property ( property_name   IN      VARCHAR)
  RETURN   BOOLEAN,

  MEMBER FUNCTION get_byte_property ( property_name   IN      VARCHAR)
  RETURN   int,

  MEMBER FUNCTION get_short_property ( property_name   IN      VARCHAR)
  RETURN   int,

  MEMBER FUNCTION get_int_property ( property_name   IN      VARCHAR)
  RETURN   int,

  MEMBER FUNCTION get_long_property ( property_name   IN      VARCHAR)
  RETURN   NUMBER,

  MEMBER FUNCTION get_float_property ( property_name   IN      VARCHAR)
RETURN   FLOAT,

  MEMBER FUNCTION get_double_property ( property_name   IN      VARCHAR)
  RETURN   DOUBLE PRECISION,

  MEMBER FUNCTION get_string_property ( property_name   IN      VARCHAR)
  RETURN   VARCHAR

);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."AQ$_JMS_STREAM_MESSAGE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
53ae 9d2
ZJ7BC6i6oSDIYCd4jxWiFk0J5eswg81xDCCG3y+5rZ2sBwBaqTgUADxVRJFYYQ3IbAJR3x63
yIRpDmfLeZK1zLzp7U0I7+XDmLR79ypdz4KayOyIoWvGdIwyRa1RsZ28iaq8qoksteRzM5KH
vJ0QzzT5CECs5O77qIHQc0/rqWCog2+hWowhNTjsXYmOqOk266wUFjD5CT8kXWz4b1sHm6lO
erQ432WXMcaru1FGc6JIUq7jtLXevgDL33UwofPGmSHkKZajggA8/2S0Qm5+K6eN7WG5fGII
ci8XBn1rAdatsDsBXrbx8WVZeHWkkVKHYL2V2lkrm4py2HlrWOmXuIl+d2CFIclNNN4pOs3V
g9gxes/RG7V2lvZTAOj1OMmBAu50uTxBBv4gffOzANyJTtvPOvc4hmUM06Kti8aOLF3qhyq0
6uh/27Nh7FV1CJQAMV7VH5vrJ3BuhpKtOVMqsBrYBhbv3uN4RK8WX1LIiTV2alqmRWkCsFho
/WpS1IUdIth/JuF/71eZdTuH25G2BRSdGPIeuhF6G85jX9/FHJbAieaFptF32JmgIglunBQw
s53UKSNuzus1G6mg6s/r7W4BCRhMUkUc4mej3EEa2jozx49X0fXJnHK0YYhAiuyolHRTjUIC
74WVSMfshKt2WnHMm+/jjPDSEtkML9MN9jYCp2yMmxEpzWwDgw+9/3/Na5sac58jfufrNPMr
sw63xFL3u5huVtsXuck4bupM8+Bu5IAfBzUc24H5tYiKFaB/1u2no79+1a/oWbGaUrQNvlYv
gsTdFmIW8iV810obTG9Jzza8ptYlKT65LtQk4CnnA0mJxgw/BM/Vt1uRwhXYMux7PFhF8j6o
V3Jx91/LMnyZGGzDWCWTG1bsC9/7svKX5b/N7fPv3ZvYzSRdFinshrw8OCaoBamUqhABymxE
ub3YvEdeYB+YbvWH8pbyXTrYl6c6ze8ryFyfU+ZfvfDs8StNZ4gm4K0HTK08eg2mTkdGsnLk
cG82mSBaP7I/Lg4xJgpe1XltAWLEPmNVn38mQ6dwR1/6CdPIjOpe6w32z8C3274dRvip0hvr
xQZTdCEbU9j0vT+PADoD55k3jYDpAa9N2UUJmKx/xKFtMnqgEtVrX498l659vJdSGIWLFMcF
xnkLdtq+jv2N9f1Y6Exv+8sGxFKrUGsq1UYOfpk47SeVr2gWYVa4fFYaYGy0FUSLnMyC27mI
oYjafPibbrdlCwfWF83Cf1jfU6kFv24bmKjsYzFpQDpfQAZCpzKNvcufvlBNdytNqWiL+IlQ
HrFc4KPXpV+cSwEH1smoKsVyb9ER3pVWX3uxUoB5lJuDnmhfmc0GxW4MUmxzqE59+fzFfurq
7r49XFc7/OUY0B/TzIp9minn9Fm1/0/eHdDe9r80J7LFscoMU8kfbbewK50KPggwyUvywOgF
aXcmZqvLS7lvQZRMTr54xyvKkOn+FEUjsPdumJMbr22aP/FHq0gFc1NnRPA6YpUBX7ekVRLA
W4HqjxB5BMw7nOc3kZ/OpOicr+UcfoIoibii1/26mcO97IOF55v94j069ZhDeP4SG+VdFKUc
rRufBQxL6Zj1Hua+eSMMucX32+oVAIlI34kjI4o8K/psSBMu6z8ssE7LSWTE10izsX7I+H1B
F6+b2PcjubhF+OwebwXCbc8XBNSlVwC/V69VVYESvvXz+gsqaO4h/qCxYkFjQr8YN47QJTIH
TgWx4J2WXW1UHLApP+HXhHMyM83QqaWKCLEFGzH8NK5iAkDIBBUsepi2zt42nyI//xj88Y9W
IiWOQpIfVfdw5afkUk5wB7aDs80LfUP2JhDEMncpY2Pp1Qi6zaoAH8djK37tzuVAgZ2B5Ycg
6bC8/N0tCM3zQgYDGUQJBSirIbwFpRy6aGS7M6sJx0lb1S/4Z/1tdrZhDnqBx8vf8k2ef3f/
ytlTWJvGelOOVGzgTY3a8W8V3HPZ0jvDWioGt1bXCANljbUrD4w0fRNNDXTYNc0dD5hmbNr/
fGvz/wUrPrIuNQ6WPaTcAKXjg6ogZ0/Ft4+pBQoXsyRnDdQuD3FVdk8cKi6WMCoTHzLWDjjF
QWgsamTrdP7sOupSTc9wwZ8Ao8S1xdFD0H8Z4oR5HmQG3Ah9jwT5iSr5NkyjTt1cz8VPJhxq
JpvJ3dLPo/7dXG7lGaIEagrXmAG29bhq/bG+VPSSP44ornivIFfuWcY8+c8Y5ZLVwX2wQs3/
oruatAm02PQvWWJkCrp78B6okqKW++hZp8RiMkkWXmwAWZAWgpazG9X2dWVcHkxR3B9TSRaR
PSsMCzZttgAc6DtMrrJWx7Vr+woIn52Z7Jh++9FNYFjhQLpi4Q7vpET7LycDps562OLD/edh
QaOqHHf5FG/noPegQTeg+QbxmdjvADZReejWF9077VYp5h7yNKm4uvQ8iDD4GfwyNb/oIVBD
PFk4/90/FWG5WW9WheROnKr7ioUXPw==

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_STREAM_MESSAGE" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_STREAM_MESSAGE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_STREAM_MESSAGES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_STREAM_MESSAGES" 
                                                                      
as varray(2147483647) of aq$_jms_stream_message;

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_STREAM_MESSAGES" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_STREAM_MESSAGES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_TEXT_MESSAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_TEXT_MESSAGE" 
                                      
as object
(
  header    aq$_jms_header,
  text_len  int,
  text_vc   varchar2(4000),
  text_lob  clob,
  STATIC FUNCTION construct RETURN aq$_jms_text_message,

  --
  -- set_text sets payload in varchar2 into text_vc if the length of
  -- payload is <= 4000, into text_lob if otherwise.
  --
  -- @param payload (IN)
  --
  MEMBER PROCEDURE set_text ( payload IN VARCHAR2 ),

  --
  -- set_text sets payload in clob in text_lob.
  --
  -- @param payload (IN)
  --
  MEMBER PROCEDURE set_text ( payload IN CLOB ),

  --
  -- get_text puts text_vc into payload if text_vc is not null,
  -- or transfers text_lob in clob into payload in varchar2 if the
  -- length of text_lob is =< 32767 (2**16 -1).
  -- Maximum length of varchar2 in PL/SQL is 32767.
  --
  -- @param payload (OUT)
  --
  -- @throws -24190 if the length of text_lob is > 32767.
  --
  MEMBER PROCEDURE get_text ( payload OUT VARCHAR2 ),

  --
  -- get_text puts text_lob into payload if text_lob is not null,
  -- or transfers text_vc in varchar2 into payload in clob.
  --
  -- @param payload (OUT)
  --
  MEMBER PROCEDURE get_text ( payload OUT NOCOPY CLOB ),

  MEMBER PROCEDURE set_replyto (replyto IN      sys.aq$_agent),

  MEMBER PROCEDURE set_type (type       IN      VARCHAR ),

  MEMBER PROCEDURE set_userid (userid   IN      VARCHAR ),

  MEMBER PROCEDURE set_appid (appid     IN      VARCHAR ),

  MEMBER PROCEDURE set_groupid (groupid IN      VARCHAR ),

  MEMBER PROCEDURE set_groupseq (groupseq       IN      int ),

  MEMBER PROCEDURE clear_properties ,

  MEMBER PROCEDURE set_boolean_property (
               property_name   IN      VARCHAR,
                property_value  IN      BOOLEAN ),

  MEMBER PROCEDURE set_byte_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_short_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_int_property (
                property_name   IN      VARCHAR,
                property_value  IN      int ),

  MEMBER PROCEDURE set_long_property (
                property_name   IN      VARCHAR,
                property_value  IN      NUMBER ),

  MEMBER PROCEDURE set_float_property (
                property_name   IN      VARCHAR,
                property_value  IN      FLOAT ),

  MEMBER PROCEDURE set_double_property (
                property_name   IN      VARCHAR,
                property_value  IN      DOUBLE PRECISION ),

  MEMBER PROCEDURE set_string_property (
                property_name   IN      VARCHAR,
                property_value  IN      VARCHAR ),

  MEMBER FUNCTION get_replyto RETURN sys.aq$_agent,

  MEMBER FUNCTION get_type RETURN VARCHAR,

  MEMBER FUNCTION get_userid RETURN VARCHAR,

  MEMBER FUNCTION get_appid RETURN VARCHAR,

  MEMBER FUNCTION get_groupid RETURN VARCHAR,

  MEMBER FUNCTION get_groupseq RETURN int,

  MEMBER FUNCTION get_boolean_property ( property_name   IN      VARCHAR)
  RETURN   BOOLEAN,

  MEMBER FUNCTION get_byte_property ( property_name   IN      VARCHAR)
  RETURN   int,

  MEMBER FUNCTION get_short_property ( property_name   IN      VARCHAR)
  RETURN   int,
MEMBER FUNCTION get_int_property ( property_name   IN      VARCHAR)
  RETURN   int,

  MEMBER FUNCTION get_long_property ( property_name   IN      VARCHAR)
  RETURN   NUMBER,

  MEMBER FUNCTION get_float_property ( property_name   IN      VARCHAR)
  RETURN   FLOAT,

  MEMBER FUNCTION get_double_property ( property_name   IN      VARCHAR)
  RETURN   DOUBLE PRECISION,

  MEMBER FUNCTION get_string_property ( property_name   IN      VARCHAR)
  RETURN   VARCHAR

);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."AQ$_JMS_TEXT_MESSAGE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
2391 66e
ai+73RkJduOub9kfq2ofHoAM7pcwg0OTzCAF3y8ZA6pELJ6i4TTd+hiUuqfh8c9hXIUaDAne
c5HSqBZ8DiiEkktPnbbpCdM+PqAGMNEnNqfvHLu8uzC/evLAnR3xwkNBzzrB1+67IK4Hu9C1
PyTPEs8jkpuB9xTg3++ihaKLiJONIbetjBQLw1qHyfG4yGywFDrOi6U41cvTItlqb0ZaPKlO
wDcPPtjHGOplG3Y+NzPGWnnKk+HQEZOOx5vkv3r+IWJ7hr9Xy/VC6gjltWFLLje3pBeIVgzL
oqnDj2bCDDNEDKcUsF2o7jEb7sQUM/RD1dOTzGuKyHWFslBvBOnEpvL5NElt2iCpYz1nKj39
EoWSQCcgPL8OL3xwnpb2vn+l4GKu832eEHDu9r53nvGdufoFleDuL4g2BeblXM5QQLRWXnER
wyOQUloUWrS5BK7OIhUSMCTv/rs77q368X4d/G+WqDONzwa+RhjMcpGWV35TeZOhAe+Z9VSn
OysEZo2K10tpo+IrBFwWIY+S3jh1XLzEqOPJM9N3CcHDFasweRqbDuz2Fd+SzTNVu7uORu8V
YbbCXUjfHOEdCtovsHlVnyk8yu0wPZuUVNpb7lc6PXxgEOrqLlFUWw3ry1L10ilULOvefxhl
lQYXpv8TMKh4Up2Tt6MrD2gV+3LKeRWV6OWZExQWkRf+wc0RWN47bpW0mVIaHA09E+FnklpG
Sd2jSabeZamNwmTTnNV4W0XMSFLqOP+RDwLfb4koJzj9A2Jk7684pDmAqlr9RC6JFu3J0+IT
8gmqwUtFS3vRoSEt4t7aZMM8NFrMDpWHdqnH1GRC8ZlN+camCiDpnRm87TodeMHV6fjlY1qA
WuoX9jd+fe1XpxbZtEhk5eUDZHJ76Rch9eZhlrrRG4qHybm1LULeMwizvo+LtvL4sjcD6BqY
6TnNyHaflYdl01gsU6HlKNSDMj2i4L+hAarrK/6npNN5noGlMtkYf9P4w6DRkeB0xEXqAHlT
Mj0AxfRJMGcrYs8avDKTsxxQAvF6DLxPzqacCBzPyFrGkJRUAlegpJZEpXb2T7z553b2TatS
FnKRxAoRPJwsC2KUPKtSFtkqF2MG3j9xIgzwd8oiGCap0OwngQoTjLTCccW6NvbMB6XXnlrO
+7Wa+5yt4x+Jceo9RuV1ZUDyTczCSfnvOYL1Dvpv5HETKK4wWhjT7L2DPETRGh4CTWpCGWyO
q3f8TVLLnYfJwPV9T9tr4GpT5PQAg0Oq05xms0+0a3kzSVIXr32SVvkaY8I/QtHNMI8UIkzu
s8F6NeVWTA6umBxX9F6c2FltTorcDT52QFYfPfb32cdLhvDrfivxwRfFOZwSdrhufLMtMwKD
RULbfMeHpfVPC3S8w+u0oxhadTH8jrkxoOIoLbBBekaICihqQb7vXylbpjiLd2vSbDz8xzB1
fxBlz/Stx3YiFcpB13ptQlRudTo4POROd4LeHHJ2VKOE56AICwxw5q3GiXBTLtM2e8BdZy/n
PQCmNBw8LSvaL37EDT8ATWoufsppsN6QqaC5YITdSqAHNxFVn7jhcWNmNs1UhpTnsfagG48y
2k0vfYxiLhFFvmJHNoqAiYGzyWtEvpL5QyQP7HzT

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_TEXT_MESSAGE" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_TEXT_MESSAGE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_TEXT_MESSAGES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_TEXT_MESSAGES" 
                                                                      
as varray(2147483647) of aq$_jms_text_message;

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_TEXT_MESSAGES" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_JMS_TEXT_MESSAGES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_USERPROPARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_USERPROPARRAY" 
                                      
as varray(100) of aq$_jms_userproperty;

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_USERPROPARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_USERPROPERTY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_USERPROPERTY" 
                                      
as object
(
  name        varchar(100),
  type        int,
  str_value   varchar(2000),
  num_value   NUMBER,
  java_type   int
);

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_USERPROPERTY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_JMS_VALUE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_JMS_VALUE" 
                                      
as object
(
  type        number(2),
  num_val     number,
  char_val    char(1),
  text_val    clob,
  bytes_val   blob
);

/

  GRANT EXECUTE ON "SYS"."AQ$_JMS_VALUE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_MIDARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_MIDARRAY" as varray(1024) of VARCHAR2(32);

/

  GRANT EXECUTE ON "SYS"."AQ$_MIDARRAY" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type AQ$_NOTIFY_MSG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_NOTIFY_MSG" AS OBJECT (
        opcode INTEGER, qid RAW(16), dest VARCHAR2(128))

/

  GRANT EXECUTE ON "SYS"."AQ$_NOTIFY_MSG" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type AQ$_NTFN_DESCRIPTOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_NTFN_DESCRIPTOR" FORCE AS OBJECT (
        ntfn_flags         number)                     -- flags

/

  GRANT EXECUTE ON "SYS"."AQ$_NTFN_DESCRIPTOR" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_NTFN_MSGID_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_NTFN_MSGID_ARRAY" 
AS VARRAY(1073741824) OF raw(16);

/

  GRANT EXECUTE ON "SYS"."AQ$_NTFN_MSGID_ARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_POST_INFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_POST_INFO" AS OBJECT (
        name             VARCHAR2(128),       -- name of the subscription
        namespace        NUMBER,              -- namespace of the subscription
        payload          RAW(32767))          -- payload
 alter type     "SYS"."AQ$_POST_INFO" modify attribute
           (name varchar2(512)) CASCADE

/

  GRANT EXECUTE ON "SYS"."AQ$_POST_INFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_POST_INFO_LIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_POST_INFO_LIST" 
AS VARRAY(1024) OF sys.aq$_post_info

/

  GRANT EXECUTE ON "SYS"."AQ$_POST_INFO_LIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_RECIPIENTS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_RECIPIENTS" 
                                                                      
AS VARRAY(1024) OF sys.aq$_agent

/

  GRANT EXECUTE ON "SYS"."AQ$_RECIPIENTS" TO PUBLIC WITH GRANT OPTION;
  GRANT EXECUTE ON "SYS"."AQ$_RECIPIENTS" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type AQ$_REG_INFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_REG_INFO" AS OBJECT (
        name                  VARCHAR2(128),  -- name of the subscription
        namespace             NUMBER,         -- namespace of the subscription
        callback              VARCHAR2(4000), -- callback function
        context               RAW(2000),      -- context for the callback func.
        anyctx                SYS.ANYDATA,    -- anydata ctx for callback func
        ctxtype               NUMBER,         -- raw/anydata context
        qosflags              NUMBER,         -- QOS flags
        payloadcbk            VARCHAR2(4000), -- payload callback
        timeout               NUMBER,         -- registration expiration
        ntfn_grouping_class        NUMBER,    -- ntfn grouping class
        ntfn_grouping_value        NUMBER,    -- ntfn grouping value
        ntfn_grouping_type         NUMBER,    -- ntfn grouping type
        ntfn_grouping_start_time   TIMESTAMP WITH TIME ZONE, -- grp start time
        ntfn_grouping_repeat_count NUMBER,    -- ntfn grp repeat count
        CONSTRUCTOR FUNCTION aq$_reg_info(
          name             VARCHAR2,
          namespace        NUMBER,
          callback         VARCHAR2,
          context          RAW)
        RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION aq$_reg_info(
          name             VARCHAR2,
          namespace        NUMBER,
          callback         VARCHAR2,
          context          RAW,
          anyctx           SYS.ANYDATA,
          ctxtype          NUMBER)
        RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION aq$_reg_info(
          name             VARCHAR2,
          namespace        NUMBER,
          callback         VARCHAR2,
          context          RAW,
          qosflags         NUMBER,
          timeout          NUMBER)
        RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION aq$_reg_info(
          name             VARCHAR2,
          namespace        NUMBER,
          callback         VARCHAR2,
          context          RAW,
          anyctx           SYS.ANYDATA,
          ctxtype          NUMBER,
          qosflags         NUMBER,
          payloadcbk       VARCHAR2,
          timeout          NUMBER)
        RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION aq$_reg_info(
          name                       VARCHAR2,
          namespace                  NUMBER,
          callback                   VARCHAR2,
          context                    RAW,
          qosflags                   NUMBER,
          timeout                    NUMBER,
          ntfn_grouping_class        NUMBER,
          ntfn_grouping_value        NUMBER,
          ntfn_grouping_type         NUMBER,
          ntfn_grouping_start_time   TIMESTAMP WITH TIME ZONE,
          ntfn_grouping_repeat_count NUMBER)
        RETURN SELF AS RESULT
        )
 alter type     "SYS"."AQ$_REG_INFO" modify attribute
           (name varchar2(512)) CASCADE
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."AQ$_REG_INFO" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
176e 30a
xt75MaqDm1tk2xkdxOyLlSmviMkwg80rr0hufC/NrQ/uhBoUJRvy60FF/Dh8QOl/3y0HkfqV
/Gs7I949+bVr3//CMDfwCvVj320oqXMZX8ZB7t5LJgShkYPIriSu12RyD9fEuw8/L1BJRmk+
IeXsUcMUCkSV5p7hv7BgLWiOZrfBp6LjqfH3+VNb6eoOSG+k2NUOpIB3ARWJWz64QabtkEsN
88q6hjwNrAdtb8x09mzjyXoDr4Mm4q2jGrJ6OEKoo6P3OqWeecRDbi9xf9C09xtj30WzQD5s
PY2s5oJ4gCuSY07ZE/6xuxnRhVjHwJ8tfmJYWjuaQ9Sqv0acuS1SoAPQ+H7Budjq1tkZSigs
BQPRhMC4gR3AbTNWOTrnVt8RmnB4hGs3gBLPL7KVgZHkM/mS/1Lw4iLG+rEAi5B3iAdxJHLY
Du7TCexoYDap6fqR8PP750dG+o3YCuZdQMBQexhCKDTJzEePGzNlKqzmhuAsAMNaK9jgqUCX
ow6/BZRutcZuY2KVQ/okCucciMOnc9lxvmOpS31v7bdVRZv7dhPCdm3lMCGj6kFQk0zLUdG1
a8J0JZr+e1oGUif6aGM0UwwxDgf3t0n1b43q6+Ki4+sOPxV9yc3s+A6dsVtzLT95s5OVyw7g
syPf0VYSGIGI8G3ea1pxgircBbdO3qPIpd6jyM3eo8gn/sKZAekcnnENXpsWRP2CdCUi/hjH
ZM6eI5XzIaO/gFARbBxRCCV6N2DZgSF74oa5Oot4LVWISg==

/

  GRANT EXECUTE ON "SYS"."AQ$_REG_INFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_REG_INFO_LIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_REG_INFO_LIST" 
AS VARRAY(1024) OF sys.aq$_reg_info

/

  GRANT EXECUTE ON "SYS"."AQ$_REG_INFO_LIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_SIG_PROP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_SIG_PROP" 
                                                                      
 AS OBJECT
  (signature         RAW(2000),
   canalgo           varchar2(2000),
   digalgo           varchar2(2000),
   sigalgo           varchar2(2000),
   certificate       varchar2(2000),
   digval            RAW(2000))

/

  GRANT EXECUTE ON "SYS"."AQ$_SIG_PROP" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type AQ$_SRVNTFN_MESSAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_SRVNTFN_MESSAGE" AS OBJECT (
       queue_name        VARCHAR2(65),        -- name of the queue
       consumer_name     VARCHAR2(30),        -- name of the consumer
       msg_id            RAW(16),             -- message identifier
       priority          number,
       delay             number,
       expiration        number,
       correlation       varchar2(128),
       attempts          number,
       exception_queue   varchar2(51),
       enqueue_time      date,
       state             number,
       agent_name        varchar2(30),
       agent_address     varchar2(1024),
       agent_protocol    number,
       original_msgid    raw(16),
       sub_name          VARCHAR2(128),       -- name of the subscription
       sub_namespace     NUMBER,              -- namespace of the subscription
       sub_callback      VARCHAR2(4000),      -- callback function
       sub_context       RAW(2000),           -- context for the callback func.
       user_id           number,              -- user identifier
       payload           RAW(2000),
       payloadl          number,
       xmlpayload        VARCHAR2(4000),      -- payload in xml, if reqd.
       payloadt          number,              -- payload type, xml/default
       anysub_context    SYS.ANYDATA,         -- anydata context
       context_type      number,              -- RAW or ANYDATA context
       delivery_mode     number,              -- delivery mode
       ntfn_flags        number,              -- generic ntfn flags
       msgid_array       sys.aq$_ntfn_msgid_array,-- grp ntfn msg id array
       ntfnsRecdInGrp    number,                  -- ntfns recd in grp
       pblob             BLOB, -- for storing raw payload in 11 compatible mode
       reg_id            number,              -- registration id
       pdb               number)
 alter type "SYS"."AQ$_SRVNTFN_MESSAGE" modify attribute
          (queue_name varchar2(261),
           consumer_name varchar2(512),
           exception_queue varchar2(128),
           agent_name varchar2(512),
           sub_name varchar2(512)) CASCADE

/
--------------------------------------------------------
--  DDL for Type AQ$_SUBSCRIBER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_SUBSCRIBER" 
AS OBJECT (
  name          VARCHAR2(30), -- M_IDEN, name of a message producer or consumer
  address       VARCHAR2(1024),           -- address where message must be sent
  protocol      NUMBER,                -- protocol for communication, must be 0
  trans_name    VARCHAR2(61),                             -- tranformation name
  sub_type      NUMBER,                                      -- subscriber type
  rule_name     VARCHAR2(30),                                       --rule name
  subscriber_id NUMBER,                                        -- subscriber id
  pos_bitmap    NUMBER          -- subscriber position in bitmap for 12c queues
 )
 alter type     "SYS"."AQ$_SUBSCRIBER" modify attribute
           (name varchar2(512),
            trans_name varchar2(261),
            rule_name varchar2(128)) CASCADE

/

  GRANT EXECUTE ON "SYS"."AQ$_SUBSCRIBER" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."AQ$_SUBSCRIBER" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AQ$_SUBSCRIBERS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AQ$_SUBSCRIBERS" 
                                                                      
AS VARRAY(1024) OF sys.aq$_agent

/

  GRANT EXECUTE ON "SYS"."AQ$_SUBSCRIBERS" TO PUBLIC WITH GRANT OPTION;
  GRANT EXECUTE ON "SYS"."AQ$_SUBSCRIBERS" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type AUD_PDB_LIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AUD_PDB_LIST" IS VARRAY(4098) OF VARCHAR2(128);

/

  GRANT EXECUTE ON "SYS"."AUD_PDB_LIST" TO "AUDSYS";
--------------------------------------------------------
--  DDL for Type AWRBL_DETAILS_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRBL_DETAILS_TYPE" 
  as object (dbid                number
            ,baseline_id         number
            ,instance_number     number
            ,start_snap_id       number
            ,start_snap_time     timestamp(3)
            ,end_snap_id         number
            ,end_snap_time       timestamp(3)
            ,shutdown            varchar2(3)
            ,error_count         number
            ,pct_total_time      number)

/

  GRANT EXECUTE ON "SYS"."AWRBL_DETAILS_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRBL_DETAILS_TYPE_TABLE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRBL_DETAILS_TYPE_TABLE" 
  as table of AWRBL_DETAILS_TYPE

/

  GRANT EXECUTE ON "SYS"."AWRBL_DETAILS_TYPE_TABLE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRBL_METRIC_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRBL_METRIC_TYPE" force
  as object (baseline_name       varchar2(128)
            ,dbid                number
            ,instance_number     number
            ,beg_time            timestamp(3)
            ,end_time            timestamp(3)
            ,metric_name         varchar2(64)
            ,metric_unit         varchar2(64)
            ,num_interval        number
            ,interval_size       number
            ,average             number
            ,minimum             number
            ,maximum             number)

/

  GRANT EXECUTE ON "SYS"."AWRBL_METRIC_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRBL_METRIC_TYPE_TABLE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRBL_METRIC_TYPE_TABLE" 
  as table of AWRBL_METRIC_TYPE

/

  GRANT EXECUTE ON "SYS"."AWRBL_METRIC_TYPE_TABLE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRDRPT_TEXT_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRDRPT_TEXT_TYPE" 
  as object (output varchar2(320 CHAR))

/

  GRANT EXECUTE ON "SYS"."AWRDRPT_TEXT_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRDRPT_TEXT_TYPE_TABLE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRDRPT_TEXT_TYPE_TABLE" 
  as table of AWRDRPT_TEXT_TYPE

/

  GRANT EXECUTE ON "SYS"."AWRDRPT_TEXT_TYPE_TABLE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWR_EXPORT_DUMP_ID_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWR_EXPORT_DUMP_ID_TYPE" 
  AS
    OBJECT (
      src_name        VARCHAR2(30)
    , src_dbid        NUMBER
    , begin_snap      NUMBER
    , end_snap        NUMBER
    , db_name         VARCHAR2(30)
    , db_version      VARCHAR2(17)
    , wr_version      NUMBER
   )

/

  GRANT EXECUTE ON "SYS"."AWR_EXPORT_DUMP_ID_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWR_OBJECT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWR_OBJECT" authid current_user
  under generic_plan_object
(sql_id          varchar2(13),
 dbid            number,
 con_dbid        number,
 plan_hash_value number,
 constructor function awr_object(sql_id varchar2,
                                 dbid number default null,
                                 con_dbid number default null,
                                 plan_hash_value number default null)
   return self as result,
overriding member function get_plan_rows return sql_plan_table_type)
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."AWR_OBJECT" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
89d 477
qHhMjR14zNSzqmFlTZznYjd7PlUwg2NcuiATfI4Zxz8CYyIU99gioCXFKoMd+7A4ZlCrt9+u
px1+OAJnN9jZP3NK12KhhN/eK6KKx4baH6pLPe81XsZUqAhBTvVz79IMkUXW+yWkBQF361iE
s0cDMsl73yVBPr/oD/T/YLm3lS4dYirlcioj1lt9INl1rO3NYuhGZtZHIXLguKDYqrhEfOQk
aCxi14vH15BOY8lCXXGJLV/mvU5N8HHg18iLFbONJxZb7PFb66cbCb87Br5KgDKsuZ0OBaEK
JgrhFSex3o7PyNm13IMbOezJJK0/cvtIfHvzLnu0S2zfV9Y2P//xaSer6HOpb6IBBd8IN3zi
FWnBiAn2Aznd8kegJulX1vqmY1kcPLeAfRgDH+j8MSEQ9RLH/jpI2Geg+Vz6cqK3pQEm1cet
8sXHDfxKz0sRHsfUUfz0ZQCv52AgatUWqHTFJSqc8PXG8QfMctiOIH9y4C1DQpL/2RBvSmGY
V9RaABLBCl/xSxbp8TiJB/SFD5lfJVZH6Yhjur6NtemdqjJVzt+y5mh2Jf55dcSwO1p7jePv
UqijAlNhja3D5/F9xHRURmb+eGiuhkzhdWmO0oCXohxIDMsbFucDwNbMp2/MjYlPb2x66Ryi
uqbDuX+ju9mlCadDG0dCPrwLiFPDUleJYpbQRN6f88x5sGfp6ViAHkzwFgUInlyJKxP5QAKh
1G1Zzmn97vg4zKVWKNaFH2Ud0mIYDKkjyvxbibDC/56pdh1fGTxS/J3fpF6ttfIGCATjGkmX
WNVlIvZ7jP/hlPgGe1SZvDddQoJkF9dPwUbTKiXMqY9FVjuzEDIVDfVo1loDso7Y2pa+xvLA
+moHYXYjKhdoJ9FCCvbE85VAtY4I0X6skRNPzsO/Il+Eso8CKZ5gkidXJs4OY/ZUXQJ9HO+F
cVbjOCdLHuNR3395i6DNTQFB1b4D4FLYVP3EdPAkJbj4ZZB68qekdvVqYMvWQVPnQTM1y6Q9
KttMglh/TFPk6e0dDvMn9jwqbJmP9eKT/EdagO6MOa1ghNdUJ2HcX+5TSr/muQ3SjouPpgry
42qxHSLkgKnaU1s3KALtJoeldk1d0J2hyo1EOtJbRnFsIw==

/

  GRANT EXECUTE ON "SYS"."AWR_OBJECT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWR_OBJECT_INFO_TABLE_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWR_OBJECT_INFO_TABLE_TYPE" as table of AWR_OBJECT_INFO_TYPE

/
--------------------------------------------------------
--  DDL for Type AWR_OBJECT_INFO_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWR_OBJECT_INFO_TYPE" 
 as object (
             owner_name        VARCHAR2(128)
           , object_name       VARCHAR2(256)
           , subobject_name    VARCHAR2(256)
           , tablespace_name   VARCHAR2(64)
           , object_type       VARCHAR2(64)
           , partition_type    VARCHAR2(64)
           , index_type        VARCHAR2(64)
           , base_object_name  VARCHAR2(128)
           , base_object_owner VARCHAR2(128)
           , base_object_id    NUMBER
)

/
--------------------------------------------------------
--  DDL for Type AWRRPT_CLB_ARY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRRPT_CLB_ARY" IS VARRAY(30) OF CLOB

/

  GRANT EXECUTE ON "SYS"."AWRRPT_CLB_ARY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRRPT_HTML_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRRPT_HTML_TYPE" 
  as object (output varchar2(8000 CHAR))

/

  GRANT EXECUTE ON "SYS"."AWRRPT_HTML_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRRPT_HTML_TYPE_TABLE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRRPT_HTML_TYPE_TABLE" 
  as table of AWRRPT_HTML_TYPE

/

  GRANT EXECUTE ON "SYS"."AWRRPT_HTML_TYPE_TABLE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRRPT_INSTANCE_LIST_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRRPT_INSTANCE_LIST_TYPE" FORCE as TABLE OF NUMBER

/

  GRANT EXECUTE ON "SYS"."AWRRPT_INSTANCE_LIST_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRRPT_NUM_ARY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRRPT_NUM_ARY" IS VARRAY(30) of NUMBER

/

  GRANT EXECUTE ON "SYS"."AWRRPT_NUM_ARY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRRPT_NUMBER_LIST_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRRPT_NUMBER_LIST_TYPE" FORCE as TABLE OF NUMBER

/

  GRANT EXECUTE ON "SYS"."AWRRPT_NUMBER_LIST_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRRPT_ROW_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRRPT_ROW_TYPE" 
  as object ( num_dfn AWRRPT_NUM_ARY,
              vch_dfn AWRRPT_VCH_ARY,
              clb_dfn AWRRPT_CLB_ARY)

/

  GRANT EXECUTE ON "SYS"."AWRRPT_ROW_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRRPT_TEXT_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRRPT_TEXT_TYPE" 
  as object (output varchar2(80 CHAR))

/

  GRANT EXECUTE ON "SYS"."AWRRPT_TEXT_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRRPT_TEXT_TYPE_TABLE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRRPT_TEXT_TYPE_TABLE" 
  as table of AWRRPT_TEXT_TYPE

/

  GRANT EXECUTE ON "SYS"."AWRRPT_TEXT_TYPE_TABLE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRRPT_VARCHAR256_LIST_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRRPT_VARCHAR256_LIST_TYPE" as TABLE OF VARCHAR2(256)

/

  GRANT EXECUTE ON "SYS"."AWRRPT_VARCHAR256_LIST_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRRPT_VCH_ARY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRRPT_VCH_ARY" IS VARRAY(30) OF VARCHAR2(80 CHAR)

/

  GRANT EXECUTE ON "SYS"."AWRRPT_VCH_ARY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRSQRPT_TEXT_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRSQRPT_TEXT_TYPE" 
  as object (output varchar2(120 CHAR))

/

  GRANT EXECUTE ON "SYS"."AWRSQRPT_TEXT_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type AWRSQRPT_TEXT_TYPE_TABLE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."AWRSQRPT_TEXT_TYPE_TABLE" 
  as table of AWRSQRPT_TEXT_TYPE

/

  GRANT EXECUTE ON "SYS"."AWRSQRPT_TEXT_TYPE_TABLE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CANSYNCREFARRAYTYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CANSYNCREFARRAYTYPE" AS VARRAY(256) OF
Sys.CanSyncRefMessage;

/

  GRANT EXECUTE ON "SYS"."CANSYNCREFARRAYTYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CANSYNCREFMESSAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CANSYNCREFMESSAGE" FORCE IS OBJECT (
          schema_name        VARCHAR2(128),
          table_name         VARCHAR2(128),
          mv_schema_name     VARCHAR2(128),
          mv_name            VARCHAR2(128),
          eligible           VARCHAR2(1),
          seq_num            NUMBER,
          msg_number         NUMBER,
          message            VARCHAR2(4000));

/

  GRANT EXECUTE ON "SYS"."CANSYNCREFMESSAGE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CHNF$_DESC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CHNF$_DESC" as object(
   registration_id number,
   transaction_id  raw(8),
   dbname          varchar2(30),
   event_type      number,
   numtables       number,
   table_desc_array   chnf$_tdesc_array,
   query_desc_array   chnf$_qdesc_array)

/

  GRANT EXECUTE ON "SYS"."CHNF$_DESC" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."CHNF$_DESC" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CHNF$_QDESC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CHNF$_QDESC" as object(
    queryid number,
    queryop number,
    table_desc_array chnf$_tdesc_array)

/

  GRANT EXECUTE ON "SYS"."CHNF$_QDESC" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."CHNF$_QDESC" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CHNF$_QDESC_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CHNF$_QDESC_ARRAY" as VARRAY(1073741824) of chnf$_qdesc

/

  GRANT EXECUTE ON "SYS"."CHNF$_QDESC_ARRAY" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."CHNF$_QDESC_ARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CHNF$_RDESC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CHNF$_RDESC" as object(
   opflags number,
   row_id varchar2(2000))

/

  GRANT EXECUTE ON "SYS"."CHNF$_RDESC" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CHNF$_RDESC_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CHNF$_RDESC_ARRAY" as VARRAY(1073741824) of chnf$_rdesc

/

  GRANT EXECUTE ON "SYS"."CHNF$_RDESC_ARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CHNF$_REG_INFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CHNF$_REG_INFO" as object (
       callback varchar2(64),
       qosflags number,
       timeout number,
       operations_filter number,
       transaction_lag number,
       ntfn_grouping_class        NUMBER,    -- ntfn grouping class
       ntfn_grouping_value        NUMBER,    -- ntfn grouping value
       ntfn_grouping_type         NUMBER,    -- ntfn grouping type
       ntfn_grouping_start_time   TIMESTAMP WITH TIME ZONE, -- grp start time
       ntfn_grouping_repeat_count NUMBER,    -- ntfn grp repeat count
       CONSTRUCTOR FUNCTION chnf$_reg_info(
         callback varchar2,
         qosflags number,
         timeout number)
       RETURN SELF AS RESULT ,   -- basic type without any frills
       CONSTRUCTOR FUNCTION chnf$_reg_info(
         callback varchar2,
         qosflags number,
         timeout number,
         operations_filter number,
         transaction_lag number)  -- 10gR2 type for backward compat
       RETURN SELF AS RESULT,
       CONSTRUCTOR FUNCTION chnf$_reg_info(
         callback varchar2,
         qosflags number,
         timeout number,
         operations_filter number,
         ntfn_grouping_class        NUMBER,
         ntfn_grouping_value        NUMBER,
         ntfn_grouping_type         NUMBER,
         ntfn_grouping_start_time   TIMESTAMP WITH TIME ZONE,
         ntfn_grouping_repeat_count NUMBER)
         RETURN SELF AS RESULT
         )                    -- depracating the transaction_lag param
 alter type     "SYS"."CHNF$_REG_INFO" modify attribute callback varchar2(257)
  cascade
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."CHNF$_REG_INFO" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
97c 21b
aVwiwup1rYFuv5/hDPcx3GaEMIAwg81cLdxqfC8BuepoUPsURi/v469SzXcVAFv4ccNvKOPh
DPfOtTdToZ7cJU0mNpmRWl0SuzFJmhKeO577WFg7jykyA0FA0MGcpWGTnR3HtqaPOaSTcvpU
yBytPtbdwRawrxh6FomLIZtmjd6Qfz9bS5Gncljte2T3EoYayb4d0m1ZtOhZJ6hfsEUjOS8e
K8jE59wRk2Fp0ZCxjjflT1ldnvYQXXHPkINC4iC/AFXPnIqDKY0hEWbeo82cdxFRfAJLVhmn
mQne09/MceiYukBKebvfiYDEn66+WtOESPCWjos39otoN2hs64d2hWN9GB2+SnVjL7sOBlGx
I6lI6agEREh6CQ0yFDzkJ5LMYrhvJJ0er+iDpIcMPau0/6+qhRWk9UZjun1PIc487lxzVLe1
TcZbi3yiWUB8olkbfKJZ4iQ/lxVRqVvpTs3THLIYP95lGHsaEraetfMAm2Tr1krj3ih7ZlNM
9Vnx/g7vJe0spONzkdOaSU/koHyv

/

  GRANT EXECUTE ON "SYS"."CHNF$_REG_INFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CHNF$_REG_INFO_OC4J
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CHNF$_REG_INFO_OC4J" as object (
       network_ip_address varchar2(128),
       network_port number,
       qosflags number,
       timeout number,
       operations_filter number,
       transaction_lag number)

/

  GRANT EXECUTE ON "SYS"."CHNF$_REG_INFO_OC4J" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CHNF$_TDESC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CHNF$_TDESC" as object(
   opflags number,
   table_name varchar2(64),
   numrows number,
   row_desc_array chnf$_rdesc_array)
 alter type "SYS"."CHNF$_TDESC" modify attribute table_name varchar2(257)
  cascade

/

  GRANT EXECUTE ON "SYS"."CHNF$_TDESC" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."CHNF$_TDESC" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CHNF$_TDESC_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CHNF$_TDESC_ARRAY" as VARRAY(1073741824) of chnf$_tdesc

/

  GRANT EXECUTE ON "SYS"."CHNF$_TDESC_ARRAY" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."CHNF$_TDESC_ARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type COAD_ADVICE_REC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."COAD_ADVICE_REC" as OBJECT (
     owner       dbms_id,
     apiObject   dbms_id,
     sqlObjOwn   dbms_id,
     sqlObject   varchar2(261),
     adviceType  number(38,0),
     disposition clob,
     sqlText     clob,
     dropText    clob )

/
--------------------------------------------------------
--  DDL for Type COAD_ADVICE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."COAD_ADVICE_T" is table of coad_advice_rec

/
--------------------------------------------------------
--  DDL for Type COLDICTREC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."COLDICTREC" FORCE AS OBJECT(
  col_name   dbms_id,  -- bug # 19366477 - changed from VARCHAR2(30) to dbms_id
  col_type   number,
  col_def    varchar2(32767),
  col_null   number,
  col_flag   number,
  col_prop   number,
  col_unum   number,
  col_inum   number,
  col_obj    number,
  col_scale  number,
  h_bcnt     number,
  h_pfreq    number,
  col_len    number,
  cu_time    date,
  cu_ep      number,
  cu_ejp     number,
  cu_rp      number,
  cu_lp      number,
  cu_nejp    number,
  cu_np      number
);

/
--------------------------------------------------------
--  DDL for Type COLDICTTAB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."COLDICTTAB" AS TABLE OF COLDICTREC;

/
--------------------------------------------------------
--  DDL for Type COLHISTREC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."COLHISTREC" FORCE AS OBJECT(
    cind    integer,                    -- index into CRec structure
    bval    integer,                    -- bucket value
    edval   varchar2(240),              -- endpoint dump value
    enval   number,                     -- endpoint normalized value
    eaval   raw(64),                    -- endpoint actual value
    maxrep  number                      -- used to build freq hisotgrams
);

/
--------------------------------------------------------
--  DDL for Type COLHISTTAB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."COLHISTTAB" AS TABLE OF COLHISTREC;

/
--------------------------------------------------------
--  DDL for Type CREATE_TABLE_COST_COLINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CREATE_TABLE_COST_COLINFO" is object
  (
                         col_type varchar(200),
                         col_size number
  )

/

  GRANT EXECUTE ON "SYS"."CREATE_TABLE_COST_COLINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CREATE_TABLE_COST_COLUMNS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CREATE_TABLE_COST_COLUMNS" is varray(50000) of create_table_cost_colinfo

/

  GRANT EXECUTE ON "SYS"."CREATE_TABLE_COST_COLUMNS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type CREC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CREC" FORCE AS OBJECT(
    name    dbms_id,                    -- bug # 19366477 - changed from
    type    number,                     -- c.type#
    sel     dbms_quoted_id,             -- select list item
    def     varchar2(32767),            -- c.default$
    alias   varchar2(30),               -- alias (null if unnecessary)
    nlable  number,                     -- c.null$
    unq     number,                     -- unique if not null
    ucol    number,                     -- c.col#
    icol    number,                     -- c.intcol#
    fixlen  number,                     -- fixed column length
    maxlen  number,                     -- max column length
    hind    integer,                    -- index into first ColHistTab entry
    pfreq   number,                     -- avg frequency based on previously
    gather  integer,                    -- flags indicating basic stats
    hgath   integer,                    -- flags indicating histograms
    bktnum  integer,                    -- # buckets for this histogram
    hreq    integer,                    -- histogram collection required
    freq    integer,                    -- frequency histogram if true
    aclonly integer,                    -- 3620168: only get avg col len
    snnv    number,                     -- sample number of non-null values
    sndv    number,                     -- sample number of distinct values
    snnvdv  number,                     -- sample non-null for dv
    slsv    number,                     -- linearly scalable values in sample
    nnv     number,                     -- number of non-null values
    nv      number,                     -- number of null values
    ndv     number,                     -- number of distinct values
    acl     number,                      -- average column length
    ccnt    number,                     -- > 0 if have histograms
    dens    number,                     -- density
    minval  raw(64),                    -- minimum
    maxval  raw(64),                    -- maximum
    nmin    number,                     -- normalized minimum
    nmax    number,                     -- normalized maximum
    dmin    varchar2(240),              -- 'dump'ed minimum
    dmax    varchar2(240)               -- 'dump'ed maximum
  );

/
--------------------------------------------------------
--  DDL for Type CSVLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CSVLIST" as table of varchar2(300)

/
--------------------------------------------------------
--  DDL for Type CTAB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CTAB" AS TABLE OF CREC;

/
--------------------------------------------------------
--  DDL for Type CTXAGGIMP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CTXAGGIMP" 
   authid current_user as object
(
  key RAW(8),

  static function ODCIAggregateInitialize(sctx OUT CtxAggimp, outopn IN RAW,
                                          inpopn IN RAW ) return pls_integer
    is language c
    name "KciCtxAggInitialize"
    library kci_ctxagg_lib
    with context
    parameters (
      context,
      sctx, sctx INDICATOR STRUCT, sctx DURATION OCIDuration,
      outopn OCIRaw,
      inpopn OCIRaw,
      return INT
    ),

  member function ODCIAggregateIterate(self IN OUT NOCOPY CtxAggimp,
                                       value IN AnyData) return pls_integer
    is language c
    name "KciCtxAggIterate"
    library kci_ctxagg_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      value, value INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateTerminate(self IN OUT NOCOPY CtxAggimp,
                                         returnValue OUT BLOB,
                                         flags IN number)
                  return pls_integer
    is language c
    name "KciCtxAggTerminate"
    library kci_ctxagg_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT,
      returnValue, returnValue INDICATOR sb2, returnValue DURATION OCIDuration,
      flags, flags INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateMerge(self IN OUT NOCOPY CtxAggimp,
                                     valueB IN CtxAggimp) return pls_integer
    is language c
    name "KciCtxAggMerge"
    library kci_ctxagg_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      valueB, valueB INDICATOR STRUCT,
      return INT
    ),

  member function ODCIAggregateWrapContext(self IN OUT NOCOPY CtxAggimp)
                  return pls_integer
    is language c
    name "KciCtxAggWrap"
    library kci_ctxagg_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      return INT
    )
);

/
--------------------------------------------------------
--  DDL for Type CURSOR_CACHE_OBJECT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."CURSOR_CACHE_OBJECT" authid current_user
  under generic_plan_object
(sql_id       varchar2(13),
 child_number number,
 constructor function cursor_cache_object(sql_id varchar2,
                                          child_number number default null)
   return self as result,
 overriding member function get_plan_rows return sql_plan_table_type)
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."CURSOR_CACHE_OBJECT" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
6e6 3cd
oq1Twi8+BOCNjnm9uy2ENG0E4yQwg2NcVSATfC+ax7UYt5IvZukQfRpcJ6Bb4G5A9Gf2WYN6
k0Ywsv0PRIB5M7G7dEYaTIUbsum0F5pzub8scc6bQRXbA6cvednFlumOYP0+mz0oiD5Lc22Z
pga+Ihf77hzW3o/TSBLRyKk6HLbbFILFNPp48lPuJFcVYXA4ZWWCMYHnebU6qIIFLUb9R0mJ
NZhU9Sc5y4CzUkAqBIx6cNHOd1isKYx9HhIavXxrv2G61SkFChLG9QK7RF9pU3OesYZqXAy2
rhNVsz3ab024VtDQBH0AMrPT6uRCmZd1eTG5pEfeeQVDKUrAzMc4GYzovtCmALHGaG5Xw7hW
HYc8N6Z6NoliRKoGTMXwcrF4D0hAYus8b9xrETx7D4bRbA3XW3HDI4hx4IVU38rocrIGraN8
Iycr7RRRWhVZiToKaZjmqzHfoWBpnRIe2AbDK8VZbSvzm+anaxhOWSCBo4H9eAAWws9igBKo
qteRMaGTdRziFRTLcg4N+f1MpGdqyvCq3t3yQAGg88xBfl5dNghFLCbnDFg+N8VLpwKDXw6F
ClO9xZfVArtLccaI0wmY89if8kFtCXmRPsPOX3x15Qk99odugWQnv7ICUwkBNOawlSshuYY0
MdKc6egCTRh8FRRGzBQK8o5joku7UlHILmLS+JbHkNt7h0yP8zTY8XqSvpaApFC67HQHzvQz
Dm4RaO6hPT5Oi2nViB5co/R4VUbqcgn0n4c4JCvUO0hyxyr4+Mf9eQaR8FUzJMod66N10Ws8
cDB7dtCTV3YbDH5L2a9TOiEo1pkXl7Zs+7BwcsF3wi5opLwxK5WfvrFDZACZzwAj7N7fknyg
e5Hmu4Gi/DAA/02ZHE/Mix28Ve8V+PvABMCqdOIz0u+KlfMzFfXhxbhlBrXU2ltbzu+PhmqH
JxdWE/TkPxkGJsuP6yDrPTsq

/

  GRANT EXECUTE ON "SYS"."CURSOR_CACHE_OBJECT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_AW$_COLUMNLIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_AW$_COLUMNLIST_T" AS TABLE OF VARCHAR2(300)

/

  GRANT EXECUTE ON "SYS"."DBMS_AW$_COLUMNLIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_AW$_DIMENSION_SOURCES_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_AW$_DIMENSION_SOURCES_T" 
   AS TABLE OF dbms_aw$_dimension_source_t

/

  GRANT EXECUTE ON "SYS"."DBMS_AW$_DIMENSION_SOURCES_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_AW$_DIMENSION_SOURCE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_AW$_DIMENSION_SOURCE_T" AS OBJECT
   (dimname     VARCHAR2(300),
    columnname  VARCHAR2(300),
    sourcevalue VARCHAR2(32767),
    dimtype     NUMBER(3,0),
    hiercols    dbms_aw$_columnlist_t,
    partby      NUMBER(10,0))

/

  GRANT EXECUTE ON "SYS"."DBMS_AW$_DIMENSION_SOURCE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_CLRPARAMTABLE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_CLRPARAMTABLE" AS TABLE OF DBMS_CLRType;

/
--------------------------------------------------------
--  DDL for Type DBMS_CLRTYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_CLRTYPE" FORCE AS OBJECT (
  paramType             NUMBER(2),
  paramNull             NUMBER(2),
  paramDirection        NUMBER(2),
  typemapping           NUMBER(4),
  intParam              INTEGER,
  floatParam            BINARY_FLOAT,
  doubleParam           BINARY_DOUBLE,
  numberParam           NUMBER,
  dateParam             DATE,
  timestampParam        TIMESTAMP,
  timestampTZParam      TIMESTAMP WITH TIME ZONE,
  timestampLTZParam     TIMESTAMP WITH LOCAL TIME ZONE,
  intervalDSParam       INTERVAL DAY TO SECOND,
  intervalYMParam       INTERVAL YEAR TO MONTH,
  charParam             VARCHAR2(32767),
  varcharParam          VARCHAR2(32767),
  longParam             VARCHAR2(32760),
  ncharParam            NVARCHAR2(32767),
  nvarcharParam         NVARCHAR2(32767),
  rawParam              RAW(32767),
  longRawParam          RAW(32760),
  clobParam             CLOB,
  nclobParam            NCLOB,
  bfileParam            BFILE,
  blobParam             BLOB,
  rowidParam            VARCHAR2(18),
  xmltypeParam          XMLType,
  CONSTRUCTOR FUNCTION DBMS_CLRType(paramType IN BINARY_INTEGER,
    paramDirection IN BINARY_INTEGER, typemapping IN BINARY_INTEGER)
    RETURN SELF AS RESULT
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."DBMS_CLRTYPE" wrapped
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
41f 199
m6WGBxMZmszs729iboPhfjA4VcUwgwK3AK5qfC9AWPjVSDa9qC0Jf87VryU6dpByeWol9JCN
qq5u498nLQOiYU/BAE+2gNSvN0qfNgqEe/2ROjr54U+fphsJ0/9gZoSc+uPQ9T3oj4YOVAJl
4a4OAD4cckHbgUpPsOGmA3AAmGzPIDWhWyp0QZIS5CEfOElYvfFqy8Ps6D6MVmInsRLsY+YP
4nM07WoBwp3zFu9v7oFvcf1zbQ8rK/xFhvq6Luol9am+Z3+XP9V3OMNcEQs8fSeJwFBKCpNs
PRrOj/FNfH6em74mcFU+LEoonnmDZdRpgkcH5UEIDlMCfwkPEEI7ynmOyTJ+zTHdOYzixHep
RU6BEw79NUqAIPaljktotKqlmxONLe+Ymo3GapbiOkT1

/
--------------------------------------------------------
--  DDL for Type DBMS_CUBE_UTIL_DFLT_MSR_R
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_CUBE_UTIL_DFLT_MSR_R" 
  as object (owner             dbms_id,
             cube_name         dbms_id,
             default_measure   dbms_id )

/

  GRANT EXECUTE ON "SYS"."DBMS_CUBE_UTIL_DFLT_MSR_R" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_CUBE_UTIL_DFLT_MSR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_CUBE_UTIL_DFLT_MSR_T" 
  as table of dbms_cube_util_dflt_msr_r

/

  GRANT EXECUTE ON "SYS"."DBMS_CUBE_UTIL_DFLT_MSR_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_CUBE_UTIL_EXT_MD_R
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_CUBE_UTIL_EXT_MD_R" 
  as object (owner             dbms_id,
             dimension_name    dbms_id,
             hierarchy_name    dbms_id,
             default_member    varchar2(4000),
             depth_count       number,
             depth             number,
             depth_cardinality number)

/

  GRANT EXECUTE ON "SYS"."DBMS_CUBE_UTIL_EXT_MD_R" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_CUBE_UTIL_EXT_MD_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_CUBE_UTIL_EXT_MD_T" 
  as table of dbms_cube_util_ext_md_r

/

  GRANT EXECUTE ON "SYS"."DBMS_CUBE_UTIL_EXT_MD_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_DBFS_CONTENT_CONTEXT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_DBFS_CONTENT_CONTEXT_T" 
    authid definer
as object (
    principal   varchar2(32),
    acl         varchar2(1024),
    owner       varchar2(32),
    asof        timestamp,
    read_only   integer
);

/

  GRANT EXECUTE ON "SYS"."DBMS_DBFS_CONTENT_CONTEXT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_DBFS_CONTENT_LIST_ITEMS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_DBFS_CONTENT_LIST_ITEMS_T" 
    as table of dbms_dbfs_content_list_item_t;

/

  GRANT EXECUTE ON "SYS"."DBMS_DBFS_CONTENT_LIST_ITEMS_T" TO "DBFS_ROLE";
  GRANT EXECUTE ON "SYS"."DBMS_DBFS_CONTENT_LIST_ITEMS_T" TO "XDB";
--------------------------------------------------------
--  DDL for Type DBMS_DBFS_CONTENT_LIST_ITEM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_DBFS_CONTENT_LIST_ITEM_T" 
    authid definer
as object (
    path        varchar2(1024),
    item_name   varchar2(256),
    item_type   integer
);

/

  GRANT EXECUTE ON "SYS"."DBMS_DBFS_CONTENT_LIST_ITEM_T" TO "DBFS_ROLE";
  GRANT EXECUTE ON "SYS"."DBMS_DBFS_CONTENT_LIST_ITEM_T" TO "XDB";
--------------------------------------------------------
--  DDL for Type DBMS_DBFS_CONTENT_PROPERTIES_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_DBFS_CONTENT_PROPERTIES_T" as
    table of dbms_dbfs_content_property_t;

/

  GRANT EXECUTE ON "SYS"."DBMS_DBFS_CONTENT_PROPERTIES_T" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."DBMS_DBFS_CONTENT_PROPERTIES_T" TO "XDB";
--------------------------------------------------------
--  DDL for Type DBMS_DBFS_CONTENT_PROPERTY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_DBFS_CONTENT_PROPERTY_T" 
    authid definer
as object (
    propname    varchar2(32),
    propvalue   varchar2(1024),
    typecode    integer
);

/

  GRANT EXECUTE ON "SYS"."DBMS_DBFS_CONTENT_PROPERTY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_DBFS_CONTENT_RAW_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_DBFS_CONTENT_RAW_T" 
    as table of raw(32767);

/

  GRANT EXECUTE ON "SYS"."DBMS_DBFS_CONTENT_RAW_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_DBFS_HS_ITEM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_DBFS_HS_ITEM_T" 
    authid definer
as object (
    storename  varchar2(ORA_MAX_NAME_LEN),
    storeowner varchar2(ORA_MAX_NAME_LEN),
    path        varchar2(1024),
    contentfilename   varchar2(1024)
);

/
--------------------------------------------------------
--  DDL for Type DBMS_DBFS_HS_LITEMS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_DBFS_HS_LITEMS_T" 
    as table of dbms_dbfs_hs_item_t;

/
--------------------------------------------------------
--  DDL for Type DBMS_DEBUG_VC2COLL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_DEBUG_VC2COLL" is table of varchar2(1000)

/

  GRANT EXECUTE ON "SYS"."DBMS_DEBUG_VC2COLL" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_LOBUTIL_DEDUPSET_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_LOBUTIL_DEDUPSET_T" AS OBJECT
(
    ismem   VARCHAR(1),     -- is this lob a member of a dedup set? (Y/N)
    setid   RAW(10),        -- deduplication setid
    lobid   RAW(10),        -- this lobid
    nmem    NUMBER,         -- number of members in set
    fhash   RAW(80),        -- full hash of set
    phash   RAW(80)         -- prefix hash of set
);

/

  GRANT EXECUTE ON "SYS"."DBMS_LOBUTIL_DEDUPSET_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_LOBUTIL_INODE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_LOBUTIL_INODE_T" AS OBJECT
(
    lobid   RAW(10),    -- lobid
    flags   NUMBER,     -- inode flags
    length  NUMBER,     -- lob length
    version NUMBER,     -- lob version
    extents NUMBER,     -- #extents in inode
    lhb     NUMBER      -- lhb dba
);

/

  GRANT EXECUTE ON "SYS"."DBMS_LOBUTIL_INODE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_LOBUTIL_LOBEXTENTS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_LOBUTIL_LOBEXTENTS_T" 
    AS
    TABLE OF dbms_lobutil_lobextent_t;

/

  GRANT EXECUTE ON "SYS"."DBMS_LOBUTIL_LOBEXTENTS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_LOBUTIL_LOBEXTENT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_LOBUTIL_LOBEXTENT_T" FORCE AS OBJECT
(
    rid     VARCHAR(32),    -- rowid proxy
    row#    NUMBER,         -- rownum proxy
    lobid   RAW(10),        -- lobid
    extent# NUMBER,         -- extent# [0 .. ] for a lobmap
    hole    VARCHAR(1),     -- is the extent a hole? (y/n)
    cont    VARCHAR(1),     -- is the extent a superchunk continuation? (y/n)
    over    VARCHAR(1),     -- is the chunk an overallocation? (y/n)
    rdba    NUMBER,         -- rdba of extent start
    nblks   NUMBER,         -- #blocks in extent
    offset  NUMBER,         -- logical offset of extent start
    length  NUMBER          -- logical length of extent
);

/

  GRANT EXECUTE ON "SYS"."DBMS_LOBUTIL_LOBEXTENT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_LOBUTIL_LOBMAP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_LOBUTIL_LOBMAP_T" AS OBJECT
(
    lobid   RAW(10),    -- lobid
    eflag   NUMBER,     -- extent flags
    rdba    NUMBER,     -- extent header rdba
    nblks   NUMBER,     -- #blocks in extent
    offset  NUMBER,     -- offset of extent header
    length  NUMBER      -- logical length of extent
);

/

  GRANT EXECUTE ON "SYS"."DBMS_LOBUTIL_LOBMAP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_MDX_ODBO_FUNCTION_R
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_MDX_ODBO_FUNCTION_R" FORCE AS OBJECT(
    FUNCTION_NAME VARCHAR2(128),
    CAPTION VARCHAR2(128),
    DESCRIPTION VARCHAR2(1000),
    PARAM_LIST VARCHAR2(1000),
    INTERFACE_NAME VARCHAR2(128),
    object VARCHAR2(128))

/

  GRANT EXECUTE ON "SYS"."DBMS_MDX_ODBO_FUNCTION_R" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_MDX_ODBO_FUNCTION_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_MDX_ODBO_FUNCTION_T" AS TABLE OF
    DBMS_MDX_ODBO_FUNCTION_R

/

  GRANT EXECUTE ON "SYS"."DBMS_MDX_ODBO_FUNCTION_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_MDX_ODBO_KEYWORD_R
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_MDX_ODBO_KEYWORD_R" FORCE AS OBJECT(
    KEYWORD_NAME VARCHAR2(128))

/

  GRANT EXECUTE ON "SYS"."DBMS_MDX_ODBO_KEYWORD_R" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_MDX_ODBO_KEYWORD_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_MDX_ODBO_KEYWORD_T" AS TABLE OF
    DBMS_MDX_ODBO_KEYWORD_R

/

  GRANT EXECUTE ON "SYS"."DBMS_MDX_ODBO_KEYWORD_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_MDX_ODBO_PROPVAL_R
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_MDX_ODBO_PROPVAL_R" FORCE AS OBJECT(
    PROPERTY_VALUE NUMBER)

/

  GRANT EXECUTE ON "SYS"."DBMS_MDX_ODBO_PROPVAL_R" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_MDX_ODBO_PROPVAL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_MDX_ODBO_PROPVAL_T" AS TABLE OF
    DBMS_MDX_ODBO_PROPVAL_R

/

  GRANT EXECUTE ON "SYS"."DBMS_MDX_ODBO_PROPVAL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_OBJECTS_UTILS_TINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_OBJECTS_UTILS_TINFO" as object (
name       dbms_id,
objid      number,
toid       raw(16),
hashcode   raw(17),
version    number,
stime      date
);

/
--------------------------------------------------------
--  DDL for Type DBMS_OBJECTS_UTILS_TNAME
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_OBJECTS_UTILS_TNAME" force as object (
schema  varchar2(128),
typname varchar2(128)
);

/
--------------------------------------------------------
--  DDL for Type DBMS_OBJECTS_UTILS_TNAMEARR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_OBJECTS_UTILS_TNAMEARR" as table of
dbms_objects_utils_tname;

/
--------------------------------------------------------
--  DDL for Type DBMS_OBJECTS_UTILS_TSELEM
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_OBJECTS_UTILS_TSELEM" force as object (
objid     number,
source    varchar2(4000)
);

/
--------------------------------------------------------
--  DDL for Type DBMS_OBJECTS_UTILS_TSOURCE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_OBJECTS_UTILS_TSOURCE" as varray(100) of
dbms_objects_utils_tselem;

/
--------------------------------------------------------
--  DDL for Type DBMSOUTPUT_LINESARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMSOUTPUT_LINESARRAY" IS
  VARRAY(2147483647) OF VARCHAR2(32767);

/

  GRANT EXECUTE ON "SYS"."DBMSOUTPUT_LINESARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_RESULT_CACHE_NSP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_RESULT_CACHE_NSP" is VARRAY(100) OF VARCHAR2(100);

/
--------------------------------------------------------
--  DDL for Type DBMS_RESULT_CACHE_SUM
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_RESULT_CACHE_SUM" is VARRAY(100) OF NUMBER;

/
--------------------------------------------------------
--  DDL for Type DBMSSTATNUMTAB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMSSTATNUMTAB" AS TABLE OF Number;

/
--------------------------------------------------------
--  DDL for Type DBMS_UADV_ARR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_UADV_ARR" as VARRAY(100) of NUMBER;

/

  GRANT EXECUTE ON "SYS"."DBMS_UADV_ARR" TO "DBA";
--------------------------------------------------------
--  DDL for Type DBMS_XA_XID
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_XA_XID" FORCE as OBJECT (
  FORMATID NUMBER,
  GTRID RAW(64),
  BQUAL RAW(64),
  constructor function DBMS_XA_XID(GTRID in NUMBER)
    return self as result,
  constructor function DBMS_XA_XID(GTRID in RAW, BQUAL in RAW)
    return self as result,
  constructor function DBMS_XA_XID(
      FORMATID in NUMBER,
      GTRID in RAW,
      BQUAL in RAW default HEXTORAW('00000000000000000000000000000001'))
    return self as result
)
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."DBMS_XA_XID" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
355 171
gDqnF0l1hQJlIb9MQFAyHZO6yDcwgzsJr9wdqC+BiupHO3klIblchvtvVKGfNQeoVQD3TXO1
D32mDeIuCycry3wdTosIHFDS5TUjKjfxhFqMWoxcyhUAZx5Myl9iQja2TAw8mEI9Re9dox9b
JlJqpqZ3jrM1UO3uHG5AtLa0aC78/0UJia6/1IbK4+7Qci8mrhYzmCs28l23oNyPidjvVd5x
ZBwi7GrBEuvY366assU6bIMOLNEIY8DLjSDM0oiSUYBvSTNZCPhXXuo3rTzcCMCYLjz7gnlr
8bF+9N6ZTNWvKq7yuFyKYqOZy4/PzDyTtcYz9ZtqX+sZaNNpg+PYtZYgA9vGZM5PWZfrVfPr
wP9R

/

  GRANT EXECUTE ON "SYS"."DBMS_XA_XID" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_XA_XID_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_XA_XID_ARRAY" as TABLE of DBMS_XA_XID

/

  GRANT EXECUTE ON "SYS"."DBMS_XA_XID_ARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_XPLAN_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_XPLAN_TYPE" FORCE
  as object (plan_table_output varchar2(4000));

/

  GRANT EXECUTE ON "SYS"."DBMS_XPLAN_TYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_XPLAN_TYPE_TABLE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_XPLAN_TYPE_TABLE" 
  as table of dbms_xplan_type;

/

  GRANT EXECUTE ON "SYS"."DBMS_XPLAN_TYPE_TABLE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_XS_NSATTR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_XS_NSATTR" FORCE AS OBJECT
(
  --- Member variables
  namespace        varchar2(130),  /* Namespace name, 128 + 2 = 130 char
                                      long to allow case sensitive (double
                                      quoted) 128 char namespace names   */
  attribute        varchar2(4000),                     /* Attribute name */
  attribute_value  varchar2(4000),                    /* Attribute value */

  --- Constructor for DBMS_XS_NSATTR type
  --- Only namespace name is mandatory
  CONSTRUCTOR FUNCTION DBMS_XS_NSATTR(
     namespace         IN VARCHAR2,
     attribute         IN VARCHAR2 DEFAULT NULL,
     attribute_value   IN VARCHAR2 DEFAULT NULL)
  RETURN SELF AS RESULT
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."DBMS_XS_NSATTR" AS
  CONSTRUCTOR FUNCTION DBMS_XS_NSATTR(
     namespace         IN VARCHAR2,
     attribute         IN VARCHAR2 DEFAULT NULL,
     attribute_value   IN VARCHAR2 DEFAULT NULL)
  RETURN SELF AS RESULT
  AS
  BEGIN
    SELF.namespace := namespace;
    SELF.attribute := attribute;
    SELF.attribute_value := attribute_value;
    RETURN;
  END;
END;

/

  GRANT EXECUTE ON "SYS"."DBMS_XS_NSATTR" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBMS_XS_NSATTRLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBMS_XS_NSATTRLIST" AS VARRAY(1000) OF DBMS_XS_NSATTR;

/

  GRANT EXECUTE ON "SYS"."DBMS_XS_NSATTRLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DBURITYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DBURITYPE" 
  authid current_user under sys.UriType
(
 -- url varchar2(4000),
  spare raw(2000),
  overriding member function getExternalUrl return varchar2 deterministic,
  overriding member function getUrl return varchar2 deterministic,
  -- returns the clob value of the pointed to URL
  overriding member function getClob RETURN clob,
  overriding member function getBlob RETURN blob,
  overriding member function getBlob(csid IN NUMBER) RETURN blob,
  static function createuri(dburi in varchar2) return dburitype,
  -- new fcns in 9.2
  overriding member function getXML return sys.XMLType,
  constructor function DBUriType(url in varchar2, spare in raw := null)
    return self as result,
  overriding member function getContentType RETURN varchar2,
  overriding member function getClob(content OUT varchar2) RETURN clob,
  overriding member function getBlob(content OUT varchar2) RETURN blob,
  overriding member function getXML(content OUT varchar2)
    RETURN sys.XMLType
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."DBURITYPE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
ec7 522
yh8/dK4PhCmStPSJHJJiXV74tFQwg1UrVSDrfC/BvqqV3pahooMQ50CiOIVSaEdmUsXGN4He
4S1bGvsLqyXIM8bHn4rboQPRDq8dVXcbvJiac7lqIgrX7DUJ6P1at5KSA5JCMvvdCjF0prXZ
v1nyQcD3Na8YRqFUPazFh56FdVFCWKmR5afhR4KD+z/AZsLskXQW5wl8tPj5Q8aBsIoGQIc/
+FOxTaWi095u8j9KIKVBCl4OY2mKWYiNKvcR2HXYyqAef8NWDzdz7mZDiU0J5mORLlx+R+TQ
Q6c88QT/bEO5OocBKCqtGFXFo+CpQt4Us8AzcEjTlnj6iWgUtV5IG2NJGpSu87aiO0OzVEUU
CvxxN5O67I2NKSF8srDq06dSs7c0z83sgl+nAI6JcPKUYeRRyiBYOUz6wnzl1Hs51yYNZfWr
C+3bontrmw1HkCnaZik+94DI/KOUcaXyUicLHuO6zXCdiRQurJjaRnW5KPZyGso6LPiVidjn
lYN5b9hRkde4qIr39OgDrdWjbz3oo48K3P6n9gTMo2n650BeXTi6nREpo2kTiJ5eyxvtbEZl
QQc+LfCV6wPi7bFCMv+zFAvCPgCBlbol8vMm/7Fs0Upa9xq38Kh4d6uRgMV6Iz9+E8u/YSkO
vOQxr683XIVYU08wnHDBW7oi56d5hc6XRBy9OO2HguTUg9QvNL3gdSyjW88BIa6Ppnc+x0PA
NC8O5bbWyk5U9qOCE6A3HfbokDDpQs34ghwp49k/UbtbGYQh/LZ/47zNb0sPY1XdHEfrhHLW
CLM3XzB9Pd2LR6wocIbLEbm9ixCqzactS7xfQ5QeJsljxTWJC+XhcmhcxGV87XJLIDyCq3gI
snqBfwGwGJZkhw3Ct7dYBf7oKX9tzrcmXusNfL8gNyL7ahbjjz52q8hMO0iNC3ntA+5zsvXH
UhIDqjI67k6xcNUOYu0FlpyvK3GMlROfUezWUEI+9j1BnrO0VdlKe3ikxq42EOlU0nL6r03S
jSPW9XzTSdTIegRqhVCuHJZAXfPgUMfeF+eYi1XDBrLIPVAcjGN4zoo/3YLm0E6ncYJ4gXff
6mAQY4NmFxSkDacxaWhn0jki03nR92OcyP9nrkRyC3HuqMbSGBS7MjRR/1KYy4YdCTHTR909
TC3gAGVOq+KQOeDF+m18F9t3xd0kEPDWi+gGM/UDzc2vCrKGas5Cjvu564sngldLLjz47/9U
pPiwS8wnZncnkq+33wiBeLXL38ayE3OaUU4GZOt/Y3MH9c8R8Ck7SjitBLFrkh76lmorI+I=


/

  GRANT EXECUTE ON "SYS"."DBURITYPE" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type DDL_LCR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DDL_LCR_T" AS OBJECT ("SYS_XDBPD$" "XDB"."XDB$RAW_LIST_T","source_database_name" VARCHAR2(128 CHAR),"command_type" VARCHAR2(4000 CHAR),"current_schema" VARCHAR2(128 CHAR),"ddl_text" CLOB,"object_type" VARCHAR2(4000 CHAR),"object_owner" VARCHAR2(128 CHAR),"object_name" VARCHAR2(128 CHAR),"logon_user" VARCHAR2(128 CHAR),"base_table_owner" VARCHAR2(128 CHAR),"base_table_name" VARCHAR2(128 CHAR),"tag" RAW(2000),"transaction_id" VARCHAR2(4000 CHAR),"scn" NUMBER,"extra_attribute_values" "LCR_EXTRA_ATTRIBUTE_VALUES_T")FINAL INSTANTIABLE 

/

  GRANT EXECUTE ON "SYS"."DDL_LCR_T" TO "XDB";
  GRANT EXECUTE ON "SYS"."DDL_LCR_T" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type DG$ROW
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DG$ROW" force as object
(JPATH   VARCHAR2(4000),
 JTYPE   VARCHAR2(40),
 TLENGTH NUMBER);

/
--------------------------------------------------------
--  DDL for Type DG$ROWSET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DG$ROWSET" as table of dg$row;

/
--------------------------------------------------------
--  DDL for Type DIR_ENTRIES_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DIR_ENTRIES_T" force
   as table of (dir_entry_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."DIR_ENTRIES_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DIR_ENTRY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DIR_ENTRY_T" force
 as object (
        path        varchar2(1024),              /* dbms_dbfs_content.path_t */
        item_name   varchar2(256),               /* dbms_dbfs_content.name_t */
        st_ino      integer,
        st_mode     integer,
        st_nlink    integer,
        st_uid      integer,
        st_gid      integer,
        st_size     integer,
        st_blksize  integer,
        st_blocks   integer,
        st_atime    integer,
        st_mtime    integer,
        st_ctime    integer,
        st_atimens  integer,
        st_mtimens  integer,
        st_ctimens  integer
) not persistable;

/

  GRANT EXECUTE ON "SYS"."DIR_ENTRY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DIRNAMESMH
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DIRNAMESMH" as varray(2) of varchar2(2000);

/
--------------------------------------------------------
--  DDL for Type DM_CENTROID
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_CENTROID" 
                                       as object
  (attribute_name        varchar2(4000)
  ,attribute_subname     varchar2(4000)
  ,mean                  number
  ,mode_value            varchar2(4000)
  ,variance              number)

/

  GRANT EXECUTE ON "SYS"."DM_CENTROID" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_CENTROIDS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_CENTROIDS" 
                                       as table of dm_centroid

/

  GRANT EXECUTE ON "SYS"."DM_CENTROIDS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_CHILD
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_CHILD" 
                                       as object
  (id                    number)

/

  GRANT EXECUTE ON "SYS"."DM_CHILD" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_CHILDREN
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_CHILDREN" 
                                       as table of dm_child

/

  GRANT EXECUTE ON "SYS"."DM_CHILDREN" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_CLUSTER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_CLUSTER" 
                                       as object
  (id                    number
  ,cluster_id            varchar2(4000)
  ,record_count          number
  ,parent                number
  ,tree_level            number
  ,dispersion            number
  ,split_predicate       dm_predicates
  ,child                 dm_children
  ,centroid              dm_centroids
  ,histogram             dm_histograms
  ,rule                  dm_rule)

/

  GRANT EXECUTE ON "SYS"."DM_CLUSTER" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_CLUSTERS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_CLUSTERS" 
                                       as table of dm_cluster

/

  GRANT EXECUTE ON "SYS"."DM_CLUSTERS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_CONDITIONAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_CONDITIONAL" 
                                       as object
  (attribute_name        varchar2(4000)
  ,attribute_subname     varchar2(4000)
  ,attribute_str_value   varchar2(4000)
  ,attribute_num_value   number
  ,conditional_probability number)

/

  GRANT EXECUTE ON "SYS"."DM_CONDITIONAL" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_CONDITIONALS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_CONDITIONALS" 
                                       as table of dm_conditional

/

  GRANT EXECUTE ON "SYS"."DM_CONDITIONALS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_COST_ELEMENT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_COST_ELEMENT" 
                                       as object (
  actual      varchar2(4000),
  predicted   varchar2(4000),
  cost        number)

/

  GRANT EXECUTE ON "SYS"."DM_COST_ELEMENT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_COST_MATRIX
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_COST_MATRIX" 
                                       as table of dm_cost_element

/

  GRANT EXECUTE ON "SYS"."DM_COST_MATRIX" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_EM_COMPONENT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_EM_COMPONENT" 
                                       as object
  (info_type             VARCHAR2(30)
  ,component_id          NUMBER
  ,cluster_id            NUMBER
  ,attribute_name        VARCHAR2(4000)
  ,covariate_name        VARCHAR2(4000)
  ,attribute_value       VARCHAR2(4000)
  ,value                 NUMBER
  )

/

  GRANT EXECUTE ON "SYS"."DM_EM_COMPONENT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_EM_COMPONENT_SET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_EM_COMPONENT_SET" 
                                       as table of dm_em_component

/

  GRANT EXECUTE ON "SYS"."DM_EM_COMPONENT_SET" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_EM_PROJECTION
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_EM_PROJECTION" 
                                       as object
  (feature_name          VARCHAR2(4000)
  ,attribute_name        VARCHAR2(4000)
  ,attribute_subname     VARCHAR2(4000)
  ,attribute_value       VARCHAR2(4000)
  ,coefficient           NUMBER
  )

/

  GRANT EXECUTE ON "SYS"."DM_EM_PROJECTION" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_EM_PROJECTION_SET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_EM_PROJECTION_SET" 
                                       as table of dm_em_projection

/

  GRANT EXECUTE ON "SYS"."DM_EM_PROJECTION_SET" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_GLM_COEFF
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_GLM_COEFF" 
                                       as object
  (class                 varchar2(4000)
  ,attribute_name        VARCHAR2(4000)
  ,attribute_subname    VARCHAR2(4000)
  ,attribute_value       VARCHAR2(4000)
  ,feature_expression    VARCHAR2(4000)
  ,coefficient           NUMBER
  ,std_error             NUMBER
  ,test_statistic        NUMBER
  ,p_value               NUMBER
  ,vif                   NUMBER
  ,std_coefficient       NUMBER
  ,lower_coeff_limit     NUMBER
  ,upper_coeff_limit     NUMBER
  ,exp_coefficient       BINARY_DOUBLE
  ,exp_lower_coeff_limit BINARY_DOUBLE
  ,exp_upper_coeff_limit BINARY_DOUBLE
  )

/

  GRANT EXECUTE ON "SYS"."DM_GLM_COEFF" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_GLM_COEFF_SET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_GLM_COEFF_SET" 
                                       as table of dm_glm_coeff

/

  GRANT EXECUTE ON "SYS"."DM_GLM_COEFF_SET" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_HISTOGRAM_BIN
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_HISTOGRAM_BIN" 
                                       as object
  (attribute_name        varchar2(4000)
  ,attribute_subname     varchar2(4000)
  ,bin_id                number
  ,lower_bound           number
  ,upper_bound           number
  ,label                 varchar2(4000)
  ,count                 number)

/

  GRANT EXECUTE ON "SYS"."DM_HISTOGRAM_BIN" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_HISTOGRAMS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_HISTOGRAMS" 
                                       as table of dm_histogram_bin

/

  GRANT EXECUTE ON "SYS"."DM_HISTOGRAMS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_ITEM
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_ITEM" 
                                       as object (
  attribute_name        varchar2(4000),
  attribute_subname     varchar2(4000),
  attribute_num_value   number,
  attribute_str_value   varchar2(4000))

/

  GRANT EXECUTE ON "SYS"."DM_ITEM" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_ITEMS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_ITEMS" 
                                       as table of dm_item

/

  GRANT EXECUTE ON "SYS"."DM_ITEMS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_ITEMSET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_ITEMSET" 
                                       as object
  (itemset_id            integer
  ,items                 dm_items
  ,support               number
  ,number_of_items       number)

/

  GRANT EXECUTE ON "SYS"."DM_ITEMSET" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_ITEMSETS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_ITEMSETS" 
                                       as table of dm_itemset

/

  GRANT EXECUTE ON "SYS"."DM_ITEMSETS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_MODEL_GLOBAL_DETAIL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_MODEL_GLOBAL_DETAIL" 
                                       as object
  (global_detail_name    VARCHAR2(30)
  ,global_detail_value   number)

/

  GRANT EXECUTE ON "SYS"."DM_MODEL_GLOBAL_DETAIL" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_MODEL_GLOBAL_DETAILS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_MODEL_GLOBAL_DETAILS" 
                                       as table of dm_model_global_detail

/

  GRANT EXECUTE ON "SYS"."DM_MODEL_GLOBAL_DETAILS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_MODEL_SETTING
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_MODEL_SETTING" 
                                       as object
  (setting_name          varchar2(30)
  ,setting_value         varchar2(128))
 alter type "SYS"."DM_MODEL_SETTING" 
 modify attribute setting_value varchar2(4000) cascade

/

  GRANT EXECUTE ON "SYS"."DM_MODEL_SETTING" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."DM_MODEL_SETTING" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_MODEL_SETTINGS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_MODEL_SETTINGS" 
                                      
  as table of dm_model_setting

/

  GRANT EXECUTE ON "SYS"."DM_MODEL_SETTINGS" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."DM_MODEL_SETTINGS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_MODEL_SIGNATURE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_MODEL_SIGNATURE" 
                                      
  as table of dm_model_signature_attribute

/

  GRANT EXECUTE ON "SYS"."DM_MODEL_SIGNATURE" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."DM_MODEL_SIGNATURE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_MODEL_SIGNATURE_ATTRIBUTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_MODEL_SIGNATURE_ATTRIBUTE" 
                                       as object
  (attribute_name        varchar2(30)
  ,attribute_type        varchar2(106))
 alter type "SYS"."DM_MODEL_SIGNATURE_ATTRIBUTE" 
 modify attribute attribute_name varchar2(130) cascade

/

  GRANT EXECUTE ON "SYS"."DM_MODEL_SIGNATURE_ATTRIBUTE" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."DM_MODEL_SIGNATURE_ATTRIBUTE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_MODEL_TEXT_DF
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_MODEL_TEXT_DF" 
                                       as object
  (attribute_name      varchar2(30)
  ,feature_name        varchar2(4000)
  ,frequency           number)
 alter type "SYS"."DM_MODEL_TEXT_DF" 
 modify attribute attribute_name varchar2(130) cascade

/

  GRANT EXECUTE ON "SYS"."DM_MODEL_TEXT_DF" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."DM_MODEL_TEXT_DF" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_MODEL_TEXT_DFS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_MODEL_TEXT_DFS" 
                                      
  as table of DM_MODEL_TEXT_DF

/

  GRANT EXECUTE ON "SYS"."DM_MODEL_TEXT_DFS" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."DM_MODEL_TEXT_DFS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NB_DETAIL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NB_DETAIL" 
                                       as object
  (target_attribute_name varchar2(30)
  ,target_attribute_str_value varchar2(4000)
  ,target_attribute_num_value number
  ,prior_probability     number
  ,conditionals          dm_conditionals)
 alter type "SYS"."DM_NB_DETAIL" 
 modify attribute target_attribute_name varchar2(130) cascade

/

  GRANT EXECUTE ON "SYS"."DM_NB_DETAIL" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."DM_NB_DETAIL" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NB_DETAILS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NB_DETAILS" 
                                       as table of dm_nb_detail

/

  GRANT EXECUTE ON "SYS"."DM_NB_DETAILS" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."DM_NB_DETAILS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NESTED_BINARY_DOUBLE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NESTED_BINARY_DOUBLE" 
                                       as object
  (attribute_name        varchar2(4000)
  ,value                 binary_double)

/

  GRANT EXECUTE ON "SYS"."DM_NESTED_BINARY_DOUBLE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NESTED_BINARY_DOUBLES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NESTED_BINARY_DOUBLES" 
                                      
  as table of dm_nested_binary_double

/

  GRANT EXECUTE ON "SYS"."DM_NESTED_BINARY_DOUBLES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NESTED_BINARY_FLOAT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NESTED_BINARY_FLOAT" 
                                       as object
  (attribute_name        varchar2(4000)
  ,value                 binary_float)

/

  GRANT EXECUTE ON "SYS"."DM_NESTED_BINARY_FLOAT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NESTED_BINARY_FLOATS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NESTED_BINARY_FLOATS" 
                                      
  as table of dm_nested_binary_float

/

  GRANT EXECUTE ON "SYS"."DM_NESTED_BINARY_FLOATS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NESTED_CATEGORICAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NESTED_CATEGORICAL" 
                                       as object
  (attribute_name        varchar2(4000)
  ,value                 varchar2(4000))

/

  GRANT EXECUTE ON "SYS"."DM_NESTED_CATEGORICAL" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NESTED_CATEGORICALS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NESTED_CATEGORICALS" 
                                      
  as table of dm_nested_categorical

/

  GRANT EXECUTE ON "SYS"."DM_NESTED_CATEGORICALS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NESTED_NUMERICAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NESTED_NUMERICAL" 
                                       as object
  (attribute_name        varchar2(4000)
  ,value                 number)

/

  GRANT EXECUTE ON "SYS"."DM_NESTED_NUMERICAL" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NESTED_NUMERICALS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NESTED_NUMERICALS" 
                                      
  as table of dm_nested_numerical

/

  GRANT EXECUTE ON "SYS"."DM_NESTED_NUMERICALS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NMF_ATTRIBUTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NMF_ATTRIBUTE" 
                                       as object
  (attribute_name        varchar2(4000)
  ,attribute_subname     varchar2(4000)
  ,attribute_value       varchar2(4000)
  ,coefficient           number)

/

  GRANT EXECUTE ON "SYS"."DM_NMF_ATTRIBUTE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NMF_ATTRIBUTE_SET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NMF_ATTRIBUTE_SET" 
                                       as table of dm_nmf_attribute

/

  GRANT EXECUTE ON "SYS"."DM_NMF_ATTRIBUTE_SET" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NMF_FEATURE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NMF_FEATURE" 
                                       as object
  (feature_id            number
  ,mapped_feature_id     varchar2(4000)
  ,attribute_set         dm_nmf_attribute_set)

/

  GRANT EXECUTE ON "SYS"."DM_NMF_FEATURE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_NMF_FEATURE_SET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_NMF_FEATURE_SET" 
                                       as table of dm_nmf_feature

/

  GRANT EXECUTE ON "SYS"."DM_NMF_FEATURE_SET" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_PREDICATE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_PREDICATE" 
                                      
authid current_user as object
  (attribute_name        varchar2(4000)
  ,attribute_subname     varchar2(4000)
  ,conditional_operator  char(2) /* =, <>, <, >, <=, >= */
  ,attribute_num_value   number
  ,attribute_str_value   varchar2(4000)
  ,attribute_support     number
  ,attribute_confidence  number)

/

  GRANT EXECUTE ON "SYS"."DM_PREDICATE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_PREDICATES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_PREDICATES" 
                                       as table of dm_predicate

/

  GRANT EXECUTE ON "SYS"."DM_PREDICATES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_RANKED_ATTRIBUTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_RANKED_ATTRIBUTE" 
                                       as object
  (attribute_name        varchar2(4000),
   attribute_subname     varchar2(4000),
   importance_value      number,
   rank                  number(38))

/

  GRANT EXECUTE ON "SYS"."DM_RANKED_ATTRIBUTE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_RANKED_ATTRIBUTES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_RANKED_ATTRIBUTES" 
                                      
  as table of dm_ranked_attribute

/

  GRANT EXECUTE ON "SYS"."DM_RANKED_ATTRIBUTES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM$RQMOD_DETAILIMPL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM$RQMOD_DETAILIMPL" 
AUTHID CURRENT_USER AS OBJECT (
  typ                            SYS.AnyType,
  key                            RAW(4),

  -- ODCITableDescribe --------------------------------------------------------
  --
  STATIC FUNCTION ODCITableDescribe(
    typ1                           OUT SYS.AnyType,
    mod_nam                        VARCHAR2,
    par_cur                        SYS_REFCURSOR,
    out_qry                        VARCHAR2,
    view_num                       NUMBER default -1)
  RETURN PLS_INTEGER,

  STATIC FUNCTION StubTableDescribe(
    typ1                           OUT SYS.AnyType,
    par_cur                        SYS_REFCURSOR,
    out_qry                        VARCHAR2,
    exp_nam                        VARCHAR2)
  RETURN PLS_INTEGER,

  -- ODCITablePrepare ---------------------------------------------------------
  --
  STATIC FUNCTION ODCITablePrepare(
    sctx                           OUT dm$rqMod_DetailImpl,
    tf_info                        SYS.ODCITabFuncInfo,
    mod_nam                        VARCHAR2,
    par_cur                        SYS_REFCURSOR,
    out_qry                        VARCHAR2,
    view_num                       NUMBER default -1)
  RETURN PLS_INTEGER,

  STATIC FUNCTION StubTablePrepare(
    sctx                           OUT dm$rqMod_DetailImpl,
    tf_info                        SYS.ODCITabFuncInfo,
    par_cur                        SYS_REFCURSOR,
    out_qry                        VARCHAR2,
    exp_nam                        VARCHAR2)
  RETURN PLS_INTEGER,

  -- ODCITableStart -----------------------------------------------------------
  --
  STATIC FUNCTION ODCITableStart(
    sctx                           IN OUT dm$rqMod_DetailImpl,
    mod_nam                        VARCHAR2,
    par_cur                        SYS_REFCURSOR,
    out_qry                        VARCHAR2,
    view_num                       NUMBER default -1)
  RETURN PLS_INTEGER,

  STATIC FUNCTION StubTableStart(
    sctx                           IN OUT dm$rqMod_DetailImpl,
    mod_cur                        SYS_REFCURSOR,
    par_cur                        SYS_REFCURSOR,
    out_qry                        VARCHAR2,
    env_val                        ora_mining_varchar2_nt,
    exp_nam                        VARCHAR2)
  RETURN PLS_INTEGER,

  -- ODCITableFetch -----------------------------------------------------------
  --
  MEMBER FUNCTION ODCITableFetch(
    self                           IN OUT dm$rqMod_DetailImpl,
    nrows                          NUMBER,
    rws                            OUT SYS.AnyDataSet)
  RETURN PLS_INTEGER,

  MEMBER FUNCTION StubTableFetch(
    self                           IN OUT dm$rqMod_DetailImpl,
    nrows                          NUMBER,
    rws                            OUT SYS.AnyDataSet)
  RETURN PLS_INTEGER,

  -- ODCITableClose -----------------------------------------------------------
  --
  MEMBER FUNCTION ODCITableClose(
    self                           dm$rqMod_DetailImpl)
  RETURN PLS_INTEGER,

  MEMBER FUNCTION StubTableClose(
    self                           dm$rqMod_DetailImpl)
  RETURN PLS_INTEGER
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."DM$RQMOD_DETAILIMPL" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
29f0 cf9
IObrPU/BOt3tvsCWYYw8oAKuPXkwg82jeSAFhfO5F3MYO/OpXY04YoEJjgi+punifgYWCRuc
n2jKyhH0Sj3ruhZ7v94Qte0DII4PlDEtUlMGX8p/voIDgnJ6gpjZsr5BcCHSzfYhuryXIvCx
A7TcTpG8uKcTRGVqhyio+UkUG1JWIRh6bVe8B88FwOOt9S3whNW4QFREqEaFgRrQRark4w6l
eyFZu6sULf/11LykEotTDMEldNjHggS47vSI2yuO9b3WCFfd78jnc6n23W4I6bgQdToMWw+V
h3dDdF90Uql+emXvnA6xELKg4VlR3YS2eF+k0I+Cdt0MSV25OYsxtKLJos9yLPjMBLfd0ua3
NzAVoqWYvSgPI1E/qs/P2GvEsHyQHsBrZqnlL6R2BoLGC+YAqOfsl99MGut2Lrd54sXyURYW
MVFyod/tDMI3gyzkhOtQG/qbQiIPZAZcwlkyif2aawV+7aLlrBwcIz00f3QsHMhRa3Hu3PTd
zQgKj6wbs9Tb9XEXelLwyKJqxQAWgvVYIpCSJv5QC6o2K1ZIijFJ7W/J37A/ZYIPdX7pi/6Z
v8BHdPf2Ixf3QkD3RHLignRZdW7Ur/GsmvMwW+98mWCAMbAhB9Oux9pV3AM6LiM2hOrLrYCn
KGCa9xyZiJG9y+YaGMR7Br4L53tBzVQbNzC/vol8zdQjsriIxai9drtZlkEM1BRv5hqx7P7C
rGc2UFDcyxFet6bWE6yZa+kZEAKZYhqL3PfzkXBdu+5GqBtj3GmzJEVoOExIsYXL3lZlayGc
RUfy9InhyNYTR4yj2SD/6LWx/yH6CVSNy0hZejpW++n2DmIUwloACESEFF2yAprqhNY3qXai
Z8YFcq8ke7fnqpo5X/JM7LnqGqwvkXUNyz7Dyv812I8yCXTCdLGSQ4/Xmg2QRm3t4SgIPHQ/
26/LbH/qLwu78bfffIYthvv9C94hM+cyOxA2M/B7CY4uSDPm90bTUM+FVpsLKMY4z/M6NgUt
C06z7hnM9rtNVQ69BUWbr9kwBsdPQEpbVWP8dwF0fDjEaqUBig9CdDsAjOKEe0AAFh0V8gpl
78g2jtpuAq+nRLjEpZS6MCIXog5g+g01/ZFZ5CwtweSZCn6FdIR2L4ZmZUwXXakL7kTvpCvp
PvYPTIFZpLIykSmFPK1KFS4XNjrA5l06RvNv98eKvQvTzMpHpRow6spEZNeD9p/TrQkcHJ/g
KCil5omJ/Qbo3gNVIWKOszNcbKzONz2JQWmtpdX0hB520C6hPIQApX7jzhrq4ixpMFUkPgGE
Bgmg6CRe9GV8qJ8tRMZbWeeWqHgViav54izn+syP0PcpRcKDVHctaXQCUD2toupUC5ldPsFG
edOTTUApQTrPUNKK8kVCj7ABph5mz4c4o6ma4aGt/GrWb7KBOoTLysktIwJSLWa8cc493FlY
Ibq8g+QHHEq/o+Ay3SuiyvkIBAVKvZ2UW6WBc8XqnevOr0U/4tFztIbOBnQSOXfCeFOpnVzz
qYeBhB4yO5um7VSInym3DJUks1KtQlX5SLuc/GZMEEe7dylVc/xJLvgejwq8qpj+MrX9vrQq
YH02NtDwglm0l+jFNc+50H8hHWF3JhAuITfR3rQw5hICbwlNdCE7evAOYUOAS+fm/HX2winE
TljLrYlKqHivvVXclcuSXOzwRwXeKiBjc+P9JfyO3D3b5L1Nly5A2IS0fZcU/rNlOkTc0hCg
kyD49fcPmuT9OY5Es5Y10i4qMZ7mOnuHVZYgJVlMVZZvqw18UP0grxkOhBM/QtMJ9dOoQOMs
60NplPP20kxMeK5ve+z5oKPv1KGQtdYiSW34oAHCrOIH68ItZu02Rng5RC7Kvwtp2DZwpWcN
l913XIie023bFoz7rhKlMOGritos8oN2zOnkeuOytbh1O6o5b+NUU4x5Yowa/wVmXrFQkoKl
gArsfs2EaPXrxSOjXyrvLAOBczlVzzUlO36nyWPBE9RHJJpjk56lTl2QlyHFTHOZxWFXzo0z
VGcKVa9rvDrxXR5QYlwAgz2ymqtqGEMwuPnDAmZd67TNyHWhjQwVmw5cLo1hA/X+lLLVn0qV
4vPLcEkylC0rPFx15A8O0Q6FcoW+dlDyOfJD6r9wsc7sgr0MbNoBj9VTS6c+2J9R45dzF3Ly
rdeLE25elpNWBopeRw95EwxjcJ6JvXz8ju3NjJEqhKwqIFue/Cqn5kKPX+ZUAZ5kgWab3LQc
zTSD9epapIw6ih/tZs+dLgPta2+vl32SfT8qD2QWYE3H6D/H6GQ4g3UR3WeNBNXyuPttJNKG
UUo4njuMQOlb2ukQY7Y/NYY55Kx5O2gFlCC/Av5F6z32Zmyx2fD3ViLiA0I/xF+c3kFH8Xp/
p049z4F/vO0PLintSn8LnEKVThIZ720AAHlOLHStq5rYFw+gM4HWG4QEluhVUbLTpEulGlpF
JQXZweHwy2gR9vGrATR9MyZ3Z3BUhCQOne2t4v5kudfMOhMoVevZpVzv+JFWsYKkiEBra7Vh
yI3yphrUzScYPzDXr4mHCVauo/XC9fZHSCYwoZh76hOrDMF5Objl0uy50n3np5PJ8vhcKeVz
SQKBRk1UaW153JUf+skDzlEl2yBDcexKGCl42Y1Kp4Ktx2PrPusyg6nJrRK1HIkiz8iPZ3mr
aHqUsU16tac8uPY/bXeU45mvXoV6pR1fzKRFtVnorX4qSrovIKb/5IufP2P7pvCR9aSppVac
imhj+lmUae2qmr+oGgs7LvifkKiURbbsZFDfczZsYYcQiezsPMNnEXg4n4IPCN7JxG7vfnt8
/u4d6dCyw1deeVQBOY3nw4dS2auBKDakSVmSvi/Yiu0V7k9LOnjPLT3REEaq0s1LNAjuB3vt
wIxqIipFP+NDovCytQuk6M40bsSUiZVbSKXITNztA6VGHCpDNevWM4Wdt1+P2yecA8rQ3X/L
4SR84eu9LVfTTur8HrvQ+CAZijwqfySCHtZjytiRjatXfUCKQmRJHL+GpSWcCxljU54Rrn4e
xtKazodiR2uwAMY7o5B96VWXITIZWAAezaNzey4a28R22bAyPg/1/8yYQdrOIkhfMbLDTiJI
RvQy4pe7gIwgyjQfzuo4xHudVe5RryKvl6ona3Oo210Tu9mrnNIhtEwHXRZL5/X8TEN77UpM
Lh6/bVW3CsCJi+uY1grTyO6qxMNsgDTUCGcUaxUnMKCM3V1dDXY6+Iw6/yvr1sA88dic6Ki/
uXyb7VnKrotGDVQg6xfuoiprjgckcyij+zqH

/

  GRANT EXECUTE ON "SYS"."DM$RQMOD_DETAILIMPL" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_RQMODEL_RAW_NT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_RQMODEL_RAW_NT" 
                                       as table of RAW(2000)

/
--------------------------------------------------------
--  DDL for Type DM_RULE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_RULE" 
                                       as object
  (rule_id               integer
  ,antecedent            dm_predicates
  ,consequent            dm_predicates
  ,rule_support          number
  ,rule_confidence       number
  ,rule_lift             number
  ,antecedent_support    number
  ,consequent_support    number
  ,number_of_items       integer)

/

  GRANT EXECUTE ON "SYS"."DM_RULE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_RULES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_RULES" 
                                       as table of dm_rule

/

  GRANT EXECUTE ON "SYS"."DM_RULES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_SVD_MATRIX
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_SVD_MATRIX" 
                                       as object
  (matrix_type           CHAR(1)
  ,feature_id            NUMBER
  ,mapped_feature_id     VARCHAR2(4000)
  ,attribute_name        VARCHAR2(4000)
  ,attribute_subname     VARCHAR2(4000)
  ,case_id               VARCHAR2(4000)
  ,value                 NUMBER
  ,variance              number
  ,pct_cum_variance      NUMBER
  )

/

  GRANT EXECUTE ON "SYS"."DM_SVD_MATRIX" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_SVD_MATRIX_SET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_SVD_MATRIX_SET" 
                                       as table of dm_svd_matrix

/

  GRANT EXECUTE ON "SYS"."DM_SVD_MATRIX_SET" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_SVM_ATTRIBUTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_SVM_ATTRIBUTE" 
                                       as object
  (attribute_name        varchar2(4000)
  ,attribute_subname     varchar2(4000)
  ,attribute_value       varchar2(4000)
  ,coefficient           number)

/

  GRANT EXECUTE ON "SYS"."DM_SVM_ATTRIBUTE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_SVM_ATTRIBUTE_SET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_SVM_ATTRIBUTE_SET" 
                                       as table of dm_svm_attribute

/

  GRANT EXECUTE ON "SYS"."DM_SVM_ATTRIBUTE_SET" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_SVM_LINEAR_COEFF
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_SVM_LINEAR_COEFF" 
                                       as object
  (class                 varchar2(4000)
  ,attribute_set         dm_svm_attribute_set)

/

  GRANT EXECUTE ON "SYS"."DM_SVM_LINEAR_COEFF" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_SVM_LINEAR_COEFF_SET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_SVM_LINEAR_COEFF_SET" 
                                       as table of dm_svm_linear_coeff

/

  GRANT EXECUTE ON "SYS"."DM_SVM_LINEAR_COEFF_SET" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_TRANSFORM
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_TRANSFORM" 
                                       as object (
  attribute_name        varchar2(4000),
  attribute_subname     varchar2(4000),
  expression            clob,
  reverse_expression    clob)

/

  GRANT EXECUTE ON "SYS"."DM_TRANSFORM" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DM_TRANSFORMS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DM_TRANSFORMS" 
                                       as table of dm_transform

/

  GRANT EXECUTE ON "SYS"."DM_TRANSFORMS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type DS_VARRAY_4_CLOB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."DS_VARRAY_4_CLOB" 
as   varray(2000000000) of varchar2(4000 char)

/

  GRANT EXECUTE ON "SYS"."DS_VARRAY_4_CLOB" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type EXPLAINMVARRAYTYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."EXPLAINMVARRAYTYPE" AS VARRAY(200) OF SYS.ExplainMVMessage

/

  GRANT EXECUTE ON "SYS"."EXPLAINMVARRAYTYPE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type EXPLAINMVMESSAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."EXPLAINMVMESSAGE" FORCE AS OBJECT (
   MVOWNER              VARCHAR(128),  -- NULL for SELECT based EXPLAIN_MVIEW
   MVNAME               VARCHAR(128),  -- NULL for SELECT based EXPLAIN_MVIEW
   CAPABILITY_NAME      VARCHAR(30),  -- A descriptive name of the particular
                                      -- capability:
                                      -- REWRITE
                                      --   Can do at least full text match
                                      --   rewrite
                                      -- REWRITE_PARTIAL_TEXT_MATCH
                                      --   Can do at leat full and partial
                                      --   text match rewrite
                                      -- REWRITE_GENERAL
                                      --   Can do all forms of rewrite
                                      -- REFRESH
                                      --   Can do at least complete refresh
                                      -- REFRESH_FROM_LOG_AFTER_INSERT
                                      --   Can do fast refresh from an mv log
                                      --   or change capture table at least
                                      --   when update operations are
                                      --   restricted to INSERT
                                      -- REFRESH_FROM_LOG_AFTER_ANY
                                      --   can do fast refresh from an mv log
                                      --   or change capture table after any
                                      --   combination of updates
                                      -- EUT
                                      --   Can do Enhanced Update Tracking on
                                      --   the table named in the RELATED_NAME
                                      --   column.  EUT is needed for fast
                                      --   refresh after partitioned
                                      --   maintenance operations on the table
                                      --   named in the RELATED_NAME column
                                      --   and to do non-stale tolerated
                                      --   rewrite when the mv is partially
                                      --   stale with respect to the table
                                      --   named in the RELATED_NAME column.
                                      --   EUT can also sometimes enable fast
                                      --   refresh of updates to the table
                                      --   named in the RELATED_NAME column
                                      --   when fast refresh from an mv log
                                      --   or change capture table is not
                                      --   possilbe.
   POSSIBLE             VARCHAR(1),   -- T = capability enabled
                                      -- F = capability disabled
   RELATED_TEXT         VARCHAR(2000),-- Owner.table.column, alias name, etc.
                                      -- related to this message.  The
                                      -- specific meaning of this column
                                      -- depends on the MSGNO column.  See
                                      -- the documentation for
                                      -- DBMS_MVIEW.EXPLAIN_MVIEW() for details
   RELATED_NUM          NUMBER,       -- When there is a numeric value
                                      -- associated with a row, it goes here.
                                      -- The specific meaning of this column
                                      -- depends on the MSGNO column.  See
                                      -- the documentation for
                                      -- DBMS_MVIEW.EXPLAIN_MVIEW() for details
   MSGNO                NUMBER,      -- When available, QSM message #
                                      -- explaining why disabled or more
                                      -- details when enabled.
   MSGTXT               VARCHAR(2000),-- Text associated with MSGNO.
   SEQ                  NUMBER)      -- Useful in ORDER BY clause when
                                      -- selecting from this table.

/

  GRANT EXECUTE ON "SYS"."EXPLAINMVMESSAGE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type FI_CATEGORICALS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."FI_CATEGORICALS" as table of varchar2(4000);

/

  GRANT EXECUTE ON "SYS"."FI_CATEGORICALS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type FI_NUMERICALS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."FI_NUMERICALS" as table of number;

/

  GRANT EXECUTE ON "SYS"."FI_NUMERICALS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type FLASHBACKTBLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."FLASHBACKTBLIST" AS VARRAY(100) of VARCHAR2(261)

/

  GRANT EXECUTE ON "SYS"."FLASHBACKTBLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type FTPURITYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."FTPURITYPE" 
  authid current_user under sys.UriType
(
 -- url varchar2(4000),
  overriding member function getExternalUrl return varchar2 deterministic,
  overriding member function getUrl return varchar2 deterministic,
  -- returns the lob value of the pointed URL
  overriding member function getClob RETURN clob,
  overriding member function getBlob RETURN blob,
  overriding member function getBlob(csid IN NUMBER) RETURN blob,
  static function createFtpUri(ftpurl in varchar2) return ftpuritype,
  -- new fcns in 9.2
  overriding member function getXML return sys.XMLType,
  constructor function FtpUriType(url in varchar2) return self
                                  as result,
  overriding member function getContentType RETURN varchar2,
  overriding member function getClob(content OUT varchar2) RETURN clob,
  overriding member function getBlob(content OUT varchar2) RETURN blob,
  overriding member function getXML(content OUT varchar2)
    RETURN sys.XMLType
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."FTPURITYPE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
6b4 291
ZU7p9yHYqvdlwaRonUuGm3i8WGYwg+3Dr9xofC/NQp3gSBNaCgFt5Svgla+fG21j20qKf2aw
QWcGYeZxxQgIX80hvWnKw6ChGleGWP4ZV4KEEAfKeT2EEKp0v8TSHjCyFWQrS6zOtAz13OqD
dg6VK1HWewTpg6tXyibU8rhar4ha9s0LL0vXB0DxeXI59Ft5JWBsurW3O7pDaS/TYZAyFYHp
SrTImVS5W19GE3hRvS4ND+0Kof8h+iQR8bWi62aTAptF4XndRlMP+apYIPZ04jqkIz5uRS+5
jsUbwDvfg7crVmUGruw5u4HXcwiKXZFzpd0v2TqlGC3wEfnseFdMmek8gbrS8vWFQAb0dcC+
7Aqfw+4SnUOuGNcIng29Lpf1qFPCQFBp5s9B/El/GuHZIXAd8M5DA8tzdGU60VhxWTkM+UcF
kSz5D3xxNKUU4ALwz76YJ/zgYmPqtrozRBczdRaA1B/4HZe3CV31enh+2FX0I2+bqwrG6Is6
eqDfHUP1qNzWs5jOYQXNl1IjplnRF8Fn3MTp1maQM+y7gzFvwt1dTfbnTAfipTXChWY5SLxI
vJxsbmrs6dS54UVngkELJQ3wUVhwHDOMbssShaj9zsp1FmTBr38nItvx6FKX1JWcgPMtsFY=


/

  GRANT EXECUTE ON "SYS"."FTPURITYPE" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type GENERIC_PLAN_OBJECT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."GENERIC_PLAN_OBJECT" authid current_user as object
(plan_source number,
 member function get_plan_rows return sql_plan_table_type) not final

/

  GRANT EXECUTE ON "SYS"."GENERIC_PLAN_OBJECT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type GENINTERFACESTUB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."GENINTERFACESTUB" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
d
66 a2
cEETJgn/YqCD/c7h/6TiKsng3dEwg5n0dLhcuK7XTkfVoWLyDFncstE+Lgm4dCulv5vAMsuz
jwlp58CBgShSAqUd5ABz5nHWjuTmEJBx1vXdwkoicH94gBfqJIAP6gJ8xsoXKMbK77IL78eC
xy7RLvY5pr3S/Yw=

/

  GRANT EXECUTE ON "SYS"."GENINTERFACESTUB" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type GENINTERFACESTUBSEQUENCE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."GENINTERFACESTUBSEQUENCE" AS VARRAY(32767) OF GenInterfaceStub;

/

  GRANT EXECUTE ON "SYS"."GENINTERFACESTUBSEQUENCE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type GENOLAPIEXCEPTION
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."GENOLAPIEXCEPTION" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
d
65 9a
0I24su/0MLdR8jV9HUTZbqrgKhUwg5n0dLhcuK7XTnKhVoX1O1rcYhb6R3JeuHQrpb+bwDLL
s48JaaXH0jJc58d0wDO4dGUlfN9leIKxd/sYmFM52ltCOUYwkvhrDMfexc46BxZTQpKtklSC
pqbEGqsR

/

  GRANT EXECUTE ON "SYS"."GENOLAPIEXCEPTION" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type GENRAWSEQUENCE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."GENRAWSEQUENCE" AS VARRAY(32767) OF RAW(32767);

/

  GRANT EXECUTE ON "SYS"."GENRAWSEQUENCE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type GENWSTRINGSEQUENCE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."GENWSTRINGSEQUENCE" AS VARRAY(32767) OF NVARCHAR2(10922);

/

  GRANT EXECUTE ON "SYS"."GENWSTRINGSEQUENCE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type GRANT_PATH
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."GRANT_PATH" AS VARRAY(150) OF VARCHAR2(128);

/

  GRANT EXECUTE ON "SYS"."GRANT_PATH" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type HSBLKNAMLST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HSBLKNAMLST" as table of varchar2(30)
 ALTER TYPE "SYS"."HSBLKNAMLST" MODIFY ELEMENT TYPE VARCHAR(128) CASCADE

/

  GRANT EXECUTE ON "SYS"."HSBLKNAMLST" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."HSBLKNAMLST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type HSBLKVALARY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HSBLKVALARY" as  VARRAY(250)  of varchar2(4000);

/

  GRANT EXECUTE ON "SYS"."HSBLKVALARY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type HS$_DDTF_OPTCOLUMNS_O
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_OPTCOLUMNS_O" FORCE
AUTHID CURRENT_USER
AS OBJECT (
  TABLE_CAT         VARCHAR2(510),
  TABLE_SCHEM       VARCHAR2(256),
  TABLE_NAME        VARCHAR2(256),
  COLUMN_NAME       VARCHAR2(256),
  DATA_TYPE         NUMBER,
  COLUMN_SIZE       NUMBER,
  BUFFER_LENGTH     NUMBER,
  DECIMAL_DIGITS    NUMBER,
  REMARKS           VARCHAR2(2000),
  ORDINAL_POSITION  NUMBER,
  IS_NULLABLE       VARCHAR2(256)
)

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_OPTCOLUMNS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_OPTCOLUMNS_T" FORCE
AS TABLE OF
  SYS.HS$_DDTF_OPTColumns_O

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_OPTFOREIGNKEYS_O
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_OPTFOREIGNKEYS_O" FORCE
AUTHID CURRENT_USER
AS OBJECT (
  PKTABLE_CAT   VARCHAR2(510),
  PKTABLE_SCHEM VARCHAR2(256),
  FKTABLE_SCHEM VARCHAR2(256),
  FKTABLE_NAME  VARCHAR2(256),
  FKCOLUMN_NAME VARCHAR2(256),
  KEY_SEQ       NUMBER,
  DELETE_RULE   NUMBER,
  FK_NAME       VARCHAR2(256),
  PK_NAME       VARCHAR2(256)
)

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_OPTFOREIGNKEYS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_OPTFOREIGNKEYS_T" FORCE
AS TABLE OF
  SYS.HS$_DDTF_OPTForeignKeys_O

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_OPTPROCEDURES_O
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_OPTPROCEDURES_O" FORCE
AUTHID CURRENT_USER
AS OBJECT (
  PROCEDURE_CAT     VARCHAR2(128),
  PROCEDURE_SCHEM   VARCHAR2(128),
  PROCEDURE_NAME    VARCHAR2(128)
)

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_OPTPROCEDURES_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_OPTPROCEDURES_T" FORCE
AS TABLE OF
  SYS.HS$_DDTF_OPTProcedures_O

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_OPTSTATISTICS_O
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_OPTSTATISTICS_O" FORCE
AUTHID CURRENT_USER
AS OBJECT (
  TABLE_CAT        VARCHAR2(510),
  TABLE_SCHEM      VARCHAR2(256),
  TABLE_NAME       VARCHAR2(256),
  NON_UNIQUE       NUMBER,
  INDEX_NAME       VARCHAR2(256),
  TYPE             NUMBER,
  ORDINAL_POSITION NUMBER,
  COLUMN_NAME      VARCHAR2(256),
  ASC_OR_DESC      VARCHAR2(1),
  CARDINALITY      NUMBER
)

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_OPTSTATISTICS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_OPTSTATISTICS_T" FORCE
AS TABLE OF
  SYS.HS$_DDTF_OPTStatistics_O

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_SQLCOLUMNS_O
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_SQLCOLUMNS_O" FORCE
AUTHID CURRENT_USER
AS OBJECT (
  TABLE_CAT         VARCHAR2(510),
  TABLE_SCHEM       VARCHAR2(256),
  TABLE_NAME        VARCHAR2(256),
  COLUMN_NAME       VARCHAR2(256),
  DATA_TYPE         NUMBER,
  TYPE_NAME         VARCHAR2(128),
  COLUMN_SIZE       NUMBER,
  BUFFER_LENGTH     NUMBER,
  DECIMAL_DIGITS    NUMBER,
  NUM_PREC_RADIX    NUMBER,
  NULLABLE          NUMBER,
  REMARKS           VARCHAR2(2000),
  COLUMN_DEF        VARCHAR2(256),
  SQL_DATA_TYPE     NUMBER,
  SQL_DATETIME_SUB  NUMBER,
  CHAR_OCTET_LENGTH NUMBER,
  ORDINAL_POSITION  NUMBER,
  IS_NULLABLE       VARCHAR2(256)
)

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_SQLCOLUMNS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_SQLCOLUMNS_T" FORCE
AS TABLE OF
  SYS.HS$_DDTF_SQLColumns_O

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_SQLFOREIGNKEYS_O
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_SQLFOREIGNKEYS_O" FORCE
AUTHID CURRENT_USER
AS OBJECT (
  PKTABLE_CAT   VARCHAR2(510),
  PKTABLE_SCHEM VARCHAR2(256),
  PKTABLE_NAME  VARCHAR2(256),
  PKCOLUMN_NAME VARCHAR2(256),
  FKTABLE_CAT   VARCHAR2(510),
  FKTABLE_SCHEM VARCHAR2(256),
  FKTABLE_NAME  VARCHAR2(256),
  FKCOLUMN_NAME VARCHAR2(256),
  KEY_SEQ       NUMBER,
  UPDATE_RULE   NUMBER,
  DELETE_RULE   NUMBER,
  FK_NAME       VARCHAR2(256),
  PK_NAME       VARCHAR2(256),
  DEFERRABILITY NUMBER
)

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_SQLFOREIGNKEYS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_SQLFOREIGNKEYS_T" FORCE
AS TABLE OF
  SYS.HS$_DDTF_SQLForeignKeys_O

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_SQLPRIMARYKEYS_O
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_SQLPRIMARYKEYS_O" FORCE
AUTHID CURRENT_USER
AS OBJECT (
  TABLE_CAT   VARCHAR2(510),
  TABLE_SCHEM VARCHAR2(256),
  TABLE_NAME  VARCHAR2(256),
  COLUMN_NAME VARCHAR2(256),
  KEY_SEQ     NUMBER,
  PK_NAME     VARCHAR2(256)
)

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_SQLPRIMARYKEYS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_SQLPRIMARYKEYS_T" FORCE
AS TABLE OF
  SYS.HS$_DDTF_SQLPrimaryKeys_O

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_SQLPROCEDURES_O
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_SQLPROCEDURES_O" FORCE
AUTHID CURRENT_USER
AS OBJECT (
  PROCEDURE_CAT     VARCHAR2(128),
  PROCEDURE_SCHEM   VARCHAR2(128),
  PROCEDURE_NAME    VARCHAR2(128),
  NUM_INPUT_PARAMS  NUMBER,
  NUM_OUTPUT_PARAMS NUMBER,
  NUM_RESULT_SETS   NUMBER,
  REMARKS           VARCHAR2(2000),
  PROCEDURE_TYPE    NUMBER
)

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_SQLPROCEDURES_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_SQLPROCEDURES_T" FORCE
AS TABLE OF
  SYS.HS$_DDTF_SQLProcedures_O

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_SQLSTATISTICS_O
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_SQLSTATISTICS_O" FORCE
AUTHID CURRENT_USER
AS OBJECT (
  TABLE_CAT        VARCHAR2(510),
  TABLE_SCHEM      VARCHAR2(256),
  TABLE_NAME       VARCHAR2(256),
  NON_UNIQUE       NUMBER,
  INDEX_QUALIFIER  VARCHAR2(256),
  INDEX_NAME       VARCHAR2(256),
  TYPE             NUMBER,
  ORDINAL_POSITION NUMBER,
  COLUMN_NAME      VARCHAR2(256),
  ASC_OR_DESC      VARCHAR2(1),
  CARDINALITY      NUMBER,
  PAGES            NUMBER,
  FILTER_CONDITION VARCHAR2(256)
)

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_SQLSTATISTICS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_SQLSTATISTICS_T" FORCE
AS TABLE OF
  SYS.HS$_DDTF_SQLStatistics_O

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_SQLTABLES_O
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_SQLTABLES_O" FORCE
AUTHID CURRENT_USER
AS OBJECT (
  TABLE_CAT   VARCHAR2(510),
  TABLE_SCHEM VARCHAR2(256),
  TABLE_NAME  VARCHAR2(256),
  TABLE_TYPE  VARCHAR2(256),
  REMARKS     VARCHAR2(2000)
)

/
--------------------------------------------------------
--  DDL for Type HS$_DDTF_SQLTABLES_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS$_DDTF_SQLTABLES_T" FORCE
AS TABLE OF
  SYS.HS$_DDTF_SQLTables_O

/
--------------------------------------------------------
--  DDL for Type HS_PARTITION_OBJ
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS_PARTITION_OBJ" authid current_user AS OBJECT
 (low_value number,
 high_value number,
 position  number);

/

  GRANT EXECUTE ON "SYS"."HS_PARTITION_OBJ" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type HS_PART_OBJ
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS_PART_OBJ" authid current_user AS OBJECT
 (low_value sys.HSBLKValAry,
 high_value sys.HSBLKValAry,
 col_name     sys.HSBLKNamLst,
 col_type     sys.HSBLKNamLst,
 position   number);

/

  GRANT EXECUTE ON "SYS"."HS_PART_OBJ" TO PUBLIC;
  GRANT EXECUTE ON "SYS"."HS_PART_OBJ" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type HS_SAMPLE_OBJ
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HS_SAMPLE_OBJ" authid current_user AS OBJECT
 (low_value varchar2(4000),
 high_value varchar2(4000),
 position  number,
 data_type varchar2(106));

/

  GRANT EXECUTE ON "SYS"."HS_SAMPLE_OBJ" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type HTTPURITYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."HTTPURITYPE" 
  authid current_user under sys.UriType
(
  -- url varchar2(4000),
  overriding member function getExternalUrl return varchar2 deterministic,
  overriding member function getUrl return varchar2 deterministic,
  -- returns the lob value of the pointed URL
  overriding member function getClob RETURN clob,
  overriding member function getBlob RETURN blob,
  overriding member function getBlob(csid IN NUMBER) RETURN blob,
  static function createUri(httpuri in varchar2) return httpuritype,
  -- new fcns in 9.2
  overriding member function getXML return sys.XMLType,
  constructor function HttpUriType(url in varchar2)
    return self as result,
  overriding member function getContentType RETURN varchar2,
  overriding member function getClob(content OUT varchar2) RETURN clob,
  overriding member function getBlob(content OUT varchar2) RETURN blob,
  overriding member function getXML(content OUT varchar2)
    RETURN sys.XMLType
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."HTTPURITYPE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
17e8 515
dfJ26TgcB8Jhu0XBEIxJrAPybtgwg81ULiAFfHRVrZ2sxLSpnA2VqbKyI8ikG3/JukEUxNf6
sPsFAf1hhznSxtCJAZOh6yFzVAV5efuYp1r0I122+uxc8MiXMZ6nHx+aEywPR2S7T6bAAOEE
NxCpeuljm5OHYg7bZelETuiXWdHVVA76nlis5utNnoqavslsDn9VjtRKLs2pr8JIw/uw5gEM
a0pRxFtbWwh3vapdHyHoEZzUd7arfRf17X+MHkgnG1+PxA+lTQ98lemH8HtroHdiMXz6jp7W
fkbD5jtR/7zbTTmQ82rvT4SiZFp4Jt/FxV2I5eN+0LZXWY9MdEl8+VmppJ1Cgko15dzZc3GM
gRn2c4p3puB8DNg0SChQCL1QCgO9mfAFNuQzuEKIWuqCwhB7m3WbCQC4b4mnYP13G8D2vowS
qPDoAUYBYy1snQw9yQxHIi9xLLbn3cI/vZwPNuxWzV2ePva/qd0C4DyreniKRnstSvUGN2r/
w0hpdyqk5b9vjlRiR2XCnvYjz8AZl0GkcoLYrWfNd4g4eoourDtuxN+LHdKxi9YLfYP9i6w0
ggF7VmLeiGO/Vjz7ImfCmkhmsYUsFOAoDRNA3mdqoIw4hebaMwfeTdsxEATOri8ojyAOHBL8
YUeGlFogmyyCuJbTYFj/Pm/FTatB0P7vQ2jo3KUxwoyufIS5n/rfq1GpHy1/E/2XhrcJz2eH
wOKR3mw7SOF+9+qDZ7idBQILmiYzsTlH4/rlRwpxE3rHSf1HP6tm2v3Et7QuknmWlsRQvyR6
FjJr5aJSEnFBq3XP0WXvPSese7YqJWchcekFj4Plwko4z3gvcgwoQYcpvRDAjg81iuXjDBTS
lELc9d+08P4+owEBS2WfnS61QkoZqJRBCVpwVPccHHbt8CCXmDXizz56LBT4O5bX4QyXEk2D
9T0rUaKcc9QxxGQfT7yHNIviF271uW2w0fSadWbPXcg8MpO7k44Hp2bRizXf1MZwNLO+OwGw
SYpo+cTCCL6O8L9d8Jk7tLGdli6ajCoQmEJzv2Gslok/UCKlIkY/3hQskD1xsbkUgeInvuoa
S1BUR0kelUhdbRPawz25nYyD50h+NJWQq79EdB3tvjrt4AMTBVzuW2ZzCa/57xLfZjJq14VL
EE2V22hhre/75tqq0A6d81ipsT2G9Tw1QFAhxZaMrKxB7d/oD7nCa4wgqjgqjinlnRJUf61Z
GZUzJTiCzUwtn1X1IsD+oU3+GVvQxhcD+qPqyTtLxc2Fat0Ihj0gIPqVbA==

/

  GRANT EXECUTE ON "SYS"."HTTPURITYPE" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type INDEXREBUILDLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."INDEXREBUILDLIST" IS TABLE OF SYS.IndexRebuildRecord

/
--------------------------------------------------------
--  DDL for Type INDEXREBUILDRECORD
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."INDEXREBUILDRECORD" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
d
fd ef
SVsTJcSzLjw7rrDYrpHrBSqQRlcwgzLwAJkVfC9AkPjVSFmvY5D1WbeEXlpmsR4HXjUTNS9E
NaXBE2kWRAinhkHBQ4ciTy9HC54snpz+zSLMUyIPtoU5z1yM4C+IqQaObfgWoY4632aGEgc2
UKHyoI7pvhMCt98BqkaSSSEc54xSOzvI06ia1cb24NqMW1S3Ooe3QGzE1wnKMwgSdqmD/Xir
sFJUcfcXOouZL/va5Q==

/
--------------------------------------------------------
--  DDL for Type IREC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."IREC" FORCE AS OBJECT(
    iobjn  number,
    dist   number
);

/
--------------------------------------------------------
--  DDL for Type ITAB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ITAB" AS TABLE OF IREC;

/
--------------------------------------------------------
--  DDL for Type ITEMSET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ITEMSET" AS OBJECT(
       itemset_id NUMBER,
       support NUMBER,
       length NUMBER,
       total_tranx   NUMBER,
       item  SYS.AnyData);

/

  GRANT EXECUTE ON "SYS"."ITEMSET" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ITEMSETS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ITEMSETS" AS TABLE OF itemset;

/

  GRANT EXECUTE ON "SYS"."ITEMSETS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JDOM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JDOM_T" FORCE
                                        AUTHID DEFINER AS
 OPAQUE VARYING (*) USING library DBMS_JDOM_LIB
(
  /* parse from string */
  STATIC FUNCTION  parse(jsn IN varchar2) return JDOM_T,
  STATIC FUNCTION  parse(jsn IN CLOB) return JDOM_T,
  STATIC FUNCTION  parse(jsn IN BLOB) return JDOM_T,
  STATIC FUNCTION  parse(jsn IN BLOB, format IN VARCHAR2) return JDOM_T,

  /* create empty object/array*/
  STATIC FUNCTION  create_Obj return JDOM_T,
  STATIC FUNCTION  create_Arr return JDOM_T,

  /* serialize, convert */
  MEMBER FUNCTION  stringify      return VARCHAR2,
  MEMBER FUNCTION  to_String      return VARCHAR2,
  MEMBER FUNCTION  to_Clob(c CLOB) return CLOB,
  MEMBER FUNCTION  to_Blob(b BLOB) return BLOB,

  MEMBER FUNCTION  to_Boolean   return BOOLEAN,
  MEMBER FUNCTION  to_Number    return NUMBER,
  MEMBER FUNCTION  to_Date      return DATE,
  MEMBER FUNCTION  to_Timestamp return TIMESTAMP,

  /* introspection */
  MEMBER FUNCTION  is_Object    return BOOLEAN,
  MEMBER FUNCTION  is_Array     return BOOLEAN,

  MEMBER FUNCTION  is_Scalar    return BOOLEAN,
  MEMBER FUNCTION  is_String    return BOOLEAN,
  MEMBER FUNCTION  is_Number    return BOOLEAN,
  MEMBER FUNCTION  is_Boolean   return BOOLEAN,
  MEMBER FUNCTION  is_True      return BOOLEAN,
  MEMBER FUNCTION  is_False     return BOOLEAN,
  MEMBER FUNCTION  is_Null      return BOOLEAN,
  MEMBER FUNCTION  is_Date      return BOOLEAN,
  MEMBER FUNCTION  is_Timestamp return BOOLEAN,
  -- todo oranum, etc

  MEMBER FUNCTION  get_Size RETURN NUMBER,

  MEMBER FUNCTION  clone RETURN JDOM_T,

  /* error handling, can be combined like flags (3 = 1+2) */
  /* 0: raise no error  */
  /* 1: raise error on missing key */
  /* 2: raise on type mismatch  */
  MEMBER FUNCTION  on_Error(val NUMBER) RETURN BOOLEAN,

  /* object functions */
  MEMBER FUNCTION  put(key VARCHAR2, val VARCHAR2) RETURN BOOLEAN,

  MEMBER FUNCTION  put(key VARCHAR2, val NUMBER) RETURN BOOLEAN,
  MEMBER FUNCTION  put(key VARCHAR2, val BOOLEAN) RETURN BOOLEAN,
  MEMBER FUNCTION  put(key VARCHAR2, val DATE) RETURN BOOLEAN,
  MEMBER FUNCTION  put(key VARCHAR2, val TIMESTAMP) RETURN BOOLEAN,
  MEMBER FUNCTION  put(key VARCHAR2, val CLOB) RETURN BOOLEAN,
  MEMBER FUNCTION  put(key VARCHAR2, val BLOB) RETURN BOOLEAN,
  MEMBER FUNCTION  put(key VARCHAR2, val JDOM_T) RETURN BOOLEAN,
  MEMBER FUNCTION  put_Null(key VARCHAR2) RETURN BOOLEAN,

  MEMBER FUNCTION  get(key VARCHAR2) RETURN JDOM_T,
  MEMBER FUNCTION  get_String(key VARCHAR2) RETURN VARCHAR2,
  MEMBER FUNCTION  get_Number(key VARCHAR2) RETURN NUMBER,
  MEMBER FUNCTION  get_Boolean(key VARCHAR2) RETURN BOOLEAN,
  MEMBER FUNCTION  get_Date(key VARCHAR2) RETURN DATE,
  MEMBER FUNCTION  get_Timestamp(key VARCHAR2) RETURN TIMESTAMP,
  MEMBER FUNCTION  get_Clob(key VARCHAR2, c CLOB) RETURN CLOB,
  MEMBER FUNCTION  get_Blob(key VARCHAR2, b BLOB) RETURN BLOB,

  MEMBER FUNCTION  has_Key(key VARCHAR2) RETURN BOOLEAN,
  MEMBER FUNCTION  get_Keys RETURN JSON_KEY_LIST,
  MEMBER FUNCTION  get_Type(key VARCHAR2) RETURN VARCHAR2,
  MEMBER FUNCTION  remove(key VARCHAR2) RETURN BOOLEAN,
  MEMBER FUNCTION  rename_Key(keyOld VARCHAR2, keyNew VARCHAR2) RETURN BOOLEAN,

  /* array functions*/
  MEMBER FUNCTION  append(val VARCHAR2) RETURN BOOLEAN,
  MEMBER FUNCTION  append(val NUMBER) RETURN BOOLEAN,
  MEMBER FUNCTION  append(val BOOLEAN) RETURN BOOLEAN,
  MEMBER FUNCTION  append(val DATE) RETURN BOOLEAN,
  MEMBER FUNCTION  append(val TIMESTAMP) RETURN BOOLEAN,
  MEMBER FUNCTION  append(val CLOB) RETURN BOOLEAN,
  MEMBER FUNCTION  append(val BLOB) RETURN BOOLEAN,
  MEMBER FUNCTION  append(val JDOM_T) RETURN BOOLEAN,
  MEMBER FUNCTION  append_Null RETURN BOOLEAN,

  MEMBER FUNCTION  put(pos NUMBER, val VARCHAR2, overwrite BOOLEAN)
                   RETURN BOOLEAN,
  MEMBER FUNCTION  put(pos NUMBER, val NUMBER, overwrite BOOLEAN)
                   RETURN BOOLEAN,
  MEMBER FUNCTION  put(pos NUMBER, val BOOLEAN, overwrite BOOLEAN)
                   RETURN BOOLEAN,
  MEMBER FUNCTION  put(pos NUMBER, val DATE, overwrite BOOLEAN)
                   RETURN BOOLEAN,
  MEMBER FUNCTION  put(pos NUMBER, val TIMESTAMP, overwrite BOOLEAN)
                   RETURN BOOLEAN,
  MEMBER FUNCTION  put(pos NUMBER, val CLOB, overwrite BOOLEAN)
                   RETURN BOOLEAN,
  MEMBER FUNCTION  put(pos NUMBER, val BLOB, overwrite BOOLEAN)
                   RETURN BOOLEAN,
  MEMBER FUNCTION  put(pos NUMBER, val JDOM_T, overwrite BOOLEAN)
                   RETURN BOOLEAN,
  MEMBER FUNCTION  put_Null(pos NUMBER, overwrite BOOLEAN) RETURN BOOLEAN,

  MEMBER FUNCTION  get(pos NUMBER) RETURN JDOM_T,
  MEMBER FUNCTION  get_String(pos NUMBER) RETURN VARCHAR2,
  MEMBER FUNCTION  get_Number(pos NUMBER) RETURN NUMBER,
  MEMBER FUNCTION  get_Boolean(pos NUMBER) RETURN BOOLEAN,
  MEMBER FUNCTION  get_Date(pos NUMBER) RETURN DATE,
  MEMBER FUNCTION  get_Timestamp(pos NUMBER) RETURN TIMESTAMP,
  MEMBER FUNCTION  get_Clob(pos NUMBER, c CLOB) RETURN CLOB,
  MEMBER FUNCTION  get_Blob(pos NUMBER, b BLOB) RETURN BLOB,

  MEMBER FUNCTION  get_Type(pos NUMBER) RETURN VARCHAR2,
  MEMBER FUNCTION  remove(pos NUMBER) RETURN BOOLEAN,

  /* modification ('select' is called 'redact') */
  MEMBER FUNCTION  patch(spec VARCHAR2) RETURN BOOLEAN,
  MEMBER FUNCTION  mergepatch(patch VARCHAR2) RETURN BOOLEAN,
  MEMBER FUNCTION  redact(spec VARCHAR2) RETURN BOOLEAN,
  MEMBER FUNCTION  patch(spec JDOM_T) RETURN BOOLEAN,
  MEMBER FUNCTION  mergepatch(patch JDOM_T) RETURN BOOLEAN,
  MEMBER FUNCTION  redact(spec JDOM_T) RETURN BOOLEAN
)  NOT PERSISTABLE
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."JDOM_T" AS
 -- todo empty arry
 -- parses string to dom
 STATIC FUNCTION parse(jsn IN varchar2) RETURN JDOM_T is EXTERNAL
    name "parse" library DBMS_JDOM_LIB WITH CONTEXT
    parameters(context, jsn OCIString, jsn INDICATOR sb4,
               RETURN DURATION OCIDuration, RETURN INDICATOR sb4, return);

 STATIC FUNCTION parse(jsn IN CLOB) RETURN JDOM_T is EXTERNAL
    name "parseClob" library DBMS_JDOM_LIB WITH CONTEXT
    parameters(context, jsn OCILobLocator, jsn INDICATOR sb4,
               RETURN DURATION OCIDuration, RETURN INDICATOR sb4, return);

 STATIC FUNCTION parse(jsn IN BLOB) RETURN JDOM_T is EXTERNAL
    name "parseBlob" library DBMS_JDOM_LIB WITH CONTEXT
    parameters(context, jsn OCILobLocator, jsn INDICATOR sb4,
               RETURN DURATION OCIDuration, RETURN INDICATOR sb4, return);

 STATIC FUNCTION parse(jsn IN BLOB, format IN varchar2) RETURN JDOM_T
    is EXTERNAL
    name "parseBlobFrm" library DBMS_JDOM_LIB WITH CONTEXT
    parameters(context, jsn OCILobLocator, jsn INDICATOR sb4,
               format OCIString, format INDICATOR sb4,
               RETURN DURATION OCIDuration, RETURN INDICATOR sb4, return);

 -- creates an empty dom (object)
 STATIC FUNCTION create_Obj RETURN JDOM_T is EXTERNAL
    name "createObj" library DBMS_JDOM_LIB WITH CONTEXT
    parameters(context, RETURN DURATION OCIDuration,
               RETURN INDICATOR sb4, return);

  -- creates an empty dom (object)
 STATIC FUNCTION create_Arr RETURN JDOM_T is EXTERNAL
    name "createArr" library DBMS_JDOM_LIB WITH CONTEXT
    parameters(context, RETURN DURATION OCIDuration,
               RETURN INDICATOR sb4, return);

  MEMBER FUNCTION stringify RETURN VARCHAR2 is EXTERNAL
    name "stringify" library DBMS_JDOM_LIB WITH CONTEXT
    parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, RETURN OCIString);

  MEMBER FUNCTION to_String RETURN VARCHAR2 is EXTERNAL
    name "toString" library DBMS_JDOM_LIB WITH CONTEXT
    parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, RETURN OCIString);

  MEMBER FUNCTION to_Number RETURN NUMBER IS EXTERNAL
     name "toNumber" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

  MEMBER FUNCTION to_Clob(c CLOB) return CLOB IS EXTERNAL
     name "toClob" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        c OCILobLocator, c INDICATOR sb2,
        RETURN DURATION OCIDuration,
        RETURN INDICATOR sb4, return);

  MEMBER FUNCTION to_Blob(b BLOB) return BLOB IS EXTERNAL
     name "toBlob" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        b OCILobLocator, b INDICATOR sb2,
        RETURN DURATION OCIDuration,
        RETURN INDICATOR sb4, return);

  MEMBER FUNCTION to_Boolean RETURN BOOLEAN IS EXTERNAL
     name "toBoolean" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

  MEMBER FUNCTION to_Date RETURN DATE IS EXTERNAL
     name "toDate" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

  MEMBER FUNCTION to_Timestamp RETURN TIMESTAMP IS EXTERNAL
     name "toTStamp" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return OCIDateTime);

  MEMBER FUNCTION is_Object RETURN BOOLEAN is EXTERNAL
     name "isObject" library DBMS_JDOM_LIB WITH CONTEXT
    parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

   MEMBER FUNCTION is_Array RETURN BOOLEAN is EXTERNAL
     name "isArray" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

   MEMBER FUNCTION is_Scalar RETURN BOOLEAN is EXTERNAL
     name "isScalar" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

   MEMBER FUNCTION is_String RETURN BOOLEAN is EXTERNAL
     name "isString" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

   MEMBER FUNCTION is_Number RETURN BOOLEAN is EXTERNAL
     name "isNumber" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

   MEMBER FUNCTION is_Boolean RETURN BOOLEAN is EXTERNAL
     name "isBoolean" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

   MEMBER FUNCTION is_True RETURN BOOLEAN is EXTERNAL
     name "isTrue" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

   MEMBER FUNCTION is_False RETURN BOOLEAN is EXTERNAL
     name "isFalse" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

  MEMBER FUNCTION is_Null RETURN BOOLEAN is EXTERNAL
     name "isNull" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

  MEMBER FUNCTION is_Date RETURN BOOLEAN is EXTERNAL
     name "isDate" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

  MEMBER FUNCTION is_Timestamp RETURN BOOLEAN is EXTERNAL
     name "isTStamp" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, return);

   MEMBER FUNCTION  get_Size RETURN NUMBER  is EXTERNAL
     name "getSize" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        RETURN INDICATOR sb4, RETURN OCINumber);

   MEMBER FUNCTION clone RETURN JDOM_T is EXTERNAL
     name "clone" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
        return DURATION OCIDuration, return INDICATOR sb4, return);

   MEMBER FUNCTION on_Error(val NUMBER)  RETURN BOOLEAN is EXTERNAL
     name "onError" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
               val OCINumber, val INDICATOR sb2,
        RETURN INDICATOR sb4, return);

    -- returns TRUE iff object has the requested key
    MEMBER FUNCTION has_Key(key VARCHAR2) RETURN BOOLEAN is EXTERNAL
     name "hasKey_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                key OCIString, key INDICATOR sb2,
                RETURN INDICATOR sb4, return);

    MEMBER FUNCTION get_Keys RETURN JSON_KEY_LIST is EXTERNAL
     name "getKeys_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                RETURN INDICATOR sb4, return);

    MEMBER FUNCTION rename_Key(keyOld VARCHAR2, keyNew VARCHAR2)
        RETURN BOOLEAN is EXTERNAL
     name "renameKey_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                keyOld OCIString, keyOld INDICATOR sb2,
                keyNew OCIString, keyNew INDICATOR sb2,
                RETURN INDICATOR sb4, return);

    MEMBER FUNCTION get_Type(key VARCHAR2) RETURN VARCHAR2 is EXTERNAL
     name "getType_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                key OCIString, key INDICATOR sb2,
                RETURN INDICATOR sb4, RETURN OCIString);

    MEMBER FUNCTION get_Type(pos NUMBER) RETURN VARCHAR2 is EXTERNAL
     name "getType_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                pos OCINumber, pos INDICATOR sb2,
                RETURN INDICATOR sb4, RETURN OCIString);

    MEMBER FUNCTION remove(key VARCHAR2) RETURN BOOLEAN is EXTERNAL
     name "remove_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                key OCIString, key INDICATOR sb2,
                RETURN INDICATOR sb4, return);

     MEMBER FUNCTION remove(pos NUMBER) RETURN BOOLEAN is EXTERNAL
     name "remove_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                pos OCINumber, pos INDICATOR sb2,
                RETURN INDICATOR sb4, return);

    -- the putters should be procedures instead of functions
   MEMBER FUNCTION put(key VARCHAR2, val VARCHAR2) RETURN BOOLEAN is EXTERNAL
     name "setString_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                       key OCIString, key INDICATOR sb2,
                       val OCIString, val INDICATOR sb2,
                       RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put(key VARCHAR2, val NUMBER) RETURN BOOLEAN is EXTERNAL
     name "setNumber_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                       key OCIString, key INDICATOR sb2,
                       val OCINumber, val INDICATOR sb2,
                       RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put(key VARCHAR2, val BOOLEAN) RETURN BOOLEAN is EXTERNAL
     name "setBoolean_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                       key OCIString, key INDICATOR sb2,
                       val, val INDICATOR sb2,
                       RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put(key VARCHAR2, val DATE) RETURN BOOLEAN is EXTERNAL
     name "setDate_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                       key OCIString, key INDICATOR sb2,
                       val OCIDate, val INDICATOR sb2,
                       RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put(key VARCHAR2, val TIMESTAMP) RETURN BOOLEAN
                                                       IS EXTERNAL
     name "setTStamp_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                       key OCIString, key INDICATOR sb2,
                       val OCIDateTime, val INDICATOR sb2,
                       RETURN INDICATOR sb4, return);

     MEMBER FUNCTION put(key VARCHAR2, val CLOB) RETURN BOOLEAN IS EXTERNAL
     name "setClob_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                       key OCIString, key INDICATOR sb2,
                       val OCILobLocator, val INDICATOR sb2,
                       RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put(key VARCHAR2, val BLOB) RETURN BOOLEAN IS EXTERNAL
    name "setBlob_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                       key OCIString, key INDICATOR sb2,
                       val OCILobLocator, val INDICATOR sb2,
                       RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put(key VARCHAR2, val JDOM_T) RETURN BOOLEAN IS EXTERNAL
     name "set_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                       key OCIString, key INDICATOR sb2,
                       val, val INDICATOR sb2,
                       RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put_Null(key VARCHAR2) RETURN BOOLEAN is EXTERNAL
     name "setNull_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                       key OCIString, key INDICATOR sb2,
                       RETURN INDICATOR sb4, return);

    -- put with pos
    MEMBER FUNCTION  put(pos NUMBER, val VARCHAR2, overwrite BOOLEAN)
                     RETURN BOOLEAN is EXTERNAL
     name "setString_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        pos OCINumber, pos INDICATOR sb2,
                        val OCIString, val INDICATOR sb2,
                        overwrite, overwrite  INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put(pos NUMBER, val NUMBER, overwrite BOOLEAN)
                    RETURN BOOLEAN is EXTERNAL
     name "setNumber_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        pos OCINumber, pos INDICATOR sb2,
                        val OCINumber, val INDICATOR sb2,
                        overwrite, overwrite  INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put(pos NUMBER, val BOOLEAN, overwrite BOOLEAN)
                    RETURN BOOLEAN is EXTERNAL
     name "setBoolean_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        pos OCINumber, pos INDICATOR sb2,
                        val, val INDICATOR sb2,
                        overwrite, overwrite  INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

   MEMBER FUNCTION put(pos NUMBER, val DATE, overwrite BOOLEAN)
                   RETURN BOOLEAN is EXTERNAL
     name "setBoolean_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        pos OCINumber, pos INDICATOR sb2,
                        val OCIDate, val INDICATOR sb2,
                        overwrite, overwrite  INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put(pos NUMBER, val TIMESTAMP, overwrite BOOLEAN)
                    RETURN BOOLEAN is EXTERNAL
     name "setTStamp_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        pos OCINumber, pos INDICATOR sb2,
                        val OCIDateTime, val INDICATOR sb2,
                        overwrite, overwrite  INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put(pos NUMBER, val CLOB, overwrite BOOLEAN)
                    RETURN BOOLEAN is EXTERNAL
     name "setClob_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        pos OCINumber, pos INDICATOR sb2,
                        val OCILobLocator, val INDICATOR sb2,
                        overwrite, overwrite  INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put(pos NUMBER, val BLOB, overwrite BOOLEAN)
                    RETURN BOOLEAN is EXTERNAL
     name "setBlob_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        pos OCINumber, pos INDICATOR sb2,
                        val OCILobLocator, val INDICATOR sb2,
                        overwrite, overwrite  INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put(pos NUMBER, val JDOM_T, overwrite BOOLEAN)
                    RETURN BOOLEAN is EXTERNAL
     name "set_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        pos OCINumber, pos INDICATOR sb2,
                        val, val INDICATOR sb2,
                        overwrite, overwrite  INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION put_Null(pos NUMBER, overwrite BOOLEAN)
                    RETURN BOOLEAN is EXTERNAL
     name "setNull_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                       pos OCINumber, pos INDICATOR sb2,
                       overwrite, overwrite  INDICATOR sb2,
                       RETURN INDICATOR sb4, return);


   -- append (end of array)
    MEMBER FUNCTION append(val JDOM_T) RETURN BOOLEAN is EXTERNAL
     name "add_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        val, val INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION append(val VARCHAR2) RETURN BOOLEAN is EXTERNAL
     name "addString_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        val OCIString, val INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION append(val NUMBER) RETURN BOOLEAN is EXTERNAL
     name "addNumber_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        val OCINumber, val INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION append(val BOOLEAN) RETURN BOOLEAN is EXTERNAL
     name "addBoolean_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        val , val INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION append(val DATE) RETURN BOOLEAN is EXTERNAL
     name "addDate_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        val OCIDate, val INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION append(val TIMESTAMP) RETURN BOOLEAN is EXTERNAL
     name "addTStamp_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        val OCIDateTime, val INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION append(val CLOB) RETURN BOOLEAN is EXTERNAL
     name "addClob_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        val OCILobLocator, val INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION append(val BLOB) RETURN BOOLEAN is EXTERNAL
     name "addBlob_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        val OCILobLocator, val INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION append_Null RETURN BOOLEAN is EXTERNAL
     name "addNull_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                        RETURN INDICATOR sb4, return);

    MEMBER FUNCTION get(key VARCHAR2) RETURN JDOM_T is EXTERNAL
     name "get_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                key OCIString, key INDICATOR sb2,
                RETURN DURATION OCIDuration,
                RETURN INDICATOR sb4, return);

    MEMBER FUNCTION get(pos NUMBER) RETURN JDOM_T is EXTERNAL
     name "get_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                pos OCINumber, pos INDICATOR sb2,
                RETURN DURATION OCIDuration,
                RETURN INDICATOR sb4, return);

   -- RETURN an Scalar val as VARCHAR2, non string vals will be casted to
   -- to strings. If a key does not exist we RETURN NULL;
   MEMBER FUNCTION get_String(key VARCHAR2) RETURN VARCHAR2 is EXTERNAL
     name "getString_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                key OCIString, key INDICATOR sb2,
                RETURN INDICATOR sb4, RETURN OCIString);

   MEMBER FUNCTION get_String(pos NUMBER) RETURN VARCHAR2 is EXTERNAL
     name "getString_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                pos OCINumber, pos INDICATOR sb2,
                RETURN INDICATOR sb4, RETURN OCIString);

   MEMBER FUNCTION get_Number(key VARCHAR2) RETURN NUMBER is EXTERNAL
     name "getNumber_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                key OCIString, key INDICATOR sb2,
                RETURN INDICATOR sb4, RETURN OCINumber);

   MEMBER FUNCTION get_Number(pos NUMBER) RETURN NUMBER is EXTERNAL
     name "getNumber_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                pos OCINumber, pos INDICATOR sb2,
                RETURN INDICATOR sb4, RETURN OCINumber);

   MEMBER FUNCTION get_Date(key VARCHAR2) RETURN DATE is EXTERNAL
     name "getDate_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                key OCIString, key INDICATOR sb2,
                RETURN INDICATOR sb4, RETURN OCIDate);

   MEMBER FUNCTION get_Date(pos NUMBER) RETURN DATE is EXTERNAL
     name "getDate_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                pos OCINumber, pos INDICATOR sb2,
                RETURN INDICATOR sb4, RETURN OCIDate);

   MEMBER FUNCTION get_Timestamp(key VARCHAR2) RETURN TIMESTAMP is EXTERNAL
     name "getTStamp_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                key OCIString, key INDICATOR sb2,
                RETURN INDICATOR sb4, RETURN OCIDateTime);

   MEMBER FUNCTION get_Timestamp(pos NUMBER) RETURN TIMESTAMP is EXTERNAL
     name "getTStamp_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                pos OCINumber, pos INDICATOR sb2,
                RETURN INDICATOR sb4, RETURN OCIDateTime);

   MEMBER FUNCTION get_Boolean(key VARCHAR2) RETURN BOOLEAN is EXTERNAL
     name "getBoolean_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                key OCIString, key INDICATOR sb2,
                RETURN INDICATOR sb4, RETURN);

   MEMBER FUNCTION get_Boolean(pos NUMBER) RETURN BOOLEAN is EXTERNAL
     name "getBoolean_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                pos OCINumber, pos INDICATOR sb2,
                RETURN INDICATOR sb4, RETURN );

   MEMBER FUNCTION get_Clob(key VARCHAR2, c CLOB)
      RETURN CLOB is EXTERNAL
     name "getClob_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                key OCIString, key INDICATOR sb2,
                c OCILobLocator, c INDICATOR sb2,
                RETURN DURATION OCIDuration,
                RETURN INDICATOR sb4, RETURN);

   MEMBER FUNCTION get_Blob(key VARCHAR2, b BLOB)
     RETURN BLOB is EXTERNAL
     name "getBlob_Obj" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                key OCIString, key INDICATOR sb2,
                b OCILobLocator, b INDICATOR sb2,
                RETURN DURATION OCIDuration,
                RETURN INDICATOR sb4, RETURN);

   MEMBER FUNCTION get_Clob(pos NUMBER, c CLOB)
     RETURN CLOB is EXTERNAL
     name "getClob_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                pos OCINumber, pos INDICATOR sb2,
                c OCILobLocator, c INDICATOR sb2,
                RETURN DURATION OCIDuration,
                RETURN INDICATOR sb4, RETURN );

    MEMBER FUNCTION get_Blob(pos NUMBER, b BLOB)
     RETURN BLOB is EXTERNAL
     name "getBlob_Arr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                pos OCINumber, pos INDICATOR sb2,
                b OCILobLocator, b INDICATOR sb2,
                RETURN DURATION OCIDuration,
                RETURN INDICATOR sb4, RETURN );

   MEMBER FUNCTION patch(spec VARCHAR2) RETURN BOOLEAN is EXTERNAL
     name "patchStr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                spec OCIString, spec INDICATOR sb2,
                RETURN INDICATOR sb4, return);

   MEMBER FUNCTION mergepatch(patch VARCHAR2) RETURN BOOLEAN is EXTERNAL
     name "mergePatchStr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                patch OCIString, patch INDICATOR sb2,
                RETURN INDICATOR sb4, return);

   MEMBER FUNCTION redact(spec VARCHAR2) RETURN BOOLEAN is EXTERNAL
     name "selectStr" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                spec OCIString, spec INDICATOR sb2,
                RETURN INDICATOR sb4, return);

   MEMBER FUNCTION patch(spec JDOM_T) RETURN BOOLEAN is EXTERNAL
     name "patchPls" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                spec, spec INDICATOR sb2,
                RETURN INDICATOR sb4, return);

   MEMBER FUNCTION mergepatch(patch JDOM_T) RETURN BOOLEAN is EXTERNAL
     name "mergePatchPls" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                patch, patch INDICATOR sb2,
                RETURN INDICATOR sb4, return);

   MEMBER FUNCTION redact(spec JDOM_T) RETURN BOOLEAN is EXTERNAL
     name "selectPls" library DBMS_JDOM_LIB WITH CONTEXT
     parameters(context, self, self INDICATOR sb2,
                spec, spec INDICATOR sb2,
                RETURN INDICATOR sb4, return);

END;

/

  GRANT EXECUTE ON "SYS"."JDOM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JOB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JOB" FORCE AS OBJECT
(
  -- Job name and classification
  job_name              VARCHAR2(100),  /* 3*M_IDEN + 10 */
  job_class             VARCHAR2(32),
  job_style             VARCHAR2(17),

  -- Program/template related attributes
  -- Lightweight jobs cannot have inlined program
  job_template          VARCHAR2(100),
  program_action        VARCHAR2(4000),
  action_type           VARCHAR2(20),

  -- Schedule related attributes
  -- Lightweight jobs cannot have start_date, end_date or
  -- schedule_limit set.
  schedule_name         VARCHAR2(65),
  repeat_interval       VARCHAR2(4000),
  schedule_limit        INTERVAL DAY TO SECOND,
  start_date            TIMESTAMP WITH TIME ZONE,
  end_date              TIMESTAMP WITH TIME ZONE,
  event_condition       VARCHAR2(4000),
  queue_spec            VARCHAR2(261),

  -- Argument related attributes
  number_of_args        NUMBER,
  arguments             SYS.JOBARG_ARRAY,

  -- Misc other attributes
  -- Of these only priority, logging_level, restartable and
  -- stop_on_window_exit are settable for lightweight jobs
  priority              NUMBER,
  job_weight            NUMBER,
  max_run_duration      INTERVAL DAY TO SECOND,
  max_runs              NUMBER,
  max_failures          NUMBER,
  logging_level         NUMBER,
  restartable           VARCHAR2(5),
  stop_on_window_exit   VARCHAR2(5),
  raise_events          NUMBER,
  comments              VARCHAR2(4000),
  auto_drop             VARCHAR2(5),
  enabled               VARCHAR2(5),
  follow_default_tz     VARCHAR2(5),
  parallel_instances    VARCHAR2(5),
  aq_job                VARCHAR2(5),
  instance_id           NUMBER,
  -- named program and named schedule
  CONSTRUCTOR FUNCTION job
  (
    job_name            IN     VARCHAR2,
    job_style           IN     VARCHAR2 DEFAULT 'REGULAR',
    job_template        IN     VARCHAR2 DEFAULT NULL,
    program_action      IN     VARCHAR2 DEFAULT NULL,
    action_type         IN     VARCHAR2 DEFAULT NULL,
    schedule_name       IN     VARCHAR2 DEFAULT NULL,
    repeat_interval     IN     VARCHAR2 DEFAULT NULL,
    event_condition     IN     VARCHAR2 DEFAULT NULL,
    queue_spec          IN     VARCHAR2 DEFAULT NULL,
    start_date          IN     TIMESTAMP WITH TIME ZONE DEFAULT NULL,
    end_date            IN     TIMESTAMP WITH TIME ZONE DEFAULT NULL,
    number_of_args      IN     NATURAL DEFAULT NULL,
    arguments           IN     SYS.JOBARG_ARRAY DEFAULT NULL,
    job_class           IN     VARCHAR2 DEFAULT 'DEFAULT_JOB_CLASS',
    schedule_limit      IN     INTERVAL DAY TO SECOND DEFAULT NULL,
    priority            IN     NATURAL DEFAULT NULL,
    job_weight          IN     NATURAL DEFAULT NULL,
    max_run_duration    IN     INTERVAL DAY TO SECOND DEFAULT NULL,
    max_runs            IN     NATURAL DEFAULT NULL,
    max_failures        IN     NATURAL DEFAULT NULL,
    logging_level       IN     NATURALN DEFAULT 64,
    restartable         IN     BOOLEAN DEFAULT FALSE,
    stop_on_window_exit IN     BOOLEAN DEFAULT FALSE,
    raise_events        IN     NATURAL DEFAULT NULL,
    comments            IN     VARCHAR2 DEFAULT NULL,
    auto_drop           IN     BOOLEAN DEFAULT TRUE,
    enabled             IN     BOOLEAN DEFAULT FALSE,
    follow_default_tz   IN     BOOLEAN DEFAULT FALSE,
    parallel_instances  IN     BOOLEAN DEFAULT FALSE,
    aq_job              IN     BOOLEAN DEFAULT FALSE,
    instance_id         IN     NATURAL DEFAULT NULL
  )
  RETURN SELF AS RESULT
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."JOB" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
fbf 4d4
H+xFR2e2NCBW3yB86ILcYXrIdKcwg5DqLscFyi/NrZ2suuyIGwfcsAcjI93TpynKaaaVUtHk
taqz6VRLyumnHli0/7kS1SIzhjFMW9xKRe3xnZJadRBmGrOXe4Lf3P3Aq1yGRiuvmeK7pYAV
v2RUcr0/vSoQNILrblg6NbYlRQpd/Volm7b9Y+9yQL+MkYutx6S7W/p2ndlcjIn33wRViDwS
b7HtnG/uGQKGMI/eYa1On4k0V9D4IWpb/24fl1JO/12Hq6rBl0JTTytd11Ww7fDPXRnLNKgo
zdd/hs9t0CSzbn2tzvg3cUbarrXxrjvOg1Fculs6T3wnitBoMBCbR/VhdIx1/bJ2hpcN7EiK
7lCKl2rNPbzm8fs25qufTGsHdn4UA5/q+Rm8ztsj4vGiGIdTZfLyN29vjyEtenG7J4eZeUaY
4qSGsfgoDL64s5BV79hBEDCCxZqsJGyDjJm8RC3QYldL3FmFs7iYT2wysb09Qr2UZrGTxbM/
c25tuJe4n4nZ8SQnYq3Zbra3p3IBa1soOwZmwwqWQapG1e2ugllUubCeP3AL8LkfKZiwE/Dc
+Dx9OAIrZPOjAE/VKm7pDIXLb4MxoQy9W38XnfhogP0EfpPAvUwvuTUq6xCasC3EaQ9ds+n/
KAhRVY3wZyNCnq3h0USh0a58doSXpqaK6w5ul5lax0m9gMp3d+wojyLAhaF0+HMXRIiA/Pz2
QQMhcsyjX+mjLtqSMlYhmhGtDREA8N9Rwx3jUbPmszQOJikg28X9e9c77IthDAoZvvNIudCO
gXpFfZH64WudSgITL2ITmZV5Cwut1UysbwCp6IMZo6HFkXvqSUw8BSupAY2zur3Mcba6qOhh
CTTGReUirB5DpY4SFHfZ9vH0yP4t4fEpaVFRolY4tzsVlcxxBhu6AgzCf4TB5iZBhyaVZfUh
ZiFv9GwhdS9LiQKIo7TzvDzWWMxCPEHzXJWXhBtbyZE1B1D648ihAwFofhVN8kpmuCk1dhrp
gnr988LTz4hMV+DZ3b+Jjg/J2O7xQcWWwN/qiDLraWzfq/PAaxNlvJ9ik5/0YZTFvYzTrRPz
RY6iiIe0bTZHo+dJD8Jv3qCOZ1dPniDvDWJlpNnK0hSR1JxY9XRFRzErXfbD0VdMSZkVVgHy
YLEizqTTP0CP9ZPllHdxb9w0BxZUUDkbHeZwefE4hSNTKT0O6RW/TZVqXjD4MyhhZ5jt

/

  GRANT EXECUTE ON "SYS"."JOB" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JOBARG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JOBARG" FORCE AS OBJECT
(
  arg_position          NUMBER,
  arg_text_value        VARCHAR2(4000),
  arg_anydata_value     SYS.ANYDATA,
  arg_operation         VARCHAR2(5),
  -- Set text argument
  CONSTRUCTOR FUNCTION jobarg
  (
    arg_position        IN     POSITIVEN,
    arg_value           IN     VARCHAR2
  )
  RETURN SELF AS RESULT,
  -- Set anydata argument
  CONSTRUCTOR FUNCTION jobarg
  (
    arg_position        IN     POSITIVEN,
    arg_value           IN     SYS.ANYDATA
  )
  RETURN SELF AS RESULT,
  -- If arg_reset is TRUE then the argument at that position is reset,
  -- otherwise it is set to a NULL value.
  CONSTRUCTOR FUNCTION jobarg
  (
    arg_position        IN     POSITIVEN,
    arg_reset           IN     BOOLEAN DEFAULT FALSE
  )
  RETURN SELF AS RESULT
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."JOBARG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
47e 189
VWKY3FROeSrUPaES18Yk85SruGcwg9e3LkjWfC9gmLk+yYBmXFZFdPzg3YTmkfD3AGA4Pfia
UR2f8oWuPVyjDGAL+L2qPzmIEqyDWPNK4mCdW3RkpvCGyiLfBnqg9/0pdhdn6niD+6D5ikx9
iw1oRcNjKTfOzRN2UGCsYwHAZ5p2UJ3VxD25oVEX55G6slFqLzt95Hbl6BDGTpmwgcANtbkL
jbCjC+ZJ+r1lVyjiFl2zDo/hwKAzGFIAQnq7VDbxZvs+zsO2E/xYOWoEl27kWNO7U74I/lrS
LPLDiBTE0/bBVqjWa29cb6ARHXN4kJnrDR8H9x1jNiiycnGfWSlwnUXQTxVxz59jh+tnh/+1
m+gWYZQaVbQRtJjE2gCHvKatKi/O

/

  GRANT EXECUTE ON "SYS"."JOBARG" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JOBARG_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JOBARG_ARRAY" FORCE AS TABLE OF JOBARG;

/

  GRANT EXECUTE ON "SYS"."JOBARG_ARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JOB_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JOB_ARRAY" AS TABLE OF JOB;

/

  GRANT EXECUTE ON "SYS"."JOB_ARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JOBATTR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JOBATTR" FORCE AS OBJECT
(
  job_name              VARCHAR2(100),  /* 3*M_IDEN + 10 */
  attr_name             VARCHAR2(30),
  char_value            VARCHAR2(4000),
  char_value2           VARCHAR2(4000),
  args_value            SYS.JOBARG_ARRAY,
  num_value             NUMBER,
  timestamp_value       TIMESTAMP WITH TIME ZONE,
  interval_value        INTERVAL DAY TO SECOND,
  CONSTRUCTOR FUNCTION jobattr
  (
    job_name            IN     VARCHAR2,
    attr_name           IN     VARCHAR2,
    attr_value          IN     VARCHAR2,
    attr_value2         IN     VARCHAR2 DEFAULT NULL
  )
  RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION jobattr
  (
    job_name            IN     VARCHAR2,
    attr_name           IN     VARCHAR2,
    attr_value          IN     NUMBER
  )
  RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION jobattr
  (
    job_name            IN     VARCHAR2,
    attr_name           IN     VARCHAR2,
    attr_value          IN     BOOLEAN
  )
  RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION jobattr
  (
    job_name            IN     VARCHAR2,
    attr_name           IN     VARCHAR2,
    attr_value          IN     TIMESTAMP WITH TIME ZONE
  )
  RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION jobattr
  (
    job_name            IN     VARCHAR2,
    attr_name           IN     VARCHAR2,
    attr_value          IN     INTERVAL DAY TO SECOND
  )
  RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION jobattr
  (
    job_name            IN     VARCHAR2,
    attr_name           IN     VARCHAR2,
    attr_value          IN     SYS.JOBARG_ARRAY
  )
  RETURN SELF AS RESULT,
  CONSTRUCTOR FUNCTION jobattr
  (
    job_name            IN     VARCHAR2,
    attr_name           IN     VARCHAR2
  )
  RETURN SELF AS RESULT
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."JOBATTR" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
d65 203
NXlwCEEwN+dhwrgoSQP6YI8a8Ycwg80rLiDWfHRVQp0Vxi7s6PCG5aThdd9euOXbKdvRc7W1
4Mt5PnxwE8WNn6vTLIvtdXqdV6wKKuYnTp4ZfuV1pBaqmciTm4rm1Dw18xYLeSndL87c3OMI
p8P0UHshPcTwwDHyvl1rG9TMEItXUoxZ3Sy2t39mXVRNcAQWBO/WuUP1ha/zMCECfYlQmTUZ
sexecSflA4DkLcz+m4MWTHbujBuvEw7p47e09q18/BHI8fWtofiESCnQQlF1b1prdpVUnH2T
jR7MQBtgSY8vOOrlzl+JltHAoePOjlV0PJ/l+fADHQG7MRmESXP5TkHoPKvD9YdeMrNB02S4
nJ+FzcFV5yEcgK2uEstD8TqqzG68Fqs3peJCXAelOL0XEXM3o08yHXWDpWRoQ2rSqOqUS5Qu
ZcbPOdCdPAjgVkF+gdWltOoig++SxJetXNePSMQz1v/cKiUmPA8tmAO1og9n0HOfjPCcE67D
fSyv

/

  GRANT EXECUTE ON "SYS"."JOBATTR" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JOBATTR_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JOBATTR_ARRAY" AS TABLE OF JOBATTR;

/

  GRANT EXECUTE ON "SYS"."JOBATTR_ARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JOB_DEFINITION
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JOB_DEFINITION" AS OBJECT
(
  -- Job name and classification
  job_name                VARCHAR2(394),  /* 3*M_IDEN + 10 */
  job_class               VARCHAR2(128),
  job_style               VARCHAR2(17),

  -- Program/template related attributes
  -- Lightweight jobs cannot have inlined program
  program_name            VARCHAR2(394),  /* 3*M_IDEN + 10 */
  job_action              VARCHAR2(4000),
  job_type                VARCHAR2(20),

  -- Schedule related attributes
  -- Lightweight jobs cannot have start_date, end_date or
  -- schedule_limit set.
  schedule_name           VARCHAR2(261), /* 2*M_IDEN + 5 */
  repeat_interval         VARCHAR2(4000),
  schedule_limit          INTERVAL DAY TO SECOND,
  start_date              TIMESTAMP WITH TIME ZONE,
  end_date                TIMESTAMP WITH TIME ZONE,
  event_condition         VARCHAR2(4000),
  queue_spec              VARCHAR2(394),  /* 3*M_IDEN + 10 */

  -- Argument related attributes
  number_of_arguments     NUMBER,
  arguments               SYS.JOBARG_ARRAY,

  -- Misc other attributes
  -- Of these only priority, logging_level, restartable and
  -- stop_on_window_close are settable for lightweight jobs
  job_priority            NUMBER,
  job_weight              NUMBER,
  max_run_duration        INTERVAL DAY TO SECOND,
  max_runs                NUMBER,
  max_failures            NUMBER,
  logging_level           NUMBER,
  restartable             VARCHAR2(5),
  stop_on_window_close    VARCHAR2(5),
  raise_events            NUMBER,
  comments                VARCHAR2(4000),
  auto_drop               VARCHAR2(5),
  enabled                 VARCHAR2(5),
  follow_default_timezone VARCHAR2(5),
  parallel_instances      VARCHAR2(5),
  aq_job                  VARCHAR2(5),
  instance_id             NUMBER,
  credential_name         VARCHAR2(65),
  destination             VARCHAR2(4000),
  database_role           VARCHAR2(20),
  allow_runs_in_restricted_mode  VARCHAR2(5),
  restart_on_recovery     VARCHAR2(5),
  restart_on_failure      VARCHAR2(5),
  connect_credential_name         VARCHAR2(65),
  store_output            VARCHAR2(5),
  -- named program and named schedule
  CONSTRUCTOR FUNCTION job_definition
  (
    job_name                IN     VARCHAR2,
    job_style               IN     VARCHAR2 DEFAULT 'REGULAR',
    program_name            IN     VARCHAR2 DEFAULT NULL,
    job_action              IN     VARCHAR2 DEFAULT NULL,
    job_type                IN     VARCHAR2 DEFAULT NULL,
    schedule_name           IN     VARCHAR2 DEFAULT NULL,
    repeat_interval         IN     VARCHAR2 DEFAULT NULL,
    event_condition         IN     VARCHAR2 DEFAULT NULL,
    queue_spec              IN     VARCHAR2 DEFAULT NULL,
    start_date              IN     TIMESTAMP WITH TIME ZONE DEFAULT NULL,
    end_date                IN     TIMESTAMP WITH TIME ZONE DEFAULT NULL,
    number_of_arguments     IN     NATURAL DEFAULT NULL,
    arguments               IN     SYS.JOBARG_ARRAY DEFAULT NULL,
    job_class               IN     VARCHAR2 DEFAULT 'DEFAULT_JOB_CLASS',
    schedule_limit          IN     INTERVAL DAY TO SECOND DEFAULT NULL,
    job_priority            IN     NATURAL DEFAULT NULL,
    job_weight              IN     NATURAL DEFAULT NULL,
    max_run_duration        IN     INTERVAL DAY TO SECOND DEFAULT NULL,
    max_runs                IN     NATURAL DEFAULT NULL,
    max_failures            IN     NATURAL DEFAULT NULL,
    logging_level           IN     NATURALN DEFAULT 64,
    restartable             IN     BOOLEAN DEFAULT FALSE,
    stop_on_window_close    IN     BOOLEAN DEFAULT FALSE,
    raise_events            IN     NATURAL DEFAULT NULL,
    comments                IN     VARCHAR2 DEFAULT NULL,
    auto_drop               IN     BOOLEAN DEFAULT TRUE,
    enabled                 IN     BOOLEAN DEFAULT FALSE,
    follow_default_timezone IN     BOOLEAN DEFAULT FALSE,
    parallel_instances      IN     BOOLEAN DEFAULT FALSE,
    aq_job                  IN     BOOLEAN DEFAULT FALSE,
    instance_id             IN     NATURAL DEFAULT NULL,
    credential_name         IN     VARCHAR2 DEFAULT NULL,
    destination             IN     VARCHAR2 DEFAULT NULL,
    database_role           IN     VARCHAR2 DEFAULT NULL,
    allow_runs_in_restricted_mode IN BOOLEAN DEFAULT FALSE,
    restart_on_recovery     IN     BOOLEAN DEFAULT FALSE,
    restart_on_failure      IN     BOOLEAN DEFAULT FALSE,
    connect_credential_name IN     VARCHAR2 DEFAULT NULL,
    store_output            IN     BOOLEAN DEFAULT TRUE
  )
  RETURN SELF AS RESULT
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."JOB_DEFINITION" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
2a9b 9fb
r7sVIMMN3G+xz1oVOVbqLBDcXXAwg9ejDCBo3y+5MZ3mxFVECWrcbjZ9PPtT07HJ5vSe6TEx
h/XFg+EAb32au8hmPiKBWnmgRPxW+iBBbqgHGttjlZX0XJwGgtqylCK3QOcV7OEy6unMwui2
NJZEhpW+IPIqBh37DQe1mT1VDqsfr6oazLV6qIciZvkz8ES/BuYIelOmrU2wUbRS5FBe27/v
QtkxHYAyFJaAGdKJ3KyzEYAtkAlaIJS6Ppib8+oAlWtF2Yl2xAT0NyHhTkmieGkGSWjj+4tk
ZkEt2YkPEmiGa/ZSvjHcN1MExRS48QnIqx0aSG0XZhxcA84CKldjEF5szs8osOhkrnUoinrK
+VCxj4n/Q3fKs8e4fll9au+URQy/svP7FnBHs2y2fGzpTMTf1IHQr9O5rM5rGhtm4JGMjOEq
NtV7VrAAjGnZvYaicdOeQxCovU9/QjCOoQybRiqS36W8iMUEv2q4Covsrpz0B0JE/+NQQYZI
tqgBKCgaQgQWFNPX09+nm2qQ+lSNRH2OVnnsudsElRFm2u+DOLcA2KRUgnq36OByL6bYah4W
rWakHMPUIILCkTLF2+oae/xE/cX/gyEBTVaKqLSRYfUuXI4e56TVcl8JpW2h01jSxcGcPro2
i15ZOKQC+t7ytp7ZiX0KWdQG2qAqUTkJeW208Yaei0bK/CAf2ccJNX33OekSBZ7yNvttykBX
jAXfFhqLougbV7/Ir3KhPrgqd9gJXoIfYQvlhXXByM6udQ8re7Frd/rtn6NwEN64vf0Lj0Mq
E/2GMHDtERItZQY3ubhsDQK+SHBSjBdN5Rqbpqk/XDj0RaRo4IURS51zMFcVV4tuCDVguDuM
YXs9VVCZ5jiUnegJ+FJbeydIzt5o/kwSM794eHgYmr1qwuh0nvkwGiRVB0TbUl/8A7ocyOIR
tH2M5noG9zvhAj0HojlNVAZIqhKqErSkKqYnpnAyNMCq+PzcPx38vHl/mgXi1ly0gPnk3uVs
mTZ+hjjFeEVSmAWUKwUhb6y81CqGH1gdwKGrWIetG4vn/4/IkB7zC8SChvgF1qDXC8dZ7hnF
aP+s2B8BkFFmQE3FBiNo1QSAbHe2GJX5zcaYKLuaMOTLrcTWJO2DBVnYIYM+O7ZOkMRIwcBo
6M6Y/rs81Rx9F2bq5RwxieceOzldixfDOAqQxB7NaHIEJyh/I0DLRIYbVP70vV8RIQNq8nIU
dP866Rgw6WRHV5VyJfhwRDDMhLXkhsSatZL46jq/Cju/HnmQeFrsbntvAQYiAXms5Kpwn99t
D90GPT4iweycbSekUDijkjrF/hOnnw8puFHY5FHJGRSYWwkNLkQXhCsVNbceLkfWjyBTij0t
yQFgBPycrviBmI1Sjar7tpLZ4qrueW2ZkWhk6rwLYtKgSxvWI8fA7Rg+Q2qpMBguTUIXvdar
YpO/7c7mfskUf2wje9j/x4d/Cp8neyv/YDwg/XGB8v8xFy63n1tEMFP0gKCIRfCvE/CnRpgb
oWRTT5a5Ujzvr4GTyD0ZY1R8yQuzvqaZyrOynCRIrbT92Dbt7Q6XUJe8KRVE49Mfq1AKltVx
7XPWcxWgmJkBiuXk5o7RIBg8ugcbAtK8jfVTSajEmdD1pxKFmvJaRyvdJGI1W1CzXBTIDpEU
wYLxyKc4EQA+Pq0rCWXm0yWbm3QHZ8mj5fY4e8K3whc7Dc9mssB7FmLktHLjLplhkb30QlgL
bIhJVCv1Gwnvy6Fii9Jp7H0aQfdBf4ezAZE5Pa+rPxny8RcePcv2xsDvKfnDIGgfM87NDoGa
blRH3Kd7WM/FSHfozU9cPOp4uigRZEIrMUgX5XvE4/bk8PXmk/zOBnQFHPecLba5WTBJ4mSw
yxh7zGnUo7/aZg5qeXUP8QXBFMQAOvM2EllZ6Kt9QXYaUGsBVTD4QrtfEMvU0/SkIerc2wdd
okdJ4yHvnGbeE1RtgUgO8n3L+B8UN5K1o4FX9kmNhgS3eIqxM4I2EDmNndD5pc4WCsZc76a0
DEOPJVz7NLo53VPNqdC8ICVf1CumzFuKfVPYQHPv03A0y1sEQYmmq/VjU0psQdkrgVNQKQAP
FX7ZN7QHIzrgDqqYaq/aqbzZ38G2Wylu3KYhDXZaJ3OmflEFqJsOPqnqSvz0fM2m6Pbysqu6
yxTFdaYEM5Wl/zcyr0ti+CHboKR1tdyyV2Rq+0Uo8abH7DNj2xCYn/GjxrQhG3h0Orxj/p6w
p1rmPU4F/66jD1H+NnX3ijg83i/32Ovbej7/FuDKHoG4Psl3pYeIhEQ0r0Sz85+HEeRDNeYw
dKMrZi63XsnS7Pit1nHZbmEdAyyWptvkYRts0HSGrHCAb4n+N4K5gk8hRvFZtax2H9/vbP46
hBYqB7pQ4Ep+YAo61iVTD9TIRExljoIn27AaUp7GuWP0QWkDUog/gsqG/7ubUYJzazeePF3I
hIo/+vs23OtEQr/a04ufWeJYc+bvm7RWI/r3bdu9tW+Sbcs68EaSjzWnRJtyKLWmRppOaQ==


/

  GRANT EXECUTE ON "SYS"."JOB_DEFINITION" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JOB_DEFINITION_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JOB_DEFINITION_ARRAY" AS TABLE OF JOB_DEFINITION;

/

  GRANT EXECUTE ON "SYS"."JOB_DEFINITION_ARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JSON_ARRAY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JSON_ARRAY_T" FORCE AUTHID CURRENT_USER
                       UNDER JSON_Element_T(
   dummy NUMBER,
   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T)
                        RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T, jsn VARCHAR2)
                        RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T, jsn JDOM_T)
                        RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T, jsn CLOB)
                        RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T, jsn BLOB)
                        RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T, jsn BLOB,
                        format IN VARCHAR2) RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T, e JSON_ELEMENT_T)
                        RETURN SELF AS RESULT,

   -- override the 'parse' functions to directly RETURN Json_Array_T
   STATIC      FUNCTION  parse(jsn VARCHAR2) RETURN Json_Array_T,
   STATIC      FUNCTION  parse(jsn CLOB) RETURN Json_Array_T,
   STATIC      FUNCTION  parse(jsn BLOB) RETURN Json_Array_T,
   STATIC      FUNCTION  parse(jsn BLOB,format IN VARCHAR2) RETURN Json_Array_T,

   MEMBER      FUNCTION  clone(self IN JSON_ARRAY_T) RETURN JSON_ARRAY_T,

   MEMBER      FUNCTION  get(self IN JSON_ARRAY_T, pos NUMBER)
                         RETURN JSON_Element_T,
   MEMBER      FUNCTION  get_String(self IN JSON_ARRAY_T, pos NUMBER)
                         RETURN VARCHAR2,
   MEMBER      FUNCTION  get_Number(self IN JSON_ARRAY_T, pos NUMBER)
                         RETURN NUMBER,
   MEMBER      FUNCTION  get_Boolean(self IN JSON_ARRAY_T, pos NUMBER)
                         RETURN BOOLEAN,
   MEMBER      FUNCTION  get_Date(self IN JSON_ARRAY_T, pos NUMBER)
                         RETURN DATE,
   MEMBER      FUNCTION  get_Timestamp(self IN JSON_ARRAY_T, pos NUMBER)
                         RETURN TIMESTAMP,
   MEMBER      FUNCTION  get_Clob(self IN JSON_ARRAY_T, pos NUMBER) RETURN CLOB,
   MEMBER      PROCEDURE get_Clob(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                                  c IN OUT NOCOPY CLOB),
   MEMBER      FUNCTION  get_Blob(self IN JSON_ARRAY_T, pos NUMBER) RETURN BLOB,
   MEMBER      PROCEDURE get_Blob(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                                  b IN OUT NOCOPY BLOB),

 -- append at the end of array (no position needed)
   MEMBER      PROCEDURE append(self IN OUT NOCOPY JSON_ARRAY_T, val VARCHAR2),
   MEMBER      PROCEDURE append(self IN OUT NOCOPY JSON_ARRAY_T, val NUMBER),
   MEMBER      PROCEDURE append(self IN OUT NOCOPY JSON_ARRAY_T, val BOOLEAN),
   MEMBER      PROCEDURE append(self IN OUT NOCOPY JSON_ARRAY_T, val DATE),
   MEMBER      PROCEDURE append(self IN OUT NOCOPY JSON_ARRAY_T, val TIMESTAMP),
   MEMBER      PROCEDURE append(val CLOB),
   MEMBER      PROCEDURE append(val BLOB),
   MEMBER      PROCEDURE append(self IN OUT NOCOPY JSON_ARRAY_T,
                                val JSON_Element_T),
   MEMBER      PROCEDURE append_Null(self IN OUT NOCOPY JSON_ARRAY_T),

   MEMBER      PROCEDURE put(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                             val VARCHAR2, overwrite BOOLEAN DEFAULT FALSE),
   MEMBER      PROCEDURE put(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                             val NUMBER, overwrite BOOLEAN DEFAULT FALSE),
   MEMBER      PROCEDURE put(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                             val BOOLEAN, overwrite BOOLEAN DEFAULT FALSE),
   MEMBER      PROCEDURE put(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                             val DATE, overwrite BOOLEAN DEFAULT FALSE),
   MEMBER      PROCEDURE put(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                             val TIMESTAMP, overwrite BOOLEAN DEFAULT FALSE),
   MEMBER      PROCEDURE put(pos NUMBER, val CLOB,
                             overwrite BOOLEAN DEFAULT FALSE),
   MEMBER      PROCEDURE put(pos NUMBER, val BLOB,
                             overwrite BOOLEAN DEFAULT FALSE),
   MEMBER      PROCEDURE put(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                             val JSON_Element_T,
                             overwrite BOOLEAN DEFAULT FALSE),
   MEMBER      PROCEDURE put_Null(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                                  overwrite BOOLEAN DEFAULT FALSE),

   MEMBER      PROCEDURE remove(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER),
   MEMBER      FUNCTION  get_Type(self IN JSON_ARRAY_T, pos NUMBER)
                         RETURN VARCHAR2
) FINAL
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."JSON_ARRAY_T" AS

   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T)
                                       RETURN SELF AS RESULT AS
   BEGIN
     self.dom :=  jdom_t.create_Arr;
     RETURN;
   END;

   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T, jsn JDOM_T)
                        RETURN SELF AS RESULT AS
    inv_type exception;
    pragma exception_init(inv_type, -40587);
   BEGIN
     IF (jsn.is_Array) THEN
       self.dom := jsn;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T, jsn VARCHAR2)
                        RETURN SELF AS RESULT AS
   dom JDOM_T;
      inv_type exception;
      pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn);
     IF (dom.is_Array) THEN
       self.dom := dom;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T, jsn CLOB)
                        RETURN SELF AS RESULT AS
   dom JDOM_T;
      inv_type exception;
      pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn);
     IF (dom.is_Array) THEN
       self.dom := dom;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T, jsn BLOB)
                        RETURN SELF AS RESULT AS
   dom JDOM_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn);
     IF (dom.is_Array) THEN
       self.dom := dom;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T, jsn BLOB,
                        format IN VARCHAR2) RETURN SELF AS RESULT AS
   dom JDOM_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn, format);
     IF (dom.is_Array) THEN
       self.dom := dom;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   CONSTRUCTOR FUNCTION JSON_Array_T(self IN OUT JSON_ARRAY_T,
                                     e Json_Element_T) RETURN SELF AS RESULT AS
     inv_type exception;
     pragma exception_init(inv_type, -40587);
  BEGIN
     IF (e.dom.is_Array) THEN
       self.dom := e.dom;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   STATIC FUNCTION parse(jsn VARCHAR2) RETURN Json_Array_T AS
     dom JDOM_T;
     obj JSON_Array_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn);
     IF (dom.is_Array) THEN
        obj := JSON_Array_T(dom);
        RETURN obj;
     ELSE
        RAISE inv_type;
        --RETURN NULL;
     END IF;
   END;

   STATIC FUNCTION parse(jsn CLOB) RETURN Json_Array_T AS
     dom JDOM_T;
     obj JSON_Array_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn);
     IF (dom.is_Array) THEN
        RETURN JSON_Array_T(dom);
     ELSE
        RAISE inv_type;
        --RETURN NULL;
     END IF;
   END;

   STATIC FUNCTION parse(jsn BLOB) RETURN Json_Array_T AS
     dom JDOM_T;
     obj JSON_Array_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn);
     IF (dom.is_Array) THEN
        RETURN JSON_Array_T(dom);
     ELSE
        RAISE inv_type;
        --RETURN NULL;
     END IF;
   END;

   STATIC FUNCTION parse(jsn BLOB, format IN VARCHAR2) RETURN Json_Array_T AS
     dom JDOM_T;
     obj JSON_Array_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom := jdom_t.parse(jsn, format);
     IF (dom.is_Array) THEN
        RETURN JSON_Array_T(dom);
     ELSE
        RAISE inv_type;
        --RETURN NULL;
     END IF;
   END;

   MEMBER FUNCTION clone(self IN JSON_ARRAY_T) RETURN JSON_ARRAY_T AS
     arr JSON_Array_T;
   BEGIN
     RETURN JSON_Array_T(dom.clone);
   END;

   MEMBER PROCEDURE append(self IN OUT NOCOPY JSON_ARRAY_T, val VARCHAR2) AS
     hack boolean;
   BEGIN
     hack := dom.append(val);
   END;

   MEMBER PROCEDURE append(self IN OUT NOCOPY JSON_ARRAY_T, val NUMBER) AS
     hack boolean;
   BEGIN
     hack := dom.append(val);
   END;

   MEMBER PROCEDURE append(self IN OUT NOCOPY JSON_ARRAY_T, val BOOLEAN) AS
     hack boolean;
   BEGIN
     hack := dom.append(val);
   END;

   MEMBER PROCEDURE append(self IN OUT NOCOPY JSON_ARRAY_T, val DATE) AS
     hack boolean;
   BEGIN
     hack := dom.append(val);
   END;

   MEMBER PROCEDURE append(self IN OUT NOCOPY JSON_ARRAY_T, val TIMESTAMP) AS
     hack boolean;
   BEGIN
     hack := dom.append(val);
   END;

   MEMBER PROCEDURE append(val CLOB) AS
     hack boolean;
   BEGIN
     hack := dom.append(val);
   END;

   MEMBER PROCEDURE append(val BLOB) AS
     hack boolean;
   BEGIN
     hack := dom.append(val);
   END;

   MEMBER PROCEDURE append(self IN OUT NOCOPY JSON_ARRAY_T,
                           val JSON_Element_T) AS
     hack boolean;
   BEGIN
     hack := dom.append(val.dom);
   END;

   MEMBER PROCEDURE append_Null(self IN OUT NOCOPY JSON_ARRAY_T) AS
     hack boolean;
   BEGIN
     hack := dom.append_Null;
   END;

   MEMBER PROCEDURE put(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                        val VARCHAR2, overwrite BOOLEAN DEFAULT FALSE) AS
     hack boolean;
   BEGIN
     hack := dom.put(pos, val, overwrite);
   END;

   MEMBER PROCEDURE put(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                        val NUMBER, overwrite BOOLEAN DEFAULT FALSE) AS
     hack boolean;
   BEGIN
     hack := dom.put(pos, val, overwrite);
   END;

   MEMBER PROCEDURE put(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                        val BOOLEAN, overwrite BOOLEAN DEFAULT FALSE) AS
     hack boolean;
   BEGIN
     hack := dom.put(pos, val, overwrite);
   END;

   MEMBER PROCEDURE put(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                        val DATE, overwrite BOOLEAN DEFAULT FALSE) AS
     hack boolean;
   BEGIN
     hack := dom.put(pos, val, overwrite);
   END;

   MEMBER PROCEDURE put(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                        val TIMESTAMP, overwrite BOOLEAN DEFAULT FALSE) AS
     hack boolean;
   BEGIN
     hack := dom.put(pos, val, overwrite);
   END;

   MEMBER PROCEDURE put(pos NUMBER, val CLOB,
                        overwrite BOOLEAN DEFAULT FALSE) AS
     hack boolean;
   BEGIN
     hack := dom.put(pos, val, overwrite);
   END;

   MEMBER PROCEDURE put(pos NUMBER, val BLOB,
                        overwrite BOOLEAN DEFAULT FALSE) AS
     hack boolean;
   BEGIN
     hack := dom.put(pos, val, overwrite);
   END;

   MEMBER PROCEDURE put(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                        val JSON_Element_T, overwrite BOOLEAN DEFAULT FALSE) AS
     hack boolean;
   BEGIN
     hack := dom.put(pos, val.dom, overwrite);
   END;

   MEMBER PROCEDURE put_Null(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                             overwrite BOOLEAN DEFAULT FALSE) AS
     hack boolean;
   BEGIN
     hack := dom.put_Null(pos, overwrite);
   END;


   MEMBER FUNCTION get_Type(self IN JSON_ARRAY_T, pos NUMBER) RETURN VARCHAR2 AS
   BEGIN
     RETURN dom.get_Type(pos);
   END;

   MEMBER FUNCTION get(self IN JSON_ARRAY_T, pos NUMBER)
                       RETURN JSON_Element_T AS
     elem JSON_Element_T;
     typ  VARCHAR2(10);
   BEGIN
     typ := get_Type(pos);
     IF (typ IS NULL) THEN
       RETURN NULL;
     ELSIF (typ = 'OBJECT') THEN
       RETURN JSON_Object_T(dom.get(pos));
     ELSIF (typ = 'ARRAY') THEN
       RETURN JSON_Array_T(dom.get(pos));
     ELSIF (typ = 'SCALAR') THEN
       elem := JSON_Scalar_T(dom.get(pos));
     ELSE
       RETURN NULL;
     END IF;

     elem.dom := dom.get(pos);
     RETURN elem;
   END;

   MEMBER FUNCTION get_String(self IN JSON_ARRAY_T, pos NUMBER)
                   RETURN VARCHAR2 AS
   BEGIN
     RETURN dom.get_String(pos);
   END;

   MEMBER FUNCTION get_Number(self IN JSON_ARRAY_T, pos NUMBER) RETURN NUMBER AS
   BEGIN
     RETURN dom.get_Number(pos);
   END;

   MEMBER FUNCTION get_Boolean(self IN JSON_ARRAY_T, pos NUMBER)
                   RETURN BOOLEAN AS
   BEGIN
     RETURN dom.get_Boolean(pos);
   END;

   MEMBER FUNCTION get_Date(self IN JSON_ARRAY_T, pos NUMBER) RETURN DATE AS
   BEGIN
     RETURN dom.get_Date(pos);
   END;

   MEMBER FUNCTION get_Timestamp(self IN JSON_ARRAY_T, pos NUMBER)
                   RETURN TIMESTAMP AS
   BEGIN
     RETURN dom.get_Timestamp(pos);
   END;

   MEMBER FUNCTION get_Clob(self IN JSON_ARRAY_T, pos NUMBER) RETURN CLOB AS
   BEGIN
     RETURN dom.get_Clob(pos, NULL);
   END;

   MEMBER PROCEDURE get_Clob(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                             c IN OUT NOCOPY CLOB) AS
    inp_null exception;
    pragma exception_init(inp_null, -64403);
   BEGIN
      IF (c IS NOT NULL) THEN
          c := dom.get_Clob(pos, c);
      ELSE
          raise inp_null;
      END IF;
   END;

   MEMBER FUNCTION get_Blob(self IN JSON_ARRAY_T, pos NUMBER) RETURN BLOB AS
   BEGIN
     RETURN dom.get_Blob(pos, NULL);
   END;

   MEMBER PROCEDURE get_Blob(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER,
                            b IN OUT NOCOPY BLOB) AS
   BEGIN
     b := dom.get_Blob(pos, b);
   END;

   MEMBER PROCEDURE remove(self IN OUT NOCOPY JSON_ARRAY_T, pos NUMBER) AS
     hack boolean;
   BEGIN
     hack := dom.remove(pos);
   END;
END;

/

  GRANT EXECUTE ON "SYS"."JSON_ARRAY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JSONDGIMP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JSONDGIMP" 
   authid current_user as object
(
  key RAW(8),

  static function ODCIAggregateInitialize(sctx OUT JsonDgImp, outopn IN RAW,
                                          inpopn IN RAW, format IN NUMBER,
                                          pretty IN NUMBER)
    return pls_integer
    is language c
    name "JsonDgAggInitialize"
    library json_lib
    with context
    parameters (
      context,
      sctx, sctx INDICATOR STRUCT, sctx DURATION OCIDuration,
      outopn OCIRaw,
      inpopn OCIRaw,
      format OCINumber,
      format INDICATOR sb4,
      pretty OCINumber,
      pretty INDICATOR sb4,
      return INT
    ),

  member function ODCIAggregateIterate(self IN OUT NOCOPY JsonDgImp,
                                       value IN AnyData) return pls_integer
    is language c
    name "JsonDgAggIterate"
    library json_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      value, value INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateTerminate(self IN OUT NOCOPY JsonDgImp,
                                         returnValue OUT CLOB,
                                         flags IN number)
                  return pls_integer
    is language c
    name "JsonDgAggTerminate"
    library json_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT,
      returnValue, returnValue INDICATOR sb2, returnValue DURATION OCIDuration,
      flags, flags INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateMerge(self IN OUT NOCOPY JsonDgImp,
                                     valueB IN JsonDgImp) return pls_integer
    is language c
    name "JsonDgAggMerge"
    library json_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      valueB, valueB INDICATOR STRUCT,
      return INT
    ),

  member function ODCIAggregateWrapContext(self IN OUT NOCOPY JsonDgImp)
                  return pls_integer
    is language c
    name "JsonDgAggWrap"
    library json_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      return INT
    )
);

/
--------------------------------------------------------
--  DDL for Type JSON_ELEMENT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JSON_ELEMENT_T" FORCE AUTHID CURRENT_USER AS OBJECT(
   dom JDOM_T,
   STATIC FUNCTION  parse(jsn VARCHAR2) RETURN JSON_Element_T,
   STATIC FUNCTION  parse(jsn CLOB) RETURN JSON_Element_T,
   STATIC FUNCTION  parse(jsn BLOB) RETURN JSON_Element_T,
   STATIC FUNCTION  parse(jsn BLOB, format IN VARCHAR2) RETURN JSON_Element_T,

   MEMBER FUNCTION  stringify(self IN JSON_ELEMENT_T)   RETURN VARCHAR2,
   MEMBER FUNCTION  to_String(self IN JSON_ELEMENT_T)    RETURN VARCHAR2,
   MEMBER FUNCTION  to_Boolean(self IN JSON_ELEMENT_T)   RETURN BOOLEAN,
   MEMBER FUNCTION  to_Clob(self IN JSON_ELEMENT_T)      RETURN CLOB,
   MEMBER PROCEDURE to_Clob(self IN OUT NOCOPY JSON_ELEMENT_T,
                            c IN OUT NOCOPY CLOB),
   MEMBER FUNCTION  to_Blob(self IN JSON_ELEMENT_T)      RETURN BLOB,
   MEMBER PROCEDURE to_Blob(self IN OUT NOCOPY JSON_ELEMENT_T,
                            b IN OUT NOCOPY BLOB),
   MEMBER FUNCTION  to_Number(self IN JSON_ELEMENT_T)    RETURN NUMBER,
   MEMBER FUNCTION  to_Date (self IN JSON_ELEMENT_T)     RETURN DATE,
   MEMBER FUNCTION  to_Timestamp(self IN JSON_ELEMENT_T) RETURN TIMESTAMP,

   MEMBER FUNCTION  is_Object(self IN JSON_ELEMENT_T)     RETURN BOOLEAN,
   MEMBER FUNCTION  is_Array(self IN JSON_ELEMENT_T)      RETURN BOOLEAN,
   MEMBER FUNCTION  is_Scalar(self IN JSON_ELEMENT_T)     RETURN BOOLEAN,
   MEMBER FUNCTION  is_String(self IN JSON_ELEMENT_T)     RETURN BOOLEAN,
   MEMBER FUNCTION  is_Number(self IN JSON_ELEMENT_T)     RETURN BOOLEAN,
   MEMBER FUNCTION  is_Boolean(self IN JSON_ELEMENT_T)    RETURN BOOLEAN,
   MEMBER FUNCTION  is_True(self IN JSON_ELEMENT_T)       RETURN BOOLEAN,
   MEMBER FUNCTION  is_False(self IN JSON_ELEMENT_T)      RETURN BOOLEAN,
   MEMBER FUNCTION  is_Null(self IN JSON_ELEMENT_T)       RETURN BOOLEAN,
   MEMBER FUNCTION  is_Date(self IN JSON_ELEMENT_T)       RETURN BOOLEAN,
   MEMBER FUNCTION  is_Timestamp(self IN JSON_ELEMENT_T)  RETURN BOOLEAN,

   MEMBER FUNCTION  get_Size(self IN JSON_ELEMENT_T) RETURN NUMBER,
   MEMBER PROCEDURE on_Error(self IN OUT NOCOPY JSON_ELEMENT_T, val NUMBER),
   MEMBER PROCEDURE patch(self IN OUT NOCOPY JSON_ELEMENT_T, spec VARCHAR2),
   MEMBER PROCEDURE mergepatch(self IN OUT NOCOPY JSON_ELEMENT_T,
                               patch VARCHAR2),
   MEMBER PROCEDURE redact(self IN OUT NOCOPY JSON_ELEMENT_T, spec VARCHAR2),
   MEMBER PROCEDURE patch(self IN OUT NOCOPY JSON_ELEMENT_T,
                          spec JSON_Element_T),
   MEMBER PROCEDURE mergepatch(self IN OUT NOCOPY JSON_ELEMENT_T,
                          patch JSON_Element_T),
   MEMBER PROCEDURE redact(self IN OUT NOCOPY JSON_ELEMENT_T,
                           spec JSON_Element_T)
) NOT FINAL NOT INSTANTIABLE NOT PERSISTABLE
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."JSON_ELEMENT_T" AS
  STATIC FUNCTION parse(jsn VARCHAR2) RETURN JSON_Element_T AS
    dom JDOM_T;
    inv_type exception;
    pragma exception_init(inv_type, -40587);
  BEGIN
    dom :=  jdom_t.parse(jsn);
    IF (dom.is_Object) THEN
        RETURN JSON_Object_T(dom);
    ELSIF (dom.is_Array) THEN
        RETURN JSON_Array_T(dom);
    ELSE
        raise inv_type;
    END IF;
  END;

  STATIC FUNCTION parse(jsn CLOB) RETURN JSON_Element_T AS
    dom JDOM_T;
    inv_type exception;
    pragma exception_init(inv_type, -40587);
  BEGIN
    dom :=  jdom_t.parse(jsn);
    IF (dom.is_Object) THEN
        RETURN JSON_Object_T(dom);
    ELSIF (dom.is_Array) THEN
        RETURN JSON_Array_T(dom);
    ELSE
        raise inv_type;
    END IF;
  END;

  STATIC FUNCTION parse(jsn BLOB) RETURN JSON_Element_T AS
    dom JDOM_T;
    inv_type exception;
    pragma exception_init(inv_type, -40587);
  BEGIN
    dom :=  jdom_t.parse(jsn);
    IF (dom.is_Object) THEN
        RETURN JSON_Object_T(dom);
    ELSIF (dom.is_Array) THEN
        RETURN JSON_Array_T(dom);
    ELSE
        raise inv_type;
    END IF;
  END;

  STATIC FUNCTION parse(jsn BLOB, format IN VARCHAR2) RETURN JSON_Element_T AS
    dom JDOM_T;
    inv_type exception;
    pragma exception_init(inv_type, -40587);
  BEGIN
    dom :=  jdom_t.parse(jsn, format);
    IF (dom.is_Object) THEN
        RETURN JSON_Object_T(dom);
    ELSIF (dom.is_Array) THEN
        RETURN JSON_Array_T(dom);
    ELSE
        raise inv_type;
    END IF;
  END;

  MEMBER FUNCTION stringify(self IN JSON_ELEMENT_T) RETURN VARCHAR2 AS
  BEGIN
    RETURN dom.stringify;
  END;

  MEMBER FUNCTION to_String(self IN JSON_ELEMENT_T) RETURN VARCHAR2 AS
  BEGIN
    RETURN dom.to_String;
  END;

  MEMBER FUNCTION to_Clob(self IN JSON_ELEMENT_T) RETURN CLOB AS
  BEGIN
    RETURN dom.to_Clob(null);
  END;

  MEMBER PROCEDURE to_Clob(self IN OUT NOCOPY JSON_ELEMENT_T,
                           c IN OUT NOCOPY CLOB) AS
   inp_null exception;
   pragma exception_init(inp_null, -64403);
  BEGIN
     IF (c IS NOT NULL) THEN
       c := dom.to_Clob(c);
     ELSE
       raise inp_null;
     END IF;
  END;

  MEMBER FUNCTION to_Blob(self IN JSON_ELEMENT_T) RETURN BLOB AS
  BEGIN
    RETURN dom.to_Blob(null);
  END;

  MEMBER PROCEDURE to_Blob(self IN OUT NOCOPY JSON_ELEMENT_T,
                          b IN OUT NOCOPY BLOB) AS
  BEGIN
    b := dom.to_Blob(b);
  END;

  MEMBER FUNCTION to_Boolean(self IN JSON_ELEMENT_T) RETURN BOOLEAN AS
  BEGIN
    RETURN dom.to_Boolean;
  END;

  MEMBER FUNCTION to_Number(self IN JSON_ELEMENT_T) RETURN NUMBER AS
  BEGIN
    RETURN dom.to_Number;
  END;

  MEMBER FUNCTION to_Date(self IN JSON_ELEMENT_T) RETURN DATE AS
  BEGIN
    RETURN dom.to_Date;
  END;

  MEMBER FUNCTION to_Timestamp(self IN JSON_ELEMENT_T) RETURN TIMESTAMP AS
  BEGIN
    RETURN dom.to_Timestamp;
  END;

  MEMBER FUNCTION is_Object(self IN JSON_ELEMENT_T) RETURN BOOLEAN AS
  BEGIN
    RETURN dom.is_Object;
  END;

  MEMBER FUNCTION is_Array(self IN JSON_ELEMENT_T) RETURN BOOLEAN AS
  BEGIN
    RETURN dom.is_Array;
  END;

  MEMBER FUNCTION is_Scalar(self IN JSON_ELEMENT_T) RETURN BOOLEAN AS
  BEGIN
    RETURN dom.is_Scalar;
  END;

  MEMBER FUNCTION is_String(self IN JSON_ELEMENT_T) RETURN BOOLEAN AS
  BEGIN
    RETURN dom.is_String;
  END;

  MEMBER FUNCTION is_Number(self IN JSON_ELEMENT_T) RETURN BOOLEAN AS
  BEGIN
    RETURN dom.is_Number;
  END;

  MEMBER FUNCTION is_Boolean(self IN JSON_ELEMENT_T) RETURN BOOLEAN AS
  BEGIN
    RETURN dom.is_Boolean;
  END;

  MEMBER FUNCTION is_True(self IN JSON_ELEMENT_T) RETURN BOOLEAN AS
  BEGIN
    RETURN dom.is_True;
  END;

  MEMBER FUNCTION is_False(self IN JSON_ELEMENT_T) RETURN BOOLEAN AS
  BEGIN
    RETURN dom.is_False;
  END;

  MEMBER FUNCTION is_Null(self IN JSON_ELEMENT_T) RETURN BOOLEAN AS
  BEGIN
    RETURN dom.is_Null;
  END;

  MEMBER FUNCTION is_Date(self IN JSON_ELEMENT_T) RETURN BOOLEAN AS
  BEGIN
    RETURN dom.is_Date;
  END;

  MEMBER FUNCTION is_Timestamp(self IN JSON_ELEMENT_T) RETURN BOOLEAN AS
  BEGIN
    RETURN dom.is_Timestamp;
  END;

  MEMBER FUNCTION get_Size(self IN JSON_ELEMENT_T) RETURN NUMBER AS
  BEGIN
    RETURN dom.get_Size;
  END;

  MEMBER PROCEDURE on_Error(self IN OUT NOCOPY JSON_ELEMENT_T, val NUMBER) AS
    hack boolean;
  BEGIN
    hack := dom.on_Error(val);
  END;

  MEMBER PROCEDURE patch(self IN OUT NOCOPY JSON_ELEMENT_T, spec VARCHAR2) AS
    hack boolean;
  BEGIN
    hack := dom.patch(spec);
  END;

  MEMBER PROCEDURE mergepatch(self IN OUT NOCOPY JSON_ELEMENT_T,
                              patch VARCHAR2) AS
    hack boolean;
  BEGIN
    hack := dom.mergepatch(patch);
  END;

  MEMBER PROCEDURE redact(self IN OUT NOCOPY JSON_ELEMENT_T, spec VARCHAR2) AS
    hack boolean;
  BEGIN
    hack := dom.redact(spec);
  END;

  MEMBER PROCEDURE patch(self IN OUT NOCOPY JSON_ELEMENT_T,
                         spec JSON_Element_T) AS
    hack boolean;
  BEGIN
    hack := dom.patch(spec.dom);
  END;

  MEMBER PROCEDURE mergepatch(self IN OUT NOCOPY JSON_ELEMENT_T,
                         patch JSON_Element_T) AS
    hack boolean;
  BEGIN
    hack := dom.mergepatch(patch.dom);
  END;

  MEMBER PROCEDURE redact(self IN OUT NOCOPY JSON_ELEMENT_T,
                          spec JSON_Element_T) AS
    hack boolean;
  BEGIN
    hack := dom.redact(spec.dom);
  END;

END;

/

  GRANT EXECUTE ON "SYS"."JSON_ELEMENT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JSONHDGIMP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JSONHDGIMP" 
   authid current_user as object
(
  key RAW(8),

  static function ODCIAggregateInitialize(sctx OUT JsonHDgImp, outopn IN RAW,
                                          inpopn IN RAW ) return pls_integer
    is language c
    name "JsonDgAggHierInitialize"
    library json_lib
    with context
    parameters (
      context,
      sctx, sctx INDICATOR STRUCT, sctx DURATION OCIDuration,
      outopn OCIRaw,
      inpopn OCIRaw,
      return INT
    ),

  member function ODCIAggregateIterate(self IN OUT NOCOPY JsonHDgImp,
                                       value IN AnyData) return pls_integer
    is language c
    name "JsonDgAggIterate"
    library json_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      value, value INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateTerminate(self IN OUT NOCOPY JsonHDgImp,
                                         returnValue OUT CLOB,
                                         flags IN number)
                  return pls_integer
    is language c
    name "JsonDgAggHierTerminate"
    library json_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT,
      returnValue, returnValue INDICATOR sb2, returnValue DURATION OCIDuration,
      flags, flags INDICATOR sb2,
      return INT
    ),

  member function ODCIAggregateMerge(self IN OUT NOCOPY JsonHDgImp,
                                     valueB IN JsonHDgImp) return pls_integer
    is language c
    name "JsonDgAggMerge"
    library json_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      valueB, valueB INDICATOR STRUCT,
      return INT
    ),

  member function ODCIAggregateWrapContext(self IN OUT NOCOPY JsonHDgImp)
                  return pls_integer
    is language c
    name "JsonDgAggWrap"
    library json_lib
    with context
    parameters (
      context,
      self, self INDICATOR STRUCT, self DURATION OCIDuration,
      return INT
    )
);

/
--------------------------------------------------------
--  DDL for Type JSON_KEY_LIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JSON_KEY_LIST" FORCE AS VARRAY(32767) OF VARCHAR2(4000);

/

  GRANT EXECUTE ON "SYS"."JSON_KEY_LIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JSON_OBJECT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JSON_OBJECT_T" AUTHID CURRENT_USER UNDER JSON_Element_T(
   dummy NUMBER,
   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T)
                        RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T, jsn JDOM_T)
                        RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T, jsn VARCHAR2)
                        RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T, jsn CLOB)
                        RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T, jsn BLOB)
                        RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T, jsn BLOB,
                        format IN VARCHAR2) RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T,
                                      e JSON_ELEMENT_T) RETURN SELF AS RESULT,

   -- override the 'parse' functions to directly RETURN Json_Object_T
   STATIC      FUNCTION  parse(jsn VARCHAR2) RETURN Json_Object_T,
   STATIC      FUNCTION  parse(jsn CLOB) RETURN Json_Object_T,
   STATIC      FUNCTION  parse(jsn BLOB) RETURN Json_Object_T,
   STATIC      FUNCTION  parse(jsn BLOB, format IN VARCHAR2)
                         RETURN Json_Object_T,
   MEMBER      FUNCTION  clone RETURN JSON_OBJECT_T,

   MEMBER      FUNCTION  get(self IN JSON_OBJECT_T, key VARCHAR2)
                         RETURN JSON_Element_T,
   MEMBER      FUNCTION  get_Object(self IN JSON_OBJECT_T, key VARCHAR2)
                         RETURN JSON_OBJECT_T,
   MEMBER      FUNCTION  get_Array(self IN JSON_OBJECT_T, key VARCHAR2)
                         RETURN JSON_ARRAY_T,
   MEMBER      FUNCTION  get_String(self IN JSON_OBJECT_T, key VARCHAR2)
                         RETURN VARCHAR2,
   MEMBER      FUNCTION  get_Number(self IN JSON_OBJECT_T, key VARCHAR2)
                         RETURN NUMBER,
   MEMBER      FUNCTION  get_Boolean(self IN JSON_OBJECT_T, key VARCHAR2)
                         RETURN BOOLEAN,
   MEMBER      FUNCTION  get_Date(self IN JSON_OBJECT_T, key VARCHAR2)
                         RETURN DATE,
   MEMBER      FUNCTION  get_Timestamp(self IN JSON_OBJECT_T, key VARCHAR2)
                         RETURN TIMESTAMP,
   MEMBER      FUNCTION  get_Clob(self IN JSON_OBJECT_T, key VARCHAR2)
                         RETURN CLOB,
   MEMBER      PROCEDURE get_Clob(self IN OUT NOCOPY JSON_OBJECT_T,
                                  key VARCHAR2, c IN OUT NOCOPY CLOB),
   MEMBER      FUNCTION  get_Blob(self IN JSON_OBJECT_T, key VARCHAR2)
                         RETURN BLOB,
   MEMBER      PROCEDURE get_Blob(self IN OUT NOCOPY JSON_OBJECT_T,
                                 key VARCHAR2, b IN OUT NOCOPY BLOB),
   MEMBER      PROCEDURE put(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                             val VARCHAR2),
   MEMBER      PROCEDURE put(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                             val NUMBER),
   MEMBER      PROCEDURE put(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                             val BOOLEAN),
   MEMBER      PROCEDURE put(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                             val DATE),
   MEMBER      PROCEDURE put(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                             val TIMESTAMP),
   MEMBER      PROCEDURE put(key VARCHAR2, val CLOB),
   MEMBER      PROCEDURE put(key VARCHAR2, val BLOB),
   MEMBER      PROCEDURE put(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                             val JSON_Element_T),
   MEMBER      PROCEDURE put_Null(self IN OUT NOCOPY JSON_OBJECT_T,
                                 key VARCHAR2),
   MEMBER      FUNCTION  has(self IN JSON_OBJECT_T, key VARCHAR2)
                         RETURN BOOLEAN,
   MEMBER      PROCEDURE remove(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2),
   MEMBER      FUNCTION  get_Type(self IN JSON_OBJECT_T, key VARCHAR2)
                         RETURN VARCHAR2,
   MEMBER      FUNCTION  get_Keys(self IN JSON_OBJECT_T) RETURN JSON_KEY_LIST,
   MEMBER      PROCEDURE rename_Key(self IN OUT NOCOPY JSON_OBJECT_T,
                                   keyOld VARCHAR2, keyNew VARCHAR2)
) FINAL
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."JSON_OBJECT_T" AS
   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T)
                        RETURN SELF AS RESULT AS
   BEGIN
     self.dom :=  jdom_t.create_Obj;
     RETURN;
   END;

   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T, jsn JDOM_T)
                        RETURN SELF AS RESULT AS
   inv_type exception;
    pragma exception_init(inv_type, -40587);
   BEGIN
     IF (jsn.is_Object) THEN
       self.dom := jsn;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T, jsn VARCHAR2)
                        RETURN SELF AS RESULT AS
   dom JDOM_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn);
     IF (dom.is_Object) THEN
       self.dom := dom;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T, jsn CLOB)
                        RETURN SELF AS RESULT AS
   dom JDOM_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn);
     IF (dom.is_Object) THEN
       self.dom := dom;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T, jsn BLOB)
                        RETURN SELF AS RESULT AS
   dom JDOM_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn);
     IF (dom.is_Object) THEN
       self.dom := dom;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T, jsn BLOB,
                        format IN VARCHAR2) RETURN SELF AS RESULT AS
   dom JDOM_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn, format);
     IF (dom.is_Object) THEN
       self.dom := dom;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

  CONSTRUCTOR FUNCTION JSON_Object_T(self IN OUT JSON_OBJECT_T,
                                     e Json_Element_T) RETURN SELF AS RESULT AS
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     IF (e.dom.is_Object) THEN
       self.dom := e.dom;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   STATIC FUNCTION parse(jsn VARCHAR2) RETURN Json_Object_T AS
     dom JDOM_T;
     obj JSON_Object_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn);
     IF (dom.is_Object) THEN
        RETURN JSON_Object_T(dom);
     ELSE
        RAISE inv_type;
     END IF;
   END;

   STATIC FUNCTION parse(jsn CLOB) RETURN Json_Object_T AS
     dom JDOM_T;
     obj JSON_Object_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn);
     IF (dom.is_Object) THEN
        RETURN JSON_Object_T(dom);
     ELSE
        RAISE inv_type;
     END IF;
   END;

   STATIC FUNCTION parse(jsn BLOB) RETURN Json_Object_T AS
     dom JDOM_T;
     obj JSON_Object_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn);
     IF (dom.is_Object) THEN
        RETURN JSON_Object_T(dom);
     ELSE
        RAISE inv_type;
     END IF;
   END;

   STATIC FUNCTION parse(jsn BLOB, format IN VARCHAR2) RETURN Json_Object_T AS
     dom JDOM_T;
     obj JSON_Object_T;
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     dom :=  jdom_t.parse(jsn, format);
     IF (dom.is_Object) THEN
        RETURN JSON_Object_T(dom);
     ELSE
        RAISE inv_type;
     END IF;
   END;

   MEMBER FUNCTION clone RETURN JSON_OBJECT_T AS
     obj JSON_Object_T;
   BEGIN
     RETURN JSON_Object_T(dom.clone);
   END;

   MEMBER PROCEDURE put(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                        val VARCHAR2) AS
     hack boolean;
   BEGIN
     hack := dom.put(key, val);
   END;

   MEMBER PROCEDURE put(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                        val NUMBER) AS
     hack boolean;
   BEGIN
     hack := dom.put(key, val);
   END;

   MEMBER PROCEDURE put(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                        val BOOLEAN) AS
     hack boolean;
   BEGIN
     hack := dom.put(key, val);
   END;

   MEMBER PROCEDURE put(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                        val DATE) AS
     hack boolean;
   BEGIN
     hack := dom.put(key, val);
   END;

   MEMBER PROCEDURE put(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                        val TIMESTAMP) AS
     hack boolean;
   BEGIN
     hack := dom.put(key, val);
   END;

   MEMBER PROCEDURE put(key VARCHAR2, val CLOB) AS
     hack boolean;
   BEGIN
     hack := dom.put(key, val);
   END;

   MEMBER PROCEDURE put(key VARCHAR2, val BLOB) AS
     hack boolean;
   BEGIN
     hack := dom.put(key, val);
   END;

   MEMBER PROCEDURE put(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                        val JSON_Element_T) AS
     hack boolean;
   BEGIN
     hack := dom.put(key, val.dom);
   END;

   MEMBER PROCEDURE put_Null(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2) AS
     hack boolean;
   BEGIN
     hack := dom.put_Null(key);
   END;


   MEMBER FUNCTION get(self IN JSON_OBJECT_T, key VARCHAR2)
                   RETURN JSON_Element_T AS
     elem JSON_Element_T;
     typ  VARCHAR2(10);
   BEGIN
     typ := get_Type(key);
     IF (typ IS NULL) THEN
       RETURN NULL;
     ELSIF (typ = 'OBJECT') THEN
       RETURN JSON_Object_T(dom.get(key));
     ELSIF (typ = 'ARRAY') THEN
       RETURN JSON_Array_T(dom.get(key));
     ELSIF (typ = 'SCALAR') THEN
       elem := JSON_Scalar_T(dom.get(key));
     ELSE
       RETURN NULL;
     END IF;

     elem.dom := dom.get(key);
     RETURN elem;
   END;

   MEMBER FUNCTION get_Object(self IN JSON_OBJECT_T, key VARCHAR2)
                   RETURN JSON_Object_T AS
     obj JSON_Object_T;
     typ  VARCHAR2(10);
   BEGIN
     typ := get_Type(key);
     IF (typ IS NULL) THEN
       RETURN NULL;
     ELSIF (typ = 'OBJECT') THEN
       RETURN JSON_Object_T(dom.get(key));
     ELSE
       RETURN NULL;
     END IF;

     --obj.dom := dom.get(key);
     --RETURN obj;
   END;

   MEMBER FUNCTION get_Array(self IN JSON_OBJECT_T, key VARCHAR2)
                   RETURN JSON_Array_T AS
     arr JSON_Array_T;
     typ  VARCHAR2(10);
   BEGIN
     typ := get_Type(key);
     IF (typ IS NULL) THEN
       RETURN NULL;
     ELSIF (typ = 'ARRAY') THEN
      return JSON_Array_T(dom.get(key));
     ELSE
       RETURN NULL;
     END IF;

     --arr.dom := dom.get(key);
     --RETURN arr;
   END;

   MEMBER FUNCTION get_String(self IN JSON_OBJECT_T, key VARCHAR2)
                   RETURN VARCHAR2 AS
   BEGIN
      RETURN dom.get_String(key);
   END;

   MEMBER FUNCTION get_Number(self IN JSON_OBJECT_T, key VARCHAR2)
                   RETURN NUMBER AS
   BEGIN
      RETURN dom.get_Number(key);
   END;

   MEMBER FUNCTION get_Boolean(self IN JSON_OBJECT_T, key VARCHAR2)
                   RETURN BOOLEAN AS
   BEGIN
      RETURN dom.get_Boolean(key);
   END;

   MEMBER FUNCTION get_Date(self IN JSON_OBJECT_T, key VARCHAR2) RETURN DATE AS
   BEGIN
      RETURN dom.get_Date(key);
   END;

   MEMBER FUNCTION get_Timestamp(self IN JSON_OBJECT_T, key VARCHAR2)
                   RETURN TIMESTAMP AS
   BEGIN
      RETURN dom.get_Timestamp(key);
   END;

   MEMBER FUNCTION get_Clob(self IN JSON_OBJECT_T, key VARCHAR2) RETURN CLOB AS
   BEGIN
      RETURN dom.get_Clob(key, NULL);
   END;

   MEMBER PROCEDURE get_Clob(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                            c IN OUT NOCOPY CLOB) AS
      inp_null exception;
      pragma exception_init(inp_null, -64403);
   BEGIN
      IF (c IS NOT NULL) THEN
          c := dom.get_Clob(key, c);
      ELSE
          raise inp_null;
      END IF;
   END;

   MEMBER FUNCTION get_Blob(self IN JSON_OBJECT_T, key VARCHAR2) RETURN BLOB AS
   BEGIN
      RETURN dom.get_Blob(key, NULL);
   END;

   MEMBER PROCEDURE get_Blob(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2,
                            b IN OUT NOCOPY BLOB) AS
   BEGIN
      b := dom.get_Blob(key, b);
   END;

   MEMBER FUNCTION has(self IN JSON_OBJECT_T, key VARCHAR2) RETURN BOOLEAN AS
   BEGIN
      RETURN dom.has_Key(key);
   END;

   MEMBER FUNCTION get_Type(self IN JSON_OBJECT_T, key VARCHAR2)
                   RETURN VARCHAR2 AS
   BEGIN
     RETURN dom.get_Type(key);
   END;

   MEMBER FUNCTION get_Keys(self IN JSON_OBJECT_T) RETURN JSON_KEY_LIST AS
   BEGIN
     RETURN dom.get_Keys;
   END;

   MEMBER PROCEDURE remove(self IN OUT NOCOPY JSON_OBJECT_T, key VARCHAR2) AS
     hack boolean;
   BEGIN
     hack := dom.remove(key);
   END;

   MEMBER PROCEDURE rename_Key(self IN OUT NOCOPY JSON_OBJECT_T,
                              keyOld VARCHAR2, keyNew VARCHAR2) AS
     hack boolean;
   BEGIN
     hack := dom.rename_Key(keyOld, keyNew);
   END;

END;

/

  GRANT EXECUTE ON "SYS"."JSON_OBJECT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type JSON_SCALAR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."JSON_SCALAR_T" AUTHID CURRENT_USER UNDER JSON_Element_T(
   dummy NUMBER,

   CONSTRUCTOR FUNCTION JSON_Scalar_T(self IN OUT JSON_SCALAR_T,
                                      jsn JDOM_T)  RETURN SELF AS RESULT,

   CONSTRUCTOR FUNCTION JSON_Scalar_T(self IN OUT JSON_SCALAR_T,
                                      e JSON_ELEMENT_T) RETURN SELF AS RESULT,

   MEMBER      FUNCTION  clone(self IN JSON_SCALAR_T) RETURN JSON_SCALAR_T

) FINAL
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."JSON_SCALAR_T" AS

   CONSTRUCTOR FUNCTION JSON_Scalar_T(self IN OUT JSON_SCALAR_T, jsn JDOM_T)
                                      RETURN SELF AS RESULT AS
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     IF (jsn.is_Scalar) THEN
       self.dom := jsn;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   CONSTRUCTOR FUNCTION JSON_Scalar_T(self IN OUT JSON_SCALAR_T,
                                      e Json_Element_T) RETURN SELF AS RESULT AS
     inv_type exception;
     pragma exception_init(inv_type, -40587);
   BEGIN
     IF (e.dom.is_Scalar) THEN
       self.dom := e.dom;
     ELSE
       RAISE inv_type;
     END IF;
     RETURN;
   END;

   MEMBER FUNCTION clone(self IN JSON_SCALAR_T) RETURN JSON_Scalar_T AS
     sca JSON_Scalar_T;
   BEGIN
     RETURN JSON_Scalar_T(dom.clone);
   END;
END;

/

  GRANT EXECUTE ON "SYS"."JSON_SCALAR_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KET$_WINDOW_LIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KET$_WINDOW_LIST" IS TABLE OF ket$_window_type

/

  GRANT EXECUTE ON "SYS"."KET$_WINDOW_LIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KET$_WINDOW_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KET$_WINDOW_TYPE" FORCE IS OBJECT (
   window_name   VARCHAR2(128),
   start_time    TIMESTAMP WITH TIME ZONE,
   duration      INTERVAL DAY TO SECOND)

/
--------------------------------------------------------
--  DDL for Type KU$_ADD_SNAP_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ADD_SNAP_LIST_T" force as TABLE of (ku$_add_snap_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_ADD_SNAP_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ADD_SNAP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ADD_SNAP_T" force as object
(
  REFGROUP       number,                          /* number of refresh group */
  ref_add_user   varchar2(2000),          /* dbms_refresh.add execute string */
  ref_add_dba    varchar2(2000)          /* dbms_irefresh.add execute string */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ADD_SNAP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ALTER_PROC_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ALTER_PROC_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                     /* object number */
  type_num      number,                                       /* type number */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  compiler_info ku$_switch_compiler_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ALTER_PROC_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ANALYTIC_VIEW_DIM_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ANALYTIC_VIEW_DIM_LIST_T" 
 force as table of (ku$_analytic_view_dim_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ANALYTIC_VIEW_DIM_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ANALYTIC_VIEW_DIM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ANALYTIC_VIEW_DIM_T" force as object
(
  av_obj#         number,                       /* obj# of the analytic view */
  dim_obj#        number,                            /* obj# of the hier dim */
  dim_owner       varchar2(128),         /* dim owner (hcs_av_dim$.dim_owner */
  owner_in_ddl    number(1),                     /* whether owner was in DDL */
  name            varchar2(128),          /* dim name (hcs_av_dim$.dim_name) */
  dim_alias       varchar2(128),            /* alias name (hcs_av_dim$.alias */
  ref_distinct    number(1),                      /* is references distinct? */
  key_list        ku$_analytic_view_keys_list_t,       /* analytic view keys */
  hier_list       ku$_analytic_view_hiers_list_t,                   /* hiers */
  clsfctn_list    ku$_hcs_clsfctn_list_t,                 /* classifications */
  order_num       number                          /* order number of the dim */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ANALYTIC_VIEW_DIM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ANALYTIC_VIEW_HIERS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ANALYTIC_VIEW_HIERS_LIST_T" 
 force as table of (ku$_analytic_view_hiers_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ANALYTIC_VIEW_HIERS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ANALYTIC_VIEW_HIERS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ANALYTIC_VIEW_HIERS_T" force as object
(
  av_obj#         number,                       /* obj# of the analytic view */
  dim_obj#        number,                            /* obj# of the hier dim */
  hier_owner      varchar2(128),     /* hier owner (hcs_av_hier$.hier_owner) */
  owner_in_ddl    number(1),                     /* whether owner was in DDL */
  hier_name       varchar2(128),       /* hier name (hcs_av_hier$.hier_name) */
  hier_alias      varchar2(128),    /* hier alias  (hcs_av_hier$.hier_alias) */
  is_default      varchar2(1),                                 /* is default */
  order_num       number                         /* order number of the hier */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ANALYTIC_VIEW_HIERS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ANALYTIC_VIEW_KEYS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ANALYTIC_VIEW_KEYS_LIST_T" 
 force as table of (ku$_analytic_view_keys_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ANALYTIC_VIEW_KEYS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ANALYTIC_VIEW_KEYS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ANALYTIC_VIEW_KEYS_T" force as object
(
  av_obj#         number,                       /* obj# of the analytic view */
  dim_obj#        number,                            /* obj# of the hier dim */
  key_col_name    varchar2(128),/* key column name(hcs_src_col$.src_col_name)*/
  ref_attr_name   varchar2(128),/* ref attr name (hcs_av_key$.ref_attr_name) */
  order_num       number                   /* order number of the key column */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ANALYTIC_VIEW_KEYS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ANALYTIC_VIEW_MEAS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ANALYTIC_VIEW_MEAS_LIST_T" 
 force as table of (ku$_analytic_view_meas_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ANALYTIC_VIEW_MEAS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ANALYTIC_VIEW_MEAS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ANALYTIC_VIEW_MEAS_T" force as object
(
  av_obj#         number,                       /* obj# of the analytic view */
  meas_id         number,                               /* id of the measure */
  meas_type       number,                                    /* base or calc */
  name            varchar2(128),    /* measure name (hcs_av_meas$.meas_name) */
  src_col_name    varchar2(128),  /* column name (hcs_src_col$.src_col_name) */
  expr            clob,                     /* calculated measure expression */
  aggr            varchar2(128),        /* aggr_function (hcs_av_meas$.aggr) */
  clsfctn_list    ku$_hcs_clsfctn_list_t,                 /* classifications */
  order_num       number                      /* order number of the measure */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ANALYTIC_VIEW_MEAS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ANALYTIC_VIEW_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ANALYTIC_VIEW_T" force as object
(
  obj_num         number,              /* object number of the analytic view */
  schema_obj      ku$_schemaobj_t,                          /* schema object */
  def_meas        varchar2(128),                          /* default measure */
  def_aggr        varchar2(128),                      /* default aggregation */
  src_list        ku$_hcs_src_list_t,                     /* list of sources */
  dim_list        ku$_analytic_view_dim_list_t,                /* dimensions */
  meas_list       ku$_analytic_view_meas_list_t,                 /* measures */
  clsfctn_list    ku$_hcs_clsfctn_list_t,                 /* classifications */
  cache_meas_list ku$_hcs_av_cache_mlst_list_t,           /* cache meas list */
  dyn_all_cache   number(1)                     /* dynamic all cache enabled */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ANALYTIC_VIEW_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ARGUMENT_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ARGUMENT_LIST_T" 
 force as table of (ku$_argument_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ARGUMENT_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ARGUMENT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ARGUMENT_T" force as object
(
  obj_num        number,                                    /* object number */
  procedure_val  varchar2(128),      /* procedure name (if within a package) */
  overload_num   number,
                /* 0 - not overloaded, n - unique id of overloaded procedure */
  procedure_num  number,                       /* procedure or method number */
  position_num   number,           /* argument position (0 for return value) */
  sequence_num   number,
  level_num      number,
  argument       varchar2(128),     /* argument name (null for return value) */
  type_num       number,                                    /* argument type */
  charsetid      number,                                 /* character set id */
  charsetform    number,                               /* character set form */
  /* 1 = implicit: for CHAR, VARCHAR2, CLOB w/o a specified set */
  /* 2 = nchar: for NCHAR, NCHAR VARYING, NCLOB */
  /* 3 = explicit: for CHAR, etc. with "CHARACTER SET ..." clause */
  /* 4 = flexible: for PL/SQL "flexible" parameters */
  default_num    number,   /* null - no default value, 1 - has default value */
  in_out         number,                   /* null - IN, 1 - OUT, 2 - IN/OUT */
  properties     number,                           /* argument's properties: */
  /* 0x0100 =     256 = IN parameter (pass by value, default) */
  /* 0x0200 =     512 = OUT parameter */
  /* 0x0400 =    1024 = pass by reference parameter */
  /* 0x0800 =    2048 = required parameter (no default) */
  /* 0x4000 =   16384 = is a PONTER parameter */
  /* 0x8000 =   32768 = is a REF parameter */
  length         number,                                      /* data length */
  precision_num  number,                                /* numeric precision */
  scale          number,                                    /* numeric scale */
  radix          number,                                    /* numeric radix */
  deflength      number,             /* default value expression text length */
  default_val    varchar2(4000),            /* default value expression text */
--  default$       long,                    /* default value expression text */
  type_owner     varchar2(128),         /* owner name component of type name */
  type_name      varchar2(128),                                 /* type name */
  type_subname   varchar2(128),            /* subname component of type name */
  type_linkname  varchar2(128),            /* db link component of type name */
  pls_type       varchar2(128)                           /* pl/sql type name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ARGUMENT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ASSOC_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ASSOC_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                              /* association object # */
  base_obj      ku$_schemaobj_t,                              /* base object */
  obj_type      number,                                  /* association type */
  objcol        varchar2(128),                         /* association column */
  stats_obj     ku$_schemaobj_t,                            /* statistic obj */
  selectivity   number,                                       /* selectivity */
  cpu_cost      number,                                           /* cpu cost*/
  io_cost       number,                                           /* io cost */
  net_cost      number,                                          /* net cost */
  interface_version number,
  spare2        number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ASSOC_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ATTR_DIM_ATTR_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ATTR_DIM_ATTR_LIST_T" 
 force as table of (ku$_attr_dim_attr_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ATTR_DIM_ATTR_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ATTR_DIM_ATTR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ATTR_DIM_ATTR_T" force as object
(
  dim_obj#       number,                             /* obj# of the hier dim */
  attr_id        number,                          /* attr id in the hier dim */
  name           varchar2(128),       /* attr name (hcs_dim_attr$.attr_name) */
  table_alias    varchar2(128),/* owner of column (hcs_src_col$.table_alias) */
  src_col_name   varchar2(128),/* name of column (hcs_src_col$.src_col_name) */
  clsfctn_list   ku$_hcs_clsfctn_list_t,                  /* classifications */
  order_num      number                        /* order number of attributes */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ATTR_DIM_ATTR_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ATTR_DIM_JOIN_PATH_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ATTR_DIM_JOIN_PATH_LIST_T" 
 force as table of (ku$_attr_dim_join_path_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ATTR_DIM_JOIN_PATH_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ATTR_DIM_JOIN_PATH_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ATTR_DIM_JOIN_PATH_T" force as object
(
  dim_obj#       number,                             /* obj# of the hier dim */
  join_path_id   number,                     /* join path id in the hier dim */
  name           varchar2(128),  /* name (hcs_dim_join_path$.join_path_name) */
  on_condition   varchar2(4000),      /* condition of the hier dim join path */
  order_num      number                        /* order number of attributes */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ATTR_DIM_JOIN_PATH_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ATTR_DIM_LVL_KEY_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ATTR_DIM_LVL_KEY_LIST_T" 
 force as table of (ku$_attr_dim_lvl_key_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ATTR_DIM_LVL_KEY_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ATTR_DIM_LVL_KEY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ATTR_DIM_LVL_KEY_T" force as object
(
  dim_obj#       number,                             /* obj# of the hier dim */
  lvl_id         number,               /* level number within this dimension */
  key_id         number,                       /* lvl key id in the hier dim */
  attr_list      ku$_attr_dim_attr_list_t,                  /* list of attrs */
  order_num      number                       /* order number of the lvl key */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ATTR_DIM_LVL_KEY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ATTR_DIM_LVL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ATTR_DIM_LVL_LIST_T" 
 force as table of (ku$_attr_dim_lvl_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ATTR_DIM_LVL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ATTR_DIM_LVL_ORDBY_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ATTR_DIM_LVL_ORDBY_LIST_T" 
 force as table of (ku$_attr_dim_lvl_ordby_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ATTR_DIM_LVL_ORDBY_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ATTR_DIM_LVL_ORDBY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ATTR_DIM_LVL_ORDBY_T" force as object
(
  dim_obj#       number,                             /* obj# of the attr dim */
  lvl_id         number,                         /* level id in the attr dim */
  agg_func       varchar2(3),             /* aggregation function MIN or MAX */
  attribute_name varchar2(128),                            /* attribute name */
  order_num      number,                                     /* order number */
  criteria       varchar2(4),                       /* criteria: ASC or DESC */
  nulls_position varchar2(5)                          /* NULLS FIRST or LAST */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ATTR_DIM_LVL_ORDBY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ATTR_DIM_LVL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ATTR_DIM_LVL_T" force as object
(
  dim_obj#       number,                             /* obj# of the attr dim */
  lvl_id         number,                         /* level id in the attr dim */
  name           varchar2(128),        /* level name (hcs_dim_lvl$.lvl_name) */
  member_name    clob,              /* member name (hcs_dim_lvl$.member_name */
  member_caption clob,        /* member caption (hcs_dim_lvl$.member_caption */
  member_desc    clob,/* member description (hcs_dim_lvl$.member_description */
  skip_when_null varchar2(1),                              /* skip when null */
  level_type     varchar2(16),                                 /* level type */
  clsfctn_list   ku$_hcs_clsfctn_list_t,                  /* classifications */
  key_list       ku$_attr_dim_lvl_key_list_t,          /* list of level keys */
  ordby_list     ku$_attr_dim_lvl_ordby_list_t,                 /* order bys */
  dtm_attr_list  ku$_attr_dim_attr_list_t,       /* list of determined attrs */
  order_num      number                         /* order number of the level */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ATTR_DIM_LVL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ATTRIBUTE_DIMENSION_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ATTRIBUTE_DIMENSION_T" force as object
(
  obj_num            number,           /* object number of the attribute dim */
  schema_obj         ku$_schemaobj_t,                       /* schema object */
  dimension_type     varchar2(8),                          /* dimension type */
  all_member_name    clob,                                /* all member name */
  all_member_caption clob,                             /* all member caption */
  all_member_desc    clob,                         /* all member description */
  src_list           ku$_hcs_src_list_t,                  /* list of sources */
  attr_list          ku$_attr_dim_attr_list_t,        /* dimension attr list */
  lvl_list           ku$_attr_dim_lvl_list_t,        /* dimension level list */
  clsfctn_list       ku$_hcs_clsfctn_list_t,              /* classifications */
  join_path_list     ku$_attr_dim_join_path_list_t             /* join paths */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ATTRIBUTE_DIMENSION_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDDEF_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDDEF_T" FORCE AS OBJECT
(
  name          VARCHAR2(31),   -- operation to be audited, e.g., ALTER
  value         CHAR(1),        -- 'S' = by session
                                -- 'A' = by access
                                -- '-' = no auditing
  type          CHAR(1)         -- 'S' = when successful
                                -- 'F' = when not successful
)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_AUDDEF_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_ACT_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_ACT_LIST_T" 
 force as table of (ku$_audit_act_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_ACT_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_ACT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_ACT_T" force as object (
        ACTION        number,
        NAME          varchar2(128)
  )
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_ACT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_ATTR_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_ATTR_LIST_T" 
 force as table of (varchar2(128))
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_ATTR_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_CONTEXT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_CONTEXT_T" force as object (
  "USER"        varchar2(128),
  aud_context   ku$_audit_namespace_list_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_CONTEXT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_DEFAULT_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_DEFAULT_LIST_T" FORCE
IS TABLE OF (sys.ku$_auddef_t)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_DEFAULT_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_DEFAULT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_DEFAULT_T" force as object
(
  vers_major       char(1),
  vers_minor       char(1),
  obj_num          number,                                /* object number */
  audit_val        varchar2(128),                      /* auditing options */
  aud_default_list sys.ku$_audit_default_list_t              /* audit list */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_DEFAULT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_LIST_T" FORCE IS TABLE OF (sys.ku$_audobj_t)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_NAMESPACE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_NAMESPACE_LIST_T" 
 force as table of (ku$_audit_namespace_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_NAMESPACE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_NAMESPACE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_NAMESPACE_T" force as object (
  namespace     varchar2(128),
  aud_attr      ku$_audit_attr_list_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_NAMESPACE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_OBJ_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_OBJ_T" force as object
(
  vers_major    char(1),
  vers_minor    char(1),
  obj_num       number,                                     /* object number */
  base_obj      ku$_schemaobj_t,                          /* base obj schema */
  audit_val     varchar2(128),                           /* auditing options */
  audit_list    sys.ku$_audit_list_t                           /* audit list */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_OBJ_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDITP_OBJ_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDITP_OBJ_LIST_T" 
 force as table of (ku$_auditp_obj_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDITP_OBJ_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDITP_OBJ_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDITP_OBJ_T" force as object (
        ACTION        number,
        audit_obj     ku$_schemaobj_t,              /* object being auditede */
        NAME          varchar2(128)
  )
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDITP_OBJ_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_POLICY_ENABLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_POLICY_ENABLE_T" force as object (
  policy_num    number,
  schema_obj    ku$_schemaobj_t,                            /* policy object */
  "USER"        varchar2(128),    /* Name of user/role, NULL for 'ALL USERS' */
  when_opt      number,                /* 1 - Success, 2 - Failure, 3 - Both */
  how_opt       number) /* 1 - By User, 2 - Except User, 3 - By Granted Role */
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_POLICY_ENABLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_POLICY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_POLICY_T" force as object (
  policy_num    number,
  schema_obj    ku$_schemaobj_t,                            /* policy object */
  type          number,            /*     0 - Invalid
                                    *  0x01 - System Privilgege options
                                    *  0x02 - System Action options
                                    *  0x04 - Object Action options
                                    *  0x08 - Local Audit Policy in case of
                                    *         Consolidated Database
                                    *  0x10 - Common Audit Policy in case of
                                    *         Consolidated Database
                                    *  0x20 - Role Privilege options
                                    */
  condition         varchar2(4000),
  condition_eval    number,
  privilege_options  ku$_audit_sys_priv_list_t,
  sys_action_options ku$_audit_act_list_t,
  xs_action_options  ku$_audit_act_list_t,
  ols_action_options ku$_audit_act_list_t,
  obj_action_options ku$_auditp_obj_list_t,
  role_options       ku$_audit_pol_role_list_t
  )
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_POLICY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_POL_ROLE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_POL_ROLE_LIST_T" 
 force as table of (ku$_audit_pol_role_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_POL_ROLE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_POL_ROLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_POL_ROLE_T" force as object (
  role_num        number,
  role_name       varchar2(128)
  )
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_POL_ROLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_SYS_PRIV_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_SYS_PRIV_LIST_T" 
 force as table of (ku$_audit_sys_priv_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_SYS_PRIV_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_SYS_PRIV_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_SYS_PRIV_T" force as object (
        PRIVILEGE     number,
        NAME          varchar2(128),
        PROPERTY      number          /* 0x01 = do not export this privilege */
                                      /* using sql statements */
  )
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_SYS_PRIV_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDIT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDIT_T" force as object
(
  vers_major    char(1),
  vers_minor    char(1),
  user_num      number,                            /* user identifier number */
  user_name     varchar2(128),                                  /* user name */
  proxy_num     number,                             /* UID of the proxy user */
  audit_option  varchar2(128),                            /* auditing option */
  property      number,                   /* 0x01 = do not export this audit */
  success       number,                                 /* audit on success? */
  failure       number,                                 /* audit on failure? */
  option_num    number                              /* option# in option map */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_AUDIT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_AUDOBJ_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_AUDOBJ_T" FORCE AS OBJECT
(
  name          VARCHAR2(31),   -- operation to be audited, e.g., ALTER
  value         CHAR(1),        -- 'S' = by session
                                -- 'A' = by access
                                -- '-' = no auditing
  type          CHAR(1)         -- 'S' = when successful
                                -- 'F' = when not successful
)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_AUDOBJ_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_BYTES_ALLOC_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_BYTES_ALLOC_T" force as object
(
  file_num      number,                        /* segment header file number */
  block_num     number,                       /* segment header block number */
  ts_num        number,                       /* tablespace for this segment */
  bytes_alloc   number                     /* total number of bytes allocated */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_BYTES_ALLOC_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CACHED_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CACHED_STATS_T" force as object
(
  obj_num       number,
  cachedblk     number,
  cachehit      number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CACHED_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CALLOUT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CALLOUT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  user_name     varchar2(128),                                  /* user name */
  obj_num       number,                                     /* object number */
  base_obj      ku$_schemaobj_t,                            /* schema object */
  tag           varchar2(128),             /* used for extensibility tracing */
  package       varchar2(128),                         /* procedural package */
  pkg_schema    varchar2(128),                             /* package schema */
  level_num     number,                                             /* level */
  class         number,                                             /* class */
  prepost       number,                         /* 0:preaction, 1:postaction */
  -- for dbms_plugts
  ts_name       varchar2(128),                            /* tablespace name */
  ts_num        number,                                 /* tablespace number */
  incl_const    number,
  incl_trig     number,
  incl_grant    number,
  tts_full_chk  number,
  tts_closure_chk number,
  idx_prop      number               /* index properties - for plugts_tsname */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CALLOUT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CHUNK_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CHUNK_LIST_T" FORCE IS TABLE OF (sys.ku$_chunk_t)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_CHUNK_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CHUNK_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CHUNK_T" FORCE AS OBJECT
(
  text  varchar2(4000),
  length        number
)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_CHUNK_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CLSTCOL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CLSTCOL_LIST_T" force as table of (ku$_clstcol_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CLSTCOL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CLSTCOL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CLSTCOL_T" force as object
(
  obj_num       number,                            /* object number of table */
  tabobj_num    number,          /* object number of clustering column table */
  schema_obj    ku$_schemaobj_t,                  /* Clustering column table */
  position      number,           /* Position of column in clustering clause */
  groupid       number,                           /* Identifier of the Group */
  col_num       number,                          /* column number as created */
  intcol_num    number,                            /* internal column number */
  segcol_num    number,                          /* column number in segment */
  property      number,                     /* column properties (bit flags) */
  property2     number,                        /*    more column properties  */
  name          varchar2(128),                             /* name of column */
  type_num      number                                /* data type of column */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CLSTCOL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CLSTJOIN_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CLSTJOIN_LIST_T" force as table of (ku$_clstjoin_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CLSTJOIN_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CLSTJOIN_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CLSTJOIN_T" force as object
(
  obj_num       number,                                          /* object # */
  tab1obj_num   number,                                /* table 1 obj number */
  int1col_num   number,                /* internal column number for table 1 */
  tab2obj_num   number,                                /* table 2 obj number */
  int2col_num   number,                /* internal column number for table 2 */
  tab1          ku$_schemaobj_t,
  tab2          ku$_schemaobj_t,
  tab1col       ku$_simple_col_t,                          /* table 1 column */
  tab2col       ku$_simple_col_t                           /* table 2 column */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CLSTJOIN_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CLST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CLST_T" force as object
(
  obj_num       number,                            /* object number of table */
  clstfunc      number,              /* Clustering Function                  */
                                     /* 1 - Hilbert                          */
                                     /* 2 - Order                            */
  flags         number,
                                     /* 0x00000001 - Load                    */
                                     /* 0x00000002 - Data Movement           */
  clstcols      ku$_clstcol_list_t,                        /* clustering key */
  clstjoin      ku$_clstjoin_list_t,                         /* cluster join */
  zonemap       ku$_clst_zonemap_t                                /* zonemap */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CLST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CLST_ZONEMAP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CLST_ZONEMAP_T" force as object
(
  obj_num       number,                       /* object number of base table */
  zmowner       varchar2(128),                              /* zonemap owner */
  zmname        varchar2(128)                                /* zonemap name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CLST_ZONEMAP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CLUSTER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CLUSTER_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                                  /* cluster object # */
  schema_obj    ku$_schemaobj_t,                       /* cluster schema obj */
  col_list      ku$_tab_column_list_t,
  ts_name       varchar2(128),                                 /* tablespace */
  blocksize     number,                            /* size of block in bytes */
  tsno          number,                                 /* tablespace number */
  fileno        number,                        /* segment header file number */
  blockno       number,                       /* segment header block number */
  pct_free      number,          /* minimum free space percentage in a block */
  pct_used      number,          /* minimum used space percentage in a block */
  initrans      number,                     /* initial number of transaction */
  maxtrans      number,                     /* maximum number of transaction */
  size_t        number,
  hashfunc      varchar2(128),             /* if hashed, function identifier */
  hashkeys      number,                                    /* hash key count */
  function      number, /* function: 0 (key is function), 1 (system default) */
  extind        number,             /* extent index value of fixed hash area */
  flags         number,                                      /* 0x08 = CACHE */
                                          /* 0x010000 = Single Table Cluster */
                                                /* 0x00800000 = DEPENDENCIES */
  degree        number,      /* number of parallel query slaves per instance */
  instances     number,       /*  number of OPS instances for parallel query */
  avgchn        number,          /* average chain length - previously spare4 */
  funclen       number,
  functxt       varchar2(4000),
  func_vcnt     ku$_vcnt,
  func_clob     clob,
  storage       ku$_storage_t,
  spare1        number,
  spare2        number,
  spare3        number,
  spare4        number,
  spare5        varchar2(1000),
  spare6        varchar2(1000),
  spare7        varchar2(19),
  part_obj      ku$_tab_partobj_t                        /* Partitioned info */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CLUSTER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CODE_BASE_GRANT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CODE_BASE_GRANT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  role          varchar2(128),
  grantee       varchar2(128),          /* Owner of package, procedure, etc. */
  type_name     varchar2(128),         /* Name of code type, ie package name */
  code_type     varchar2(128),      /* Function, Procedure, Package, or Type */
  obj_num       number,                /* Object number of func, proced, etc */
  priv_num      number)                  /* Privilege number, ie role number */

not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CODE_BASE_GRANT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_COLLECTION_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_COLLECTION_T" force as object
(
  toid          raw(16),                                             /* TOID */
  version       number,                      /* internal type version number */
  coll_toid     raw(16),            /* collection TOID (TABLE, VARRAY, etc.) */
  coll_version  number,         /* collection type's internal version number */
  elem_toid     raw(16),                                   /* element's TOID */
  elem_version  number,          /* element's type's internal version number */
  synobj        number,                              /* obj# of type synonym */
  properties    number,                             /* element's properties: */
  /* 0x4000 =   16384 = is a PONTER element */
  /* 0x8000 =   32768 = is a REF element */
  /* 0x10000 =  65536  = no NULL is stored with each element */
  /* 0x20000 =  131072 = number/float elements stored in min. fixed size */
  /* 0x40000 =  262144 = number/float elements stored in varying size    */
  charsetid     number,                                  /* character set id */
  charsetform   number,                                /* character set form */
  /* 1 = implicit: for CHAR, VARCHAR2, CLOB w/o a specified set */
  /* 2 = nchar: for NCHAR, NCHAR VARYING, NCLOB */
  /* 3 = explicit: for CHAR, etc. with "CHARACTER SET ..." clause */
  /* 4 = flexible: for PL/SQL "flexible" parameters */
  length        number,                  /* fixed character string length or */
                                  /* maximum varying character string length */
  precision     number,       /* fixed- or floating-point numeric precision */
  scale         number,                         /* fixed-point numeric scale */
  upper_bound   number,     /* fixed array size or varying array upper bound */
  spare1        number,                      /* fractional seconds precision */
  spare2        number,                  /* interval leading field precision */
  spare3        number,
  coll_type     ku$_simple_type_t,           /* type info for the collection */
  typemd        ku$_simple_type_t        /* type info for collection element */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_COLLECTION_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_COL_STATS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_COL_STATS_LIST_T" 
 force as table of (ku$_col_stats_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_COL_STATS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_COL_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_COL_STATS_T" force as object
(
  obj_num           number,             -- table/partition/subpartition objnum
  intcol_num        number,             -- internal column number
  distcnt           number,             -- distinct count
  lowval            raw(32),            -- low value
  lowval_1000       raw(1000),          -- low value - raw 1000 (12g)
  hival             raw(32),            -- high value
  hival_1000        raw(1000),          -- high value - raw 1000 (12g)
  density           number,             -- density
  null_cnt          number,             -- null count
  avgcln            number,             -- average column length
  cflags            number,             -- flags
  eav               number,
  sample_size       number,
  minimum           number,
  maximum           number,
  spare1            number,             -- sample number of distinct values
  hist_gram_list    ku$_histgrm_list_t  -- histogram list
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_COL_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_COLTYPE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_COLTYPE_T" force as object
(
  obj_num       number,                               /* obj# of base object */
  col_num       number,                                     /* column number */
  intcol_num    number,                            /* internal column number */
  flags         number,                                             /* flags */
  toid          raw(16),                                             /* toid */
  version       number,                      /* internal type version number */
  packed        number,                          /* 0 = unpacked, 1 = packed */
  intcols       number,                        /* number of internal columns */
                                          /* storing the exploded ADT column */
  intcol_nums   raw(2000),            /* list of intcol#s of columns storing */
                          /* the unpacked ADT column; stored in packed form; */
                                          /* each intcol# is stored as a ub2 */
  hashcode      raw(17),                                 /* Version hashcode */
  has_tstz      char(1),        /* 'Y' = this is a varray with TSTZ elements */
  typidcol_num  number,           /* intcol# of the type discriminant column */
  synobj_num    number,              /* obj# of type synonym of the col type */
  syn_name      varchar2(128),                      /* type synonym (if any) */
  syn_owner     varchar2(128),                              /* synonym owner */
  subtype_list  ku$_subcoltype_list_t,                   /* subtype metadata */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  anydata_list  ku$_Unpacked_AnyData_t      /* types in unpacked anydata col */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_COLTYPE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_COMMENT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_COMMENT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                                     /* object number */
  base_obj      ku$_schemaobj_t,                       /* base schema object */
  property      number,                                  /* table properties */
  colno         number,                                         /* column id */
  colname       varchar2(128),                                /* column name */
  cmnt          clob                                         /* comment text */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_COMMENT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CONSTRAINT_COL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CONSTRAINT_COL_LIST_T" 
 force as TABLE of (ku$_constraint_col_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_CONSTRAINT_COL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CONSTRAINT_COL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CONSTRAINT_COL_T" force as object
(
  con_num       number,                                 /* constraint number */
  obj_num       number,                      /* object number of base object */
  intcol_num    number,                            /* internal column number */
  pos_num       number,                 /* column position number as created */
  spare1        number,                       /* additional constraint flags */
  oid_or_setid  number,   /* !0 = hidden unique constraint on OID column (1) */
                                  /* or nested tbl column's SETID column (2) */
  col           ku$_simple_col_t                                   /* column */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CONSTRAINT_COL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CONSTRAINT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CONSTRAINT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  con_num       number,                                 /* constraint number */
  owner_name    varchar2(128),                        /* owner of constraint */
  name          varchar2(128),                         /* name of constraint */
  flags         number,                                             /* flags */
  type_num      number,                                  /* constraint type: */
                            /* 1 = table check, 2 = primary key, 3 = unique, */
                             /* 4 = referential, 5 = view with CHECK OPTION, */
                                                 /* 6 = view READ ONLY check */
               /* 7 - table check constraint associated with column NOT NULL */
                                   /* 8 - hash expressions for hash clusters */
                                         /* 9 - Scoped REF column constraint */
                                    /* 10 - REF column WITH ROWID constraint */
                                  /* 11 - REF/ADT column with NOT NULL const */
                                 /* 12 - Log Groups for supplemental logging */
                                    /* 14 - Primary key supplemental logging */
                                     /* 15 - Unique key supplemental logging */
                                    /* 16 - Foreign key supplemental logging */
                                     /* 17 - All column supplemental logging */
  base_obj_num  number,                                     /* base object # */
  base_obj      ku$_schemaobj_t,            /* base table/view schema object */
  col           ku$_simple_col_t,        /* column info for con 0 constraint */
  con0          ku$_constraint0_t,                       /* con 0 constraint */
  con1          ku$_constraint1_t                        /* con 1 constraint */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CONSTRAINT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CONSTRAINT0_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CONSTRAINT0_LIST_T" force
as table of (ku$_constraint0_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_CONSTRAINT0_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CONSTRAINT0_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CONSTRAINT0_T" force as object
(
  owner_num     number,                                      /* owner user # */
  name          varchar2(128),                            /* constraint name */
  con_num       number,                                 /* constraint number */
  obj_num       number,                  /* object number of base table/view */
  numcols       number,                   /* number of columns in constraint */
  contype       number,                                   /* constraint type */
                                              /* 5 = view with CHECK OPTION, */
               /* 7 - table check constraint associated with column NOT NULL */
                                  /* 11 - REF/ADT column with NOT NULL const */
  enabled       number,           /* is constraint enabled? NULL if disabled */
  intcols       number,              /* #  of internal columns in constraint */
  mtime         varchar2(19),               /* date this constraint was last
                                                            enabled-disabled */
  flags         number                                              /* flags */
                  /* 0x01 constraint is deferrable */
                  /* 0x02 constraint is deferred */
                  /* 0x04 constraint has been system validated */
                  /* 0x08 constraint name is system generated */
                  /* 0x10 (16) constraint is BAD, depends on current century */
                  /* 0x20 (32) optimizer should RELY on this constraint */
                  /* 0x40 (64) Log Group ALWAYS option */
                  /* 0x80 (128) (view related) constraint is invalid */
                  /* 0x100 (256) constraint depends on a view */
                  /* 0x200 (512) partitioning constraint on FK */
                  /* 0x400 (1024) partitioning constraint on PK/UK */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CONSTRAINT0_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CONSTRAINT1_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CONSTRAINT1_LIST_T" force
as table of (ku$_constraint1_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_CONSTRAINT1_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CONSTRAINT1_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CONSTRAINT1_T" force as object
(
  owner_num     number,                                      /* owner user # */
  name          varchar2(128),                            /* constraint name */
  con_num       number,                                 /* constraint number */
  obj_num       number,                  /* object number of base table/view */
  property      number,                     /* properties of base table/view */
  property2     number,                     /* properties of base table/view */
  property3     number,                     /* properties of base table/view */
  numcols       number,                   /* number of columns in constraint */
  contype       number,                                   /* constraint type */
                               -- table check (condition-no keys) (1),
                               -- primary key (2),
                               -- unique key (3),
                               -- supplemental log groups (w/ keys) (12),
                               -- supplemental log data (no keys) (14,15,16,17)
  enabled       number,           /* is constraint enabled? NULL if disabled */
  condlength    number,                 /* table check condition text length */
  condition     clob,                          /* table check condition text */
  parsed_cond   sys.xmltype,                 /* parsed table check condition */
  intcols       number,              /* #  of internal columns in constraint */
  mtime         varchar2(19), /* date this constraint was last enabled-disabled */
  flags         number,                                             /* flags */
                   /* see ku$_constraint0_t for flag bit definitions */
  oid_or_setid  number,   /* !0 = hidden unique constraint on OID column (1) */
                                  /* or nested tbl column's SETID column (2) */
  col_list      ku$_constraint_col_list_t,                        /* columns */
  ind           ku$_index_t                                /* index metadata */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CONSTRAINT1_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CONSTRAINT2_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CONSTRAINT2_LIST_T" force
as table of (ku$_constraint2_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_CONSTRAINT2_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CONSTRAINT2_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CONSTRAINT2_T" force as object
(
  owner_num     number,                                      /* owner user # */
  name          varchar2(128),                            /* constraint name */
  con_num       number,                                 /* constraint number */
  obj_num       number,                  /* object number of base table/view */
  numcols       number,                   /* number of columns in constraint */
  contype       number,                                   /* constraint type */
                                                     /* only 4 = referential */
  robj_num      number,                 /* object number of referenced table */
  rcon_num      number,                 /* constraint# of referenced columns */
  rrules        varchar2(3),                 /* future: use this for pendant */
  match_num     number,                 /* referential constraint match type */
  refact        number,                                /* referential action */
  enabled       number,           /* is constraint enabled? NULL if disabled */
  intcols       number,              /* #  of internal columns in constraint */
  mtime         varchar2(19),                    /* date this constraint was */
                                                   /*  last enabled-disabled */
  flags         number,                                             /* flags */
                   /* see ku$_constraint0_t for flag bit definitions */
  schema_obj    ku$_schemaobj_t,                  /* referenced table object */
  src_col_list  ku$_constraint_col_list_t,                 /* source columns */
  tgt_col_list  ku$_constraint_col_list_t                  /* target columns */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CONSTRAINT2_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CONTEXT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CONTEXT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                            /* context object number */
  schema_obj    ku$_schemaobj_t,                   /* context schema object */
  schema_name   varchar2(128),                                /* schema name */
  package_name  varchar2(128),                               /* package name */
  flags         number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CONTEXT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CREDENTIAL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CREDENTIAL_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                          /* credential object number */
  schema_obj    ku$_schemaobj_t,                 /* credential schema object */
  password      varchar2(255),                                   /* password */
  domain        varchar2(128),                                     /* domain */
  flags         number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CREDENTIAL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CUBE_DIM_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CUBE_DIM_LIST_T" 
 force as table of (ku$_cube_dim_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CUBE_DIM_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CUBE_DIM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CUBE_DIM_T" force as object
(
  obj_num       number,                             /* Parent table object # */
  colname       varchar2(128),               /* Base data column (col$.name) */
  obj           varchar2(512),         /* Mapped AW object (aw_obj$.objname) */
  dimusing      varchar2(512),  /* USING rel for native dt (aw_obj$.objname) */
  gid           ku$_cube_fact_list_t,                                 /* GID */
  pgid          ku$_cube_fact_list_t,                          /* Parent GID */
  attrs         ku$_cube_fact_list_t,                          /* Attributes */
  levels        ku$_cube_fact_list_t,                              /* Levels */
  hiers         ku$_cube_hier_list_t,                         /* Hierarchies */
  flags         number                                              /* Flags */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CUBE_DIM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CUBE_FACT_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CUBE_FACT_LIST_T" 
 force as table of (ku$_cube_fact_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CUBE_FACT_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CUBE_FACT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CUBE_FACT_T" force as object
(
  obj_num  number,                                  /* Parent table object # */
  colname  varchar2(128),                     /* SQL column name (col$.name) */
  pcolname varchar2(128),              /* Parent SQL column name (col$.name) */
  ccolname varchar2(128),               /* COUNT SQL column name (col$.name) */
  obj      varchar2(512),              /* Mapped AW object (aw_obj$.objname) */
  qdr      varchar2(512),       /* QDRing dimension object (aw_obj$.objname) */
  qdrval   varchar2(100),                                     /* QDRed value */
  flags    number                                                   /* Flags */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CUBE_FACT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CUBE_HIER_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CUBE_HIER_LIST_T" 
 force as table of (ku$_cube_hier_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CUBE_HIER_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CUBE_HIER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CUBE_HIER_T" force as object
(
  obj_num  number,                                  /* Parent table object # */
  rel      varchar2(512),            /* Mapped AW relation (aw_obj$.objname) */
  qdr      varchar2(512),       /* QDRing dimension object (aw_obj$.objname) */
  qdrval   varchar2(100),                                     /* QDRed value */
  levels   ku$_cube_fact_list_t,                      /* Levels in hierarchy */
  inhier   ku$_cube_fact_list_t,                   /* Mapped AW IN Hierarchy */
  flags    number                                                   /* Flags */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CUBE_HIER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_CUBE_TAB_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_CUBE_TAB_T" force as object
(
  obj_num       number,                             /* Parent table object # */
  awname        varchar2(128),              /* Underlying AW name (aw$.name) */
  flags         number,                                             /* Flags */
  dims          ku$_cube_dim_list_t,                           /* Dimensions */
  facts         ku$_cube_fact_list_t,                            /* Measures */
  cgid          ku$_cube_fact_list_t                             /* Cube GID */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_CUBE_TAB_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DBLINK_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DBLINK_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  owner_name    varchar2(128),
  owner_num     number,
  name          varchar2(128),
  ctime         varchar2(19),
  host          varchar2(2000),
  userid        varchar2(128),
  password      varchar2(128),
  flag          number,
  authusr       varchar2(128),
  authpwd       varchar2(128),
  passwordx     raw(128),
  authpwdx      raw(128)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DBLINK_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DDL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DDL" FORCE AS OBJECT
        (       ddltext         CLOB,                   -- The DDL text
                parsedItems     sys.ku$_parsed_items    -- the parsed items
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_DDL" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DDLS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DDLS" FORCE IS TABLE OF (sys.ku$_ddl)
NOT PERSISTABLE;

/

  GRANT EXECUTE ON "SYS"."KU$_DDLS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DEFERRED_STG_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DEFERRED_STG_T" force as object
(
  obj_num       number,                            /* object number */
  pctfree_stg   number,                                  /* PCTFREE */
  pctused_stg   number,                                  /* PCTUSED */
  size_stg      number,                                     /* SIZE */
  initial_stg   number,                                  /* INITIAL */
  next_stg      number,                                     /* NEXT */
  minext_stg    number,                               /* MINEXTENTS */
  maxext_stg    number,                               /* MAXEXTENTS */
  maxsiz_stg    number,                                  /* MAXSIZE */
  lobret_stg    number,                             /* LOBRETENTION */
  mintim_stg    number,                                  /* MIN tim */
  pctinc_stg    number,                              /* PCTINCREASE */
  initra_stg    number,                                 /* INITRANS */
  maxtra_stg    number,                                 /* MAXTRANS */
  optimal_stg   number,                                  /* OPTIMAL */
  maxins_stg    number,                             /* MAXINSTANCES */
  frlins_stg    number,                           /* LISTS/instance */
  flags_stg     number,                                    /* flags */
  bfp_stg       number,                              /* BUFFER_POOL */
  enc_stg       number,                               /* encryption */
  cmpflag_stg   number,                         /* compression type */
  cmplvl_stg    number,                        /* compression level */
  imcflag_stg   number,            /* in-memory columnar (IMC) flag */
  ccflag_stg    number,                 /* columnar cache (CC) flag */
  flags2_stg    number                          /* additional flags */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DEFERRED_STG_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DEFROLE_ITEM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DEFROLE_ITEM_T" force as object
(
  user_id       number,                                          /* user id  */
  user_name     varchar2(128),                                  /* user name */
  role          varchar2(128),                           /* role source name */
  role_id       number                                            /* role id */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DEFROLE_ITEM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DEFROLE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DEFROLE_LIST_T" force
as TABLE of (ku$_defrole_item_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DEFROLE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DEFROLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DEFROLE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  user_id       number,                                       /* profile id  */
  user_name     varchar2(128),                                  /* user name */
  user_type     number,                                /* 0 = role, 1 = user */
  defrole       number,                                 /* default role type */
  role_list     ku$_defrole_list_t                              /* role list */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DEFROLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DIMENSION_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DIMENSION_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                           /* dimension object number */
  schema_obj    ku$_schemaobj_t,                  /* dimension schema object */
  dimtextlen    number,                                 /* length of dimtext */
  dimtext       clob                      /* store the dimension when length */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DIMENSION_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DIRECTORY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DIRECTORY_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                           /* directory object number */
  schema_obj    ku$_schemaobj_t,                  /* directory schema object */
  audit_val     varchar2(128),                           /* auditing options */
  os_path       varchar2(4000)                             /* OS path string */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DIRECTORY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DOMIDX_PLSQL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DOMIDX_PLSQL_T" force as object
(
  obj_num       number,                 /* object # */
  plsql         ku$_procobj_lines       /* plsql code */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DOMIDX_PLSQL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DOMIDX_2NDTAB_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DOMIDX_2NDTAB_LIST_T" 
 force as table of (ku$_domidx_2ndtab_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DOMIDX_2NDTAB_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DOMIDX_2NDTAB_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DOMIDX_2NDTAB_T" force as object
(
  obj_num       number,                            /* object number of index */
  secobj_num    number,                 /* object number of secondary object */
  schema_obj    ku$_schemaobj_t                          /* secondary object */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DOMIDX_2NDTAB_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DROPCOLLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DROPCOLLIST" FORCE
AS VARRAY(1000) OF (VARCHAR2(4000)) NOT PERSISTABLE;

/

  GRANT EXECUTE ON "SYS"."KU$_DROPCOLLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_COMMAND_RULE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_COMMAND_RULE_T" force as object
(
  vers_major      char(1),                           /* UDT major version # */
  vers_minor      char(1),                           /* UDT minor version # */
  rule_set_name   varchar2(128)                         /* name of Rule Set */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_COMMAND_RULE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_COMM_RULE_ALTS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_COMM_RULE_ALTS_T" force as object
(
  vers_major      char(1),                           /* UDT major version # */
  vers_minor      char(1),                           /* UDT minor version # */
  rule_set_name   varchar2(90)                          /* name of Rule Set */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_COMM_RULE_ALTS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_ACCTS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_ACCTS_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  state                    varchar2(128)                           /* state */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_ACCTS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_AUTH_AP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_AUTH_AP_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  grantee_name             varchar2(128)                    /* Grantee Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_AUTH_AP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_AUTH_DBCAPTURE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_AUTH_DBCAPTURE_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  grantee_name             varchar2(128)                    /* Grantee Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_AUTH_DBCAPTURE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_AUTH_DBREPLAY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_AUTH_DBREPLAY_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  grantee_name             varchar2(128)                    /* Grantee Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_AUTH_DBREPLAY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_AUTH_DDL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_AUTH_DDL_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  grantee_name             varchar2(128)                    /* Grantee Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_AUTH_DDL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_AUTH_DIAG_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_AUTH_DIAG_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  grantee_name             varchar2(128)                    /* Grantee Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_AUTH_DIAG_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_AUTH_DP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_AUTH_DP_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  grantee_name             varchar2(128)                    /* Grantee Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_AUTH_DP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_AUTH_JOB_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_AUTH_JOB_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  grantee_name             varchar2(128)                    /* Grantee Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_AUTH_JOB_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_AUTH_MAINT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_AUTH_MAINT_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  grantee_name             varchar2(128)                    /* Grantee Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_AUTH_MAINT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_AUTH_PREP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_AUTH_PREP_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  grantee_name             varchar2(128)                    /* Grantee Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_AUTH_PREP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_AUTH_PROXY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_AUTH_PROXY_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  grantee_name             varchar2(128)                    /* Grantee Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_AUTH_PROXY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_AUTH_TTS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_AUTH_TTS_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  grantee_name             varchar2(128)                    /* Grantee Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_AUTH_TTS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_INDEX_FUNC_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_INDEX_FUNC_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  object_name   varchar2(128)                           /* name of function */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_INDEX_FUNC_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_DV_ORADEBUG_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_DV_ORADEBUG_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  state                    varchar2(128)                           /* state */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_DV_ORADEBUG_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_FACTOR_LINK_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_FACTOR_LINK_T" force as object
(
  vers_major           char(1),                      /* UDT major version # */
  vers_minor           char(1),                      /* UDT minor version # */
  parent_factor_name   varchar2(128)                  /* Parent Factor name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_FACTOR_LINK_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_FACTOR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_FACTOR_T" force as object
(
  vers_major           char(1),                      /* UDT major version # */
  vers_minor           char(1),                      /* UDT minor version # */
  factor_name          varchar2(128)                         /* Factor name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_FACTOR_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_FACTOR_TYPE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_FACTOR_TYPE_T" force as object
(
  vers_major           char(1),                      /* UDT major version # */
  vers_minor           char(1),                      /* UDT minor version # */
  name                 varchar2(128)                    /* Factor type name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_FACTOR_TYPE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_IDENTITY_MAP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_IDENTITY_MAP_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  identity_factor_name     varchar2(128)           /* Factor the map is for */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_IDENTITY_MAP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_IDENTITY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_IDENTITY_T" force as object
(
  vers_major           char(1),                      /* UDT major version # */
  vers_minor           char(1),                      /* UDT minor version # */
  factor_name          varchar2(128)                    /* Factor type name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_IDENTITY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_ISRM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_ISRM_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  schema_name   varchar2(128)    /* schema to be protected by Staging Realm */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_ISRM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_ISR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_ISR_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1)                              /* UDT minor version # */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_ISR_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_POLICY_OBJ_C_ALTS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_POLICY_OBJ_C_ALTS_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  name                     varchar2(128)                     /* Policy Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_POLICY_OBJ_C_ALTS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_POLICY_OBJ_C_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_POLICY_OBJ_C_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  name                     varchar2(128)                     /* Policy Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_POLICY_OBJ_C_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_POLICY_OBJ_R_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_POLICY_OBJ_R_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  name                     varchar2(128)                     /* Policy Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_POLICY_OBJ_R_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_POLICY_OWNER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_POLICY_OWNER_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  name                     varchar2(128)                     /* Policy Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_POLICY_OWNER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_POLICY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_POLICY_T" force as object
(
  vers_major               char(1),                  /* UDT major version # */
  vers_minor               char(1),                  /* UDT minor version # */
  name                     varchar2(128)                     /* Policy Name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_POLICY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_REALM_AUTH_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_REALM_AUTH_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  realm_name    varchar2(128)               /* name of database vault realm */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_REALM_AUTH_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_REALM_MEMBER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_REALM_MEMBER_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  name          varchar2(128)               /* name of database vault realm */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_REALM_MEMBER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_REALM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_REALM_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  name          varchar2(128)               /* name of database vault realm */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_REALM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_ROLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_ROLE_T" force as object
(
  vers_major           char(1),                      /* UDT major version # */
  vers_minor           char(1),                      /* UDT minor version # */
  role                 varchar2(128)                           /* Role name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_ROLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_RULE_SET_MEMBER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_RULE_SET_MEMBER_T" force as object
(
  vers_major      char(1),                           /* UDT major version # */
  vers_minor      char(1),                           /* UDT minor version # */
  rule_set_name   varchar2(128)                         /* name of Rule Set */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_RULE_SET_MEMBER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_RULE_SET_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_RULE_SET_T" force as object
(
  vers_major      char(1),                           /* UDT major version # */
  vers_minor      char(1),                           /* UDT minor version # */
  rule_set_name   varchar2(128)                         /* name of Rule Set */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_RULE_SET_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMMY_RULE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMMY_RULE_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  rule_name     varchar2(128)                               /* name of Rule */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_DUMMY_RULE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMPFILE_INFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMPFILE_INFO" FORCE
AS TABLE OF (sys.ku$_dumpfile_item)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_DUMPFILE_INFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMPFILE_ITEM
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMPFILE_ITEM" FORCE IS OBJECT
        (
                item_code       NUMBER,           -- Identifies header item
                value           VARCHAR2(2048)    -- Text string value
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_DUMPFILE_ITEM" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMPFILESET1010
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMPFILESET1010" FORCE
AS TABLE OF (sys.ku$_DumpFile1010)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_DUMPFILESET1010" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_DUMPFILE1010
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_DUMPFILE1010" FORCE IS OBJECT
        (
                file_name           VARCHAR2(4000),   -- Fully-qualified name
                file_type           NUMBER,           -- 0=Disk, 1=Pipe, etc.
                file_size           NUMBER,           -- Its length in bytes
                file_bytes_written  NUMBER            -- Bytes written so far
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_DUMPFILE1010" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ERRORLINE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ERRORLINE" FORCE AS OBJECT
        (       errorNumber     NUMBER,
                errorText       VARCHAR2(2000) )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_ERRORLINE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ERRORLINES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ERRORLINES" FORCE AS TABLE OF (sys.ku$_ErrorLine)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_ERRORLINES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_EXP_PKG_BODY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_EXP_PKG_BODY_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  base_obj_num  number,                                /* base object number */
  obj_num       number,                                     /* object number */
  type_num      number,                                       /* type number */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  source_lines  ku$_source_list_t,                           /* source lines */
  compiler_info ku$_switch_compiler_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_EXP_PKG_BODY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_EXP_TYPE_BODY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_EXP_TYPE_BODY_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  base_obj_num  number,                                /* base object number */
  obj_num       number,                                     /* object number */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  source_lines  ku$_source_list_t,                          /* source lines */
  compiler_info ku$_switch_compiler_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_EXP_TYPE_BODY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_EXTLOC_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_EXTLOC_LIST_T" 
 force as table of (ku$_extloc_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_EXTLOC_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_EXTLOC_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_EXTLOC_T" force as object
(
  obj_num       number,                          /* base table object number */
  position      number,                               /* this location index */
  dir           varchar2(128),                  /* location directory object */
  name          varchar2(4000)                              /* location name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_EXTLOC_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_EXTTAB_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_EXTTAB_T" force as object
(
  obj_num       number,                          /* base table object number */
  default_dir   varchar2(128),                          /* default directory */
  type          varchar2(128),                         /* access driver type */
  nr_locations  number,                               /* number of locations */
  reject_limit  number,                                      /* reject limit */
  par_type      number,             /* access parameter type: blob=1, clob=2 */
  param_clob    clob,                      /* access parameters in clob form */
  property      number,            /* 0x01 all cols, 0x02 referenced columns */
  location      ku$_extloc_list_t                      /* external locations */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_EXTTAB_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_FBA_PERIOD_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_FBA_PERIOD_LIST_T" 
 force as table of (ku$_fba_period_t)
not persistable

/
--------------------------------------------------------
--  DDL for Type KU$_FBA_PERIOD_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_FBA_PERIOD_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                        /* table obj# */
  periodname    varchar2(255),                                /* period name */
  flags         number,
  periodstart   varchar2(255),
  periodend     varchar2(255),
  spare         number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_FBA_PERIOD_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_FBA_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_FBA_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                        /* table obj# */
  fa_num        number,                               /* flashback archive # */
  fa_name       varchar2(255)                      /* flashback archive name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_FBA_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_FGA_POLICY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_FGA_POLICY_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                              /* parent object number */
  name          varchar2(128),                             /* name of policy */
  ptxt          clob,                                    /* policy predicate */
  pfschema      varchar2(128),                    /* schema of event handler */
  ppname        varchar2(128),                         /* event package name */
  pfname        varchar2(128),                        /* event funciton name */
  pcol          ku$_fga_rel_col_list_t,              /* relevent column List */
  enable_flag   number,                         /* 0 = disabled, 1 = enabled */
  stmt_type     number,              /* statement type default is 1 = select */
  audit_trail   number,              /* audit trail 0 = DB_EXTENDED, 64 = DB */
  pcol_opt      number,           /* audit_column_options 0 = any, 128 = all */
  base_obj      ku$_schemaobj_t,                       /* base Schema object */
  powner        varchar2(128)                             /* owner of policy */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_FGA_POLICY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_FGA_REL_COL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_FGA_REL_COL_LIST_T" 
 force as table of (ku$_fga_rel_col_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_FGA_REL_COL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_FGA_REL_COL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_FGA_REL_COL_T" force as object
(
    audit_column varchar2(128)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_FGA_REL_COL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_FILE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_FILE_LIST_T" 
 force as table of (ku$_file_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_FILE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_FILE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_FILE_T" force as object
(
  name          varchar2(923),   /* raw fname:limited to 923 bytes (max OID) */
  fname         varchar2(2050),  /* fixed filename with sgl. ' escaped as '' */
  fsize         number,                            /* size of file in blocks */
  resize        number,                          /* resize of file in blocks */
  maxextend     number,                                 /* maximum file size */
  inc           number,                                 /* increment ammount */
  ts_num        number,                                 /* tablespace number */
  tfstatus      number,                                 /* Temp file status  */
  is_omf        number                   /* 1 if file is an OMF, 0 otherwise */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_FILE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_FIND_SGC_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_FIND_SGC_T" force as object
(
  obj_num               number,                           /* index obj # */
  num_cols              number,                           /* #cols in index */
  index_owner           varchar2(128),
  index_name            varchar2(128),
  table_owner           varchar2(128),
  table_name            varchar2(128),
  col_list              ku$_sgi_col_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_FIND_SGC_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_FULL_PKG_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_FULL_PKG_T" force as object
(
  vers_major            char(1),                      /* UDT major version # */
  vers_minor            char(2),                      /* UDT minor version # */
  obj_num               number,                             /* object number */
  schema_obj            ku$_schemaobj_t,                    /* schema object */
  package_t             ku$_proc_t,                        /* package header */
  package_body_t        ku$_proc_t                           /* package body */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_FULL_PKG_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_FULL_TYPE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_FULL_TYPE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                     /* object number */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  type_t        ku$_type_t,                                   /* type object */
  type_body_t   ku$_type_body_t                          /* type body object */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_FULL_TYPE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_AV_CACHE_LVGP_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_AV_CACHE_LVGP_LIST_T" 
 force as table of (ku$_hcs_av_cache_lvgp_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_AV_CACHE_LVGP_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_AV_CACHE_LVGP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_AV_CACHE_LVGP_T" force as object
(
  av_obj#         number,                       /* obj# of the analytic view */
  measlst#        number,                                   /* id of measlst */
  lvlgrp#         number,                                /* id of the lvlgrp */
  cache_type      varchar2(128),                               /* cache type */
  lvl_list        ku$_hcs_av_cache_lvl_list_t,                     /* levels */
  order_num       number                              /* order of the lvlgrp */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_AV_CACHE_LVGP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_AV_CACHE_LVL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_AV_CACHE_LVL_LIST_T" 
 force as table of (ku$_hcs_av_cache_lvl_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_AV_CACHE_LVL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_AV_CACHE_LVL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_AV_CACHE_LVL_T" force as object
(
  av_obj#         number,                       /* obj# of the analytic view */
  lvlgrp#         number,                                    /* id of lvlgrp */
  dim_alias       varchar2(128),                    /* name of the dim alias */
  hier_alias      varchar2(128),                   /* name of the hier alias */
  level_name      varchar2(128),                        /* name of the level */
  order_num       number                        /* order number of the level */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_AV_CACHE_LVL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_AV_CACHE_MEAS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_AV_CACHE_MEAS_LIST_T" 
 force as table of (ku$_hcs_av_cache_meas_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_AV_CACHE_MEAS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_AV_CACHE_MEAS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_AV_CACHE_MEAS_T" force as object
(
  av_obj#         number,                       /* obj# of the analytic view */
  measlst#        number,                                   /* id of measlst */
  meas_name       varchar2(128),                      /* name of the measure */
  order_num       number                      /* order number of the measure */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_AV_CACHE_MEAS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_AV_CACHE_MLST_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_AV_CACHE_MLST_LIST_T" 
 force as table of (ku$_hcs_av_cache_mlst_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_AV_CACHE_MLST_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_AV_CACHE_MLST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_AV_CACHE_MLST_T" force as object
(
  av_obj#         number,                       /* obj# of the analytic view */
  measlst#        number,                                   /* id of measlst */
  meas_list       ku$_hcs_av_cache_meas_list_t,                  /* measures */
  lvlgrp_list     ku$_hcs_av_cache_lvgp_list_t               /* level groups */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_AV_CACHE_MLST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_CLSFCTN_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_CLSFCTN_LIST_T" force
as table of (ku$_hcs_clsfctn_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_CLSFCTN_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_CLSFCTN_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_CLSFCTN_T" force as object
(
  obj#            number, /* top lvl object id containing the classification */
  sub_obj#        number,    /*  sub object id containing the classification */
  obj_type        number,                                  /* type of object */
  clsfction_name  varchar2(128),  /* classification name (from hcs_clsfctn$) */
  clsfction_lang  varchar2(64),          /* optional classification language */
  clsfction_value clob,                              /* classification value */
  order_num       number                   /* order number of classification */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_CLSFCTN_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_SRC_COL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_SRC_COL_LIST_T" force
as table of (ku$_hcs_src_col_t)
not persistable

/
--------------------------------------------------------
--  DDL for Type KU$_HCS_SRC_COL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_SRC_COL_T" force as object
(
  obj#           number,          /* top lvl object id containing the srcCol */
  src_col#       number,                          /* id of the source column */
  obj_type       number,                /* object type containing the srcCol */
  table_alias    varchar2(128),/* owner of column (hcs_src_col$.table_alias) */
  src_col_name   varchar2(128) /* name of column (hcs_src_col$.src_col_name) */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_SRC_COL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_SRC_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_SRC_LIST_T" force as table of (ku$_hcs_src_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_SRC_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HCS_SRC_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HCS_SRC_T" force as object
(
  hcs_obj#       number,            /* obj# of the hier dim or analytic view */
  src_id         number,    /* id of the source in hier dim or analytic view */
  owner          varchar2(128),      /* owner of the source (hcs_src$.owner) */
  owner_in_ddl   number(1),                      /* whether owner was in DDL */
  name           varchar2(128),        /* name of the source (hcs_src$.name) */
  alias          varchar2(128),      /* alias of the source (hcs_src$.alias) */
  order_num      number                        /* order number of the soruce */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HCS_SRC_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HIERARCHY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HIERARCHY_T" force as object
(
  obj_num         number,                       /* object number of the hier */
  schema_obj      ku$_schemaobj_t,                          /* schema object */
  dim_owner       varchar2(128),                          /* dimension owner */
  owner_in_ddl    number(1),                     /* whether owner was in DDL */
  dim_name        varchar2(128),                           /* dimension name */
  lvl_list        ku$_hier_lvl_list_t,           /* list of hierarchy levels */
  clsfctn_list    ku$_hcs_clsfctn_list_t,                 /* classifications */
  join_path_list  ku$_hier_join_path_list_t,                   /* join paths */
  hr_attr_list    ku$_hier_hier_attr_list_t   /* hier attr w/classifications */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HIERARCHY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HIER_HIER_ATTR_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HIER_HIER_ATTR_LIST_T" 
 force as table of (ku$_hier_hier_attr_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HIER_HIER_ATTR_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HIER_HIER_ATTR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HIER_HIER_ATTR_T" force as object
(
  hier_obj#      number,                                 /* obj# of the hier */
  name           varchar2(128), /* attr name (hcs_hier_attr$.hier_attr_name) */
  expr           clob,             /* expression (NULL for system-generated) */
  clsfctn_list   ku$_hcs_clsfctn_list_t,                  /* classifications */
  order_num      number                          /* order number of the attr */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HIER_HIER_ATTR_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HIER_JOIN_PATH_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HIER_JOIN_PATH_LIST_T" 
 force as table of (ku$_hier_join_path_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HIER_JOIN_PATH_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HIER_JOIN_PATH_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HIER_JOIN_PATH_T" force as object
(
  hier_obj#      number,                                 /* obj# of the hier */
  name           varchar2(128), /* name (hcs_hier_join_path$.join_path_name) */
  order_num      number                        /* order number of attributes */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HIER_JOIN_PATH_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HIER_LVL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HIER_LVL_LIST_T" 
 force as table of (ku$_hier_lvl_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HIER_LVL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HIER_LVL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HIER_LVL_T" force as object
(
  hier_obj#      number,                                 /* obj# of the hier */
  name           varchar2(128),         /* level name (hcs_hr_lvl$.lvl_name) */
  order_num      number                         /* order number of the level */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HIER_LVL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HISTGRM_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HISTGRM_LIST_T" 
 force as table of (ku$_histgrm_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HISTGRM_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HISTGRM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HISTGRM_T" force as object
(
  obj_num           number,             -- histogram object number
  intcol_num        number,             -- internal object number
  bucket            number,             -- bucket information
  endpoint          number,             -- endpoint value
  epvalue           VARCHAR2(4000),     -- ep value
  epvalue_raw       RAW(1000),          -- ep value in raw type (12g)
  ep_repeat_count   NUMBER,             -- ep repeat count (12g)
  spare1            number              -- sample number of distinct values
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HISTGRM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_HNTP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_HNTP_T" force as object
(
  obj_num       number,                              /* obj# of nested table */
  property      number,                                  /* table properties */
  property2     number,                                  /* table properties */
  property3     number,                                  /* table properties */
  storage       ku$_storage_t,                                    /* storage */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  ts_name       varchar2(128),                            /* tablespace name */
  blocksize     number,                            /* size of block in bytes */
  pct_free      number,                   /* min. free space %age in a block */
  pct_used      number,                   /* min. used space %age in a block */
  initrans      number,                     /* initial number of transaction */
  maxtrans      number,                     /* maximum number of transaction */
  flags         number                                              /* flags */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_HNTP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_IDENTITY_COLOBJ_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_IDENTITY_COLOBJ_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                      /* object number of base object */
  base_obj      ku$_schemaobj_t,                            /* schema object */
  property      number,                     /* column properties (bit flags) */
  property2     number,                        /*    more column properties  */
  identity_col  ku$_identity_col_t               /* Identity Col information */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_IDENTITY_COLOBJ_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_IDENTITY_COL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_IDENTITY_COL_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                           /* obj# of identity column */
  name          varchar(128),                     /* Name of Identity column */
  property2     number,                    /* identity column property flags */
  intcol_num    number,
  seqobj_num    number,
  start_with    number,
  sequence      ku$_sequence_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_IDENTITY_COL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ILM_POLICY_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ILM_POLICY_LIST_T" force
as table of (ku$_ilm_policy_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ILM_POLICY_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ILM_POLICY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ILM_POLICY_T" force as object
(
  obj_num       number,                            /* object number of table */
  obj_typ       number,                 /* object type (see KQD.H for types) */
  obj_typ_orig  number,    /* object type on which policy originally defined */
                                                   /* or ts# of tablespace   */
  policy_num    number,                                     /* policy number */
  ilmobj_flag   number,         /* ilmobj$.flag                              */
                                /* 0x0001 - policy on object disabled        */
                                /* 0x0002 - inherited from schema (not used) */
                                /* 0x0003 - inherited from tablespace        */
                                /* also ilm$.flag if object is tablespace    */
                                /* 0x0001 - policy disabled                  */
                                /* 0x0002 - schema-level policy              */
                                /* 0x0008 - tablespace-level policy          */
                                /* 0x0010 - default policy                   */
  actionc       varchar2(100),                              /* action clause */
  ctype         number,         /* compression type: 2 = OLTP; 3 = row level */
  clevel        number,         /* compression level                         */
                                /*  1 = query low                            */
                                /*  2 = query high                           */
                                /*  3 = archive low                          */
                                /*  4 = archive high                         */
  cindex        number,         /* index compression level                   */
                                               /*  0x0001 prefix compression */
                                          /*  0x0002 OLTP compression high   */
                                          /*  0x0003 OLTP compression low    */
  cprefix       number,   /* Number of columns in case of prefix compression */
  clevlob       number,                             /* LOB compression level */
                                                               /* 0x0001 LOW */
                                                            /* 0x0002 MEDIUM */
                                                              /* 0x0003 HIGH */
  tier_tbs      varchar2(128),                      /* Tablespace to tier to */
  action        number,                            /* type of ILM action     */
                                                   /* 0x0001 Compression     */
                                                   /* 0x0002 Storage tiering */
  type          number,                            /* type code  ??????? */
  condition     number,                   /* condition policy is based on    */
                                          /* 0x0000 - last access time       */
                                          /* 0x0001 - low access             */
                                          /* 0x0002 - last modification time */
                                          /* 0x0003 - creation time          */
  days          number,                                    /* number of days */
  scope         number,                                 /* policy scope      */
                                                        /* 0x0001 -  segment */
                                                        /* 0x0002 -  group   */
                                                        /* 0x0003 -  row     */
  custfunc      varchar2(128),                           /* cust. func. name */
  flag          number,                                      /* policy flags */
                                                      /* 0x0001 -  READ-ONLY */
                                                         /* 0x0002 -  unused */
                                                         /* 0x0004 - inplace */
                                                         /* 0x0008 -  custom */
                                                           /* 0x0010 - GROUP */
                                               /* 0x0020 - Row level locking */
  flag2         number,                             /* flag2 - fields unused */
  spare1        number,                                             /* spare */
  spare2        number,                                             /* spare */
  spare3        number,                                             /* spare */
  spare4        varchar2(4000),                                     /* spare */
  spare5        varchar2(4000),                                     /* spare */
  spare6        timestamp,
  pol_subtype   number,
  actionc_clob  clob,
  tier_to       number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ILM_POLICY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_IM_COLSEL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_IM_COLSEL_LIST_T" force as table of (ku$_im_colsel_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_IM_COLSEL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_IM_COLSEL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_IM_COLSEL_T" force as object
(
  obj_num       number,                                     /* object number */
  inst_id       number,                                      /* RAC instance */
  column_name   varchar2(129),                                /* Column name */
  compression   varchar2(26),  /* NO INMEMORY or inmemory memcompress clause */
  con_id        number                           /* multitenent container ID */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_IM_COLSEL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_INDARRAYTYPE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_INDARRAYTYPE_LIST_T" force
as table of (ku$_indarraytype_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_INDARRAYTYPE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_INDARRAYTYPE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_INDARRAYTYPE_T" force as object
(
  obj_num       number,                                 /* obj# of indextype */
  type_num      number,                       /* data type of indexed column */
                                           /* for ADT column, type# = DTYADT */
  basetype_obj  ku$_schemaobj_t,                        /* user-defined type */
  arraytype_obj ku$_schemaobj_t                           /* collection type */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_INDARRAYTYPE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_IND_COMPART_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_IND_COMPART_LIST_T" force
as table of (ku$_ind_compart_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_IND_COMPART_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_IND_COMPART_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_IND_COMPART_T" force as object
(
  obj_num       number,                           /* obj# of comp. partition */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  dataobj_num   number,                          /* data layer object number */
  base_obj_num  number,                                     /* obj# of table */
  part_num      number,                                  /* partition number */
  hiboundlen    number,             /* length of high bound value expression */
  hiboundval    varchar2(4000),       /* text of high-bound value expression */
  hiboundvalc   clob,                                      /* clob text of " */
  subpartcnt    number,                           /* number of subpartitions */
  subparts      ku$_ind_part_list_t,                        /* subpartitions */
  flags         number,                                     /* for any flags */
  defts_name    varchar2(128),    /* default TABLESPACE; NULL if unspecified */
  defblocksize  number,          /* blocksize in bytes of default TABLESPACE */
  defpctfree    number,                                   /* default PCTFREE */
  definitrans   number,                                  /* default INITRANS */
  defmaxtrans   number,                                  /* default MAXTRANS */
  definiexts    number,  /* default INITIAL extent size; NULL if unspecified */
  defextsize    number,     /* default NEXT extent size; NULL if unspecified */
  defminexts    number,           /* default MINEXTENTS; NULL if unspecified */
  defmaxexts    number,           /* default MAXEXTENTS; NULL if unspecified */
  defextpct     number,          /* default PCTINCREASE; NULL if unspecified */
  deflists      number,      /* default FREELISTS value; NULL if unspecified */
  defgroups     number,         /* default FREELIST GROUPS (N/A for indexes) */
  deflogging    number,                         /* default LOGGING attribute */
  defbufpool    number,                         /* default BUFFER_POOL value */
  analyzetime   varchar2(19),                /* timestamp when last analyzed */
  samplesize    number,                          /* samplesize for histogram */
  rowcnt        number,                                    /* number of rows */
  blevel        number,                                      /* B-tree level */
  leafcnt       number,                             /* number of leaf blocks */
  distkey       number,                           /* number of distinct keys */
  lblkkey       number,             /* average number of leaf blocks per key */
  dblkkey       number,             /* average number of data blocks per key */
  clufac        number,                                 /* clustering factor */
  spare1        number,
  spare2        number,
  spare3        number,
  defmaxsize    number               /* default MAXSIZE; NULL if unspecified */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_IND_COMPART_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_INDEX_COL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_INDEX_COL_LIST_T" force as table of (ku$_index_col_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_INDEX_COL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_INDEX_COL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_INDEX_COL_T" force as object
(
  obj_num       number,                               /* index object number */
  bo_num        number,                                /* base object number */
  intcol_num    number,                            /* internal column number */
  col           ku$_simple_col_t,                                  /* column */
  pos_num       number,                 /* column position number as created */
  segcol_num    number,                          /* column number in segment */
  segcollen     number,                      /* length of the segment column */
  offset        number,                                  /* offset of column */
  flags         number,                                             /* flags */
  spare2        number,
  spare3        number,
  spare4        varchar2(1000),
  spare5        varchar2(1000),
  spare6        varchar2(19),
  oid_or_setid  number,   /* !0 = hidden unique constraint on OID column (1) */
                                  /* or nested tbl column's SETID column (2) */
  org_col_name  varchar2(128) /* original col name for collation Virtual col */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_INDEX_COL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_INDEX_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_INDEX_LIST_T" force as table of (ku$_index_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_INDEX_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_INDEX_OBJNUM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_INDEX_OBJNUM_T" force as object
(
  obj_num       number,                                              /* obj# */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  ts_name       varchar2(128),                                 /* tablespace */
  ts_num        number,                                          /* tab$.ts# */
  type_num      number,                       /* what kind of index is this? */
  flags         number,                                     /* mutable flags */
  property      number,             /* immutable flags for life of the index */
  for_pkoid     number,                     /* 1 = enabled index for a pkoid */
  for_refpar    number,      /* 1 = used for ref partition parent constraint */
  base_obj_num  number,                                         /* base obj# */
  base_obj      ku$_schemaobj_t             /* base object (if nested table) */
)
not persistable

/
--------------------------------------------------------
--  DDL for Type KU$_INDEXOP_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_INDEXOP_LIST_T" force as TABLE of (ku$_indexop_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_INDEXOP_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_INDEXOP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_INDEXOP_T" force as object
(
  obj_num       number,                          /* obj# of parent indextype */
  oper_num      number,                 /* obj# of operator for this binding */
  bind_num      number,                            /* number of this binding */
  property      number,                                    /* property flags */
                                          /* 0x01 - INEXACT match use filter */
                        /* 0x02 -  invoke rewrite when indexed join is found */
                                    /* 0x04 - this is an "order-by" operator */
  oper_obj      ku$_schemaobj_t,             /* sch. info. for this operator */
  args          ku$_oparg_list_t           /* arguments for this op. binding */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_INDEXOP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_INDEX_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_INDEX_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                          /* object # */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  col_list      ku$_index_col_list_t,               /* list of index columns */
  ts_name       varchar2(128),                                 /* tablespace */
  blocksize     number,                            /* size of block in bytes */
  storage       ku$_storage_t,                                    /* storage */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  dataobj_num   number,                          /* data layer object number */
  base_obj_num  number,                                     /* base object # */
  base_obj      ku$_schemaobj_t,                              /* base object */
  anc_obj       ku$_schemaobj_t,           /* Ancestor object - if available */
  indmethod_num number,             /* object # for cooperative index method */
  indtype_name  varchar2(128),                             /* indextype name */
  indtype_owner varchar2(128),                            /* indextype owner */
  secobjs       ku$_domidx_2ndtab_list_t,                /* secondary tables */
  plsql_code    ku$_domidx_plsql_t,               /* domain index plsql code */
  jijoin_tabs   ku$_jijoin_table_list_t, /* jijoin tables if bitmap join idx */
  jijoin        ku$_jijoin_list_t,       /* jijoin data if bitmap join index */
  cols          number,                                 /* number of columns */
  pct_free      number,          /* minimum free space percentage in a block */
  initrans      number,                     /* initial number of transaction */
  maxtrans      number,                    /* maximum number of transactions */
  pct_thres     number,           /* iot overflow threshold, null if not iot */
  type_num      number,                       /* what kind of index is this? */
  flags         number,                                     /* mutable flags */
  property      number,             /* immutable flags for life of the index */
  blevel        number,                                       /* btree level */
  leafcnt       number,                                  /* # of leaf blocks */
  distkey       number,                                   /* # distinct keys */
  lblkkey       number,                          /* avg # of leaf blocks/key */
  dblkkey       number,                          /* avg # of data blocks/key */
  clufac        number,                                 /* clustering factor */
  analyzetime   varchar2(19),                /* timestamp when last analyzed */
  samplesize    number,                 /* number of rows sampled by Analyze */
  rowcnt        number,                       /* number of rows in the index */
  intcols       number,                        /* number of internal columns */
  degree        number,           /* # of parallel query slaves per instance */
  instances     number,             /* # of OPS instances for parallel query */
  trunccnt      number,                        /* re-used for iots 'inclcol' */
  numcolsdep    number,         /* number of columns depended on, >= intcols */
  numkeycols    number,             /* # of key columns in compressed prefix */
  part_obj      ku$_ind_partobj_t,                /* null if not partitioned */
  spare3        number,
  spare4        varchar2(1000),     /* used for parameter str for domain idx */
  spare5        varchar2(1000),
  spare6        varchar2(19),
  for_pkoid     number,                     /* 1 = enabled index for a pkoid */
  for_refpar    number,      /* 1 = used for ref partition parent constraint */
  oid_or_setid  number,        /* !0 = hidden unique index on OID column (1) */
                                  /* or nested tbl column's SETID column (2) */
  base_property number,             /* property flags of base object (table) */
  base_property2 number,
  base_property3 number,
  /* The following fields are used only for {sub}partition promotion (shard) */
  ind_part      ku$_ind_part_t,                /* p2t - index partition info */
  ind_subpart   ku$_ind_part_t,            /* sp2t - index subpartition info */
  tabpart_obj_num number,    /* obj_num of correspoding table {sub}partition */
  ind_part_name varchar(128)   /* index partition for domain_index_partition */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_INDEX_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_INDEXTYPE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_INDEXTYPE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                 /* obj# of indextype */
  schema_obj    ku$_schemaobj_t,                    /* base schema obj. info */
  impl_obj      ku$_schemaobj_t,        /* sch. info for implementation type */
  property      number,                                         /* property */
                                              /* 0x0001 WITHOUT_COLUMN_DATA */
                                                   /* 0x0002 WITH_ARRAY_DML */
                                              /* 0x0004 WITH_REBUILD_ONLINE */
                                                     /* 0x0008 HAS_ORDER_BY */
                                       /* 0x0010 WITH LOCAL_RANGE_PARTITION */
                                        /* 0x0020 WITH LOCAL_HASH_PARTITION */
                                                      /* 0x0040 WITHOUT_DML */
                                              /* 0x0080 AUTHID_CURRENT_USER */
  operators     ku$_indexop_list_t,
  indarray      ku$_indarraytype_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_INDEXTYPE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_IND_PART_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_IND_PART_LIST_T" force as table of (ku$_ind_part_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_IND_PART_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_IND_PARTOBJ_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_IND_PARTOBJ_T" force as object
(
  obj_num       number,                 /* obj# of partitioned table */
  partobj       ku$_partobj_t,          /* Base partitioning info */
  partcols      ku$_part_col_list_t,         /* list of partitioning columns */
  subpartcols   ku$_part_col_list_t,      /* list of subpartitioning columns */
  part_list     ku$_ind_part_list_t,                 /* index partition list */
  compart_list  ku$_ind_compart_list_t    /* index composite partition list */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_IND_PARTOBJ_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_IND_PART_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_IND_PART_T" force as object
(
  obj_num       number,                                 /* obj# of partition */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  ts_num        number,                                 /* tablespace number */
  ts_name       varchar2(128),                                 /* tablespace */
  blocksize     number,                            /* size of block in bytes */
  storage       ku$_storage_t,                    /* storage characteristics */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  dataobj_num   number,                          /* data layer object number */
-- only for partitions
  base_obj_num  number,                                        /* base index */
  part_num      number,                                  /* partition number */
  tab_part_name varchar2(128),                       /* table partition name */
  hiboundlen    number,                     /* len. of high bound val. expr. */
  hiboundval    varchar2(4000),                        /* text of high bound */
  hiboundvalc   clob,                             /* clob text of high bound */
  pct_thres     number,                 /* iot overflow thresh. null if !iot */
  inclcol       number,                    /* iot include col#, null if !iot */
  parameters    varchar2(1000),                       /* from indpart_param$ */
-- only for subpartitions
  pobj_num      number,                              /* parent object number */
  subpart_num   number,                               /* subpartition number */
  tab_subpart_name varchar2(128),                 /* table subpartition name */
--
  flags         number,                                             /* flags */
  pct_free      number,                   /* min. free space %age in a block */
  initrans      number,                         /* initial # of transactions */
  maxtrans      number,                            /* max. # of transactions */
  analyzetime   varchar2(19),                     /* timestamp last analyzed */
  samplesize    number,                                     /* for histogram */
  rowcnt        number,                                         /* # of rows */
  blevel        number,                                      /* B-tree level */
  leafcnt       number,                             /* number of leaf blocks */
  distkey       number,                                /* # of distinct keys */
  lblkkey       number,                      /* av. # of leaf blocks per key */
  dblkkey       number,                      /* av. # of data blocks per key */
  clufac        number,                                 /* clustering factor */
  spare1        number,
  spare2        number,
  spare3        number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_IND_PART_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_IND_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_IND_STATS_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  obj_num           number,                                   /* Index obj # */
  base_obj_num      number,                                   /* Table obj # */
  base_tab_obj      ku$_schemaobj_t,
  base_ind_obj      ku$_schemaobj_t,
  type_num          number,                   /* what kind of index is this? */
  property          number         /* immutable flags for life of the index */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_IND_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_INSERT_TS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_INSERT_TS_LIST_T" force as table of (ku$_insert_ts_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_INSERT_TS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_INSERT_TS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_INSERT_TS_T" force as object
(
  base_obj_num  number,           /* object number of base partitioned table */
  position_num  number,          /* position of tablespace specified by user */
  ts_num        number,                                 /* tablespace number */
  name          varchar2(128)                          /* name of tablespace */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_INSERT_TS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_IO_TABLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_IO_TABLE_T" force
 as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                              /* obj# */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  base_obj      ku$_schemaobj_t,         /* base object (if secondary table) */
  anc_obj       ku$_schemaobj_t,     /* ancestor object (if secondary table) */
  bobj_num      number,                           /* base obj# (cluster/iot) */
  tab_num       number,                  /* # in cluster, null if !clustered */
  cols          number,                                      /* # of columns */
  clucols       number,                 /* # of clustered cols, if clustered */
  tabcluster    ku$_tabcluster_t,        /* cluster info, null if !clustered */
  fba           ku$_fba_t, /* flashback archive info, null if not fb enabled */
  fba_periods   ku$_fba_period_list_t,                    /* valid-time info */
  clst          ku$_clst_t,                 /* table clustering info, if any */
  ilm_policies  ku$_ilm_policy_list_t,               /* ilm policies, if any */
  flags         number,                                      /* flags <31:0> */
  flags2        number,                                     /* flags <63:32> */
  audit_val     varchar2(128),                           /* auditing options */
  rowcnt        number,                                    /* number of rows */
  blkcnt        number,                                  /* number of blocks */
  empcnt        number,                            /* number of empty blocks */
  avgspc        number,                      /* average available free space */
  chncnt        number,                            /* number of chained rows */
  avgrln        number,                                /* average row length */
  avgspc_flb    number,       /* avg avail free space of blocks on free list */
  flbcnt        number,                             /* free list block count */
  analyzetime   varchar2(19),                /* timestamp when last analyzed */
  samplesize    number,                 /* number of rows sampled by Analyze */
  degree        number,                       /* # of PQ slaves per instance */
  instances     number,                         /* # of OPS instances for PQ */
  intcols       number,                             /* # of internal columns */
  kernelcols    number,                   /* number of REAL (kernel) columns */
  tstz_cols     char(1),                        /* 'Y' = table has TSTZ data */
  trigflag      number,                              /* inline trigger flags */
  spare1        number,                       /* used to store hakan_kqldtvc */
  spare2        number,         /* committed partition # used by drop column */
  spare3        number,                           /* summary sequence number */
  spare4        varchar2(1000),         /* committed RID used by drop column */
  spare5        varchar2(1000),
  spare6        varchar2(19),                               /* dml timestamp */
  spare7        number,
  spare8        number,
  spare9        varchar2(1000),
  spare10       varchar2(1000),
  encalg        number,  /* encryption algorithm id if a column is encrypted */
  intalg        number,   /* integrity algorithm id if a column is encrypted */
  im_colsel     ku$_im_colsel_list_t,           /* inmemory selective column */
  con0_list     ku$_constraint0_list_t,               /* list of constraints */
  con2_list     ku$_constraint2_list_t,               /* list of constraints */
  exttab        ku$_exttab_t,                     /* external table metadata */
  cubetab       ku$_cube_tab_t,                /* organization cube metadata */
  svcname       varchar(1000),            /* service name for IMC DISTRIBUTE */
  svcflags      number,                  /* service flags for IMC DISTRIBUTE */
  /* table storage (differs for p2t)
     NOTE - properties must also change for p2t */
  property      number,                                  /* table properties */
  property2     number,                             /* more table properties */
            /* the table property bits are defined in qcdl.h and kqld.h      */
            /* with names beginning "KQLDTVCP_" and "KQLDTVCP2_"             */
            /* e.g., KQLDTVCP_TTV,  KQLDTVCP2_ILM_MODTR                      */
  /* The low 32 bits of tab$.property are in "property"; "property2" has     */
  /* the high-order bits. Here are the bit definitions of tab$.property:     */
                   /* 0x01 = typed table */
                   /* 0x02 = has ADT columns, */
                   /* 0x04 = has nested-TABLE columns */
                   /* 0x08 = has REF columns, */
                   /* 0x10     (16) = has array columns */
                   /* 0x20     (32) = partitioned table, */
                   /* 0x40     (64) = index-only table (IOT) */
                   /* 0x80    (128) = IOT w/ row OVerflow, */
                   /* 0x100   (256) = IOT w/ row CLustering */
                   /* 0x200   (512) = IOT OVeRflow segment, */
                   /* 0x400  (1024) = clustered table */
                   /* 0x800  (2048) = has internal LOB columns, */
                   /* 0x1000 (4096) = has primary key-based OID$ column */
                   /* 0x2000 (8192) = nested table */
                   /* 0x4000 (16384) = View is Read Only */
                   /* 0x8000 (32768) = has FILE columns */
                   /* 0x10000 (65536) = obj view OID is sys-generated */
                   /* 0x20000 (131072) = used as AQ table */
                   /* 0x40000 (262144)= has user-defined lob columns */
                   /* 0x80000 (524288)= table contains unused columns */
                   /* 0x100000 (1048576)= has an on-commit materialized view */
                   /* 0x200000 (2097152)= has system-generated column names */
                   /* 0x400000 (4194304)= global temporary table */
                   /* 0x800000 (8388608)= session-specific temporary table */
                   /* 0x8000000 (134217728)= table is a sub table */
                   /* 0x20000000 (536870912) = pdml itl invariant */
                   /* 0x80000000 (2147483648)= table is external  */
  /* property2: High-order bits of tab$.property                             */
  /*  0x000000100000000 (1) - table is a CUBE table                          */
  /*  0x000000400000000 (4) = delayed segment creation                       */
  /*  0x000020000000000 (512) = result cache mode FORCE enabled on this tbl  */
  /*  0x000040000000000 (1024) = result cache mode MANUAL enabled on this tbl*/
  /*  0x000080000000000 (2048) = result cache mode AUTO enabled on this tbl */
  /*  0x020000000000000 (2097152) -                         long varchar col */
  /*  0x00040000000000000   (4194304)-    this table has a clustering clause */
  /*                                        (applies only to the fact table).*/
  /*  0x00080000000000000   (8388608)-   this table has one or more zonemaps */
  /*                                                           defined on it.*/
  /*  0x00400000000000000  (67108864)= has identity column                   */
  /*  0x01000000000000000 (268435456)-     this table appears as a dimension */
  /*                                       in one or more clustering clauses.*/
            /* the table property bits are defined in qcdl.h and kqld.h      */
            /* with names beginning "KQLDTVCP_" and "KQLDTVCP2_"             */
            /* e.g., KQLDTVCP_TTV,  KQLDTVCP2_ILM_MODTR                      */
  property3 number,
           /* the table property bits are defined in qcdl.h and kqld.h       */
           /* With names beginning KQLDTVCP3_                                */
           /* Here are the bit definitions of tab$.property2:                */
                /* 0x00000001 (1) = Binary XML table uses granular token set */
                /* 0x00000002 (2) = Table is a Binary XML Token Set entity   */
  storage       ku$_storage_t,                                    /* storage */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  ts_name       varchar2(128),                            /* tablespace name */
  blocksize     number,                            /* size of block in bytes */
  dataobj_num   number,                                /* data layer object# */
  pct_free      number,                   /* min. free space %age in a block */
  pct_used      number,                   /* min. used space %age in a block */
  initrans      number,                     /* initial number of transaction */
  maxtrans      number,                     /* maximum number of transaction */
  con1_list     ku$_constraint1_list_t,               /* list of constraints */
  /* col_list */
  col_list      ku$_tab_column_list_t,                   /* list of columns */
  /* used for 'full' tables (ADTs and such)  */
  nt            ku$_nt_parent_t,                            /* nested tables */
  pkref_list    ku$_pkref_constraint_list_t, /* list of table ref constraints*/
  /*   xml metadata */
  xmlschemacols char(1),          /* 'Y' = table has xmlschema-based columns */
  xmlcolset     ku$_XmlColSet_t,        /* OR intcolnums for xmltype stoarge */
  xmlhierarchy  char(1),             /* 'Y' = table is xml hierarchy enabled */
  /* reference partition child only */
  parent_obj    ku$_schemaobj_t,          /* parent object (if refpar child) */
  refpar_level  number,                         /* reference partition level */
  /* used for partitioned tables */
  objgrant_list ku$_objgrant_list_t,/* grants required, refpar parent access */
  /* used for IOTs  */
  pct_thresh    number,                            /* pctthreshold for IOTs. */
  numkeycols    number,      /* # of key columns in compressed prefix (IOTs) */
  inclcol_name  varchar(128),/*column where IOT splits into overflow segment */
  iov           ku$_ov_table_t,                            /* overflow table */
  maptab        ku$_map_table_t,                            /* mapping table */
  part_obj      ku$_iot_partobj_t ) not persistable

/
--------------------------------------------------------
--  DDL for Type KU$_IOT_PARTOBJ_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_IOT_PARTOBJ_T" force as object
(
  obj_num       number,                                     /* obj# of table */

  tabpartobj    ku$_partobj_t,                       /* table partition info */
  partcols      ku$_part_col_list_t,         /* list of partitioning columns */
  subpartcols   ku$_part_col_list_t,      /* list of subpartitioning columns */



  indpartobj    ku$_partobj_t,                       /* index partition info */
  ovpartobj     ku$_partobj_t,                    /* overflow partition info */
  part_list     ku$_piot_part_list_t,                      /* partition list */
  iov_list      ku$_ov_tabpart_list_t,           /* overflow part table list */
  imap_list     ku$_map_tabpart_list_t            /* mapping part table list */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_IOT_PARTOBJ_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JAVA_CLASS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JAVA_CLASS_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                         /* java source object number */
  schema_obj    ku$_schemaobj_t,                /* java source schema object */
  long_name     varchar2(4000),                         /* synonym long name */
  java_resource sys.ku$_java_t                               /* source lines */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_JAVA_CLASS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JAVA_RESOURCE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JAVA_RESOURCE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                         /* java source object number */
  schema_obj    ku$_schemaobj_t,                /* java source schema object */
  long_name     varchar2(4000),                         /* synonym long name */
  java_resource sys.ku$_java_t                               /* source lines */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_JAVA_RESOURCE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JAVA_SOURCE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JAVA_SOURCE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                         /* java source object number */
  schema_obj    ku$_schemaobj_t,                /* java source schema object */
  long_name     varchar2(4000),                              /* synlong name */
  source_lines  ku$_source_list_t,                           /* source lines */
  java_resource sys.ku$_java_t                             /* export source  */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_JAVA_SOURCE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JAVA_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JAVA_T" FORCE AS OBJECT
(
  type_num              number,
  flags                 number,
  properties            number,
  raw_chunk_count       number,
  total_raw_byte_count  number,
  text_chunk_count      number,
  total_text_byte_count number,
  raw_chunk             sys.ku$_chunk_list_t,
  text_chunk            sys.ku$_chunk_list_t
)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_JAVA_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JIJOIN_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JIJOIN_LIST_T" force as table of (ku$_jijoin_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_JIJOIN_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JIJOIN_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JIJOIN_T" force as object
(
  obj_num       number,                                          /* object # */
  tab1obj_num   number,                                /* table 1 obj number */
  tab1col_num   number,                /* internal column number for table 1 */
  tab2obj_num   number,                                /* table 2 obj number */
  tab2col_num   number,                /* internal column number for table 2 */
  tab1col       ku$_simple_col_t,                          /* table 1 column */
  tab2col       ku$_simple_col_t,                          /* table 2 column */
  joinop        number,                /* Op code as defined in opndef.h (=) */
  flags         number,                                        /* misc flags */
  tab1inst_num  number,           /* instance of table 1 (for multiple refs) */
  tab2inst_num  number            /* instance of table 2 (for multiple refs) */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_JIJOIN_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JIJOIN_TABLE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JIJOIN_TABLE_LIST_T" force
as table of  (ku$_jijoin_table_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_JIJOIN_TABLE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JIJOIN_TABLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JIJOIN_TABLE_T" force as object
(
  obj_num       number,                                          /* object # */
  tabobj_num    number,                                  /* table obj number */
  owner_name    varchar2(128),                                /* table owner */
  name          varchar2(128)                                /* table name  */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_JIJOIN_TABLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JOBDESC1010
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JOBDESC1010" FORCE IS OBJECT
        (
                job_name        VARCHAR2(30),           -- The job name
                guid            RAW(16),                -- The job GUID
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                remote_link     VARCHAR2(4000),         -- DB link, if any
                owner           VARCHAR2(30),           -- Job owner
                instance        VARCHAR2(16),           -- The instance name
                db_version      VARCHAR2(30),           -- Version of objects
                creator_privs   VARCHAR2(30),           -- Privs of job
                start_time      DATE,                   -- This job start time
                max_degree      NUMBER,                 -- Max. parallelism
                log_file        VARCHAR2(4000),         -- Log file name
                sql_file        VARCHAR2(4000),         -- SQL file name
                params          ku$_ParamValues1010     -- Parameter list
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_JOBDESC1010" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JOBDESC1020
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JOBDESC1020" FORCE IS OBJECT
        (
                job_name        VARCHAR2(30),           -- The job name
                guid            RAW(16),                -- The job GUID
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                remote_link     VARCHAR2(4000),         -- DB link, if any
                owner           VARCHAR2(30),           -- Job owner
                platform        VARCHAR2(101),          -- Current job platform
                exp_platform    VARCHAR2(101),          -- Export platform
                global_name     VARCHAR2(4000),         -- Current global name
                exp_global_name VARCHAR2(4000),         -- Export global name
                instance        VARCHAR2(16),           -- The instance name
                db_version      VARCHAR2(30),           -- Version of objects
                exp_db_version  VARCHAR2(30),           -- Export version
                scn             NUMBER,                 -- Job SCN
                creator_privs   VARCHAR2(30),           -- Privs of job
                start_time      DATE,                   -- This job start time
                exp_start_time  DATE,                   -- Export start time
                term_reason     NUMBER,                 -- Job termination code
                max_degree      NUMBER,                 -- Max. parallelism
                log_file        VARCHAR2(4000),         -- Log file name
                sql_file        VARCHAR2(4000),         -- SQL file name
                params          ku$_ParamValues1010     -- Parameter list
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_JOBDESC1020" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JOBDESC1210
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JOBDESC1210" FORCE IS OBJECT
        (
                job_name        VARCHAR2(30),           -- The job name
                guid            RAW(16),                -- The job GUID
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                remote_link     VARCHAR2(4000),         -- DB link, if any
                owner           VARCHAR2(30),           -- Job owner
                platform        VARCHAR2(101),          -- Current job platform
                exp_platform    VARCHAR2(101),          -- Export platform
                global_name     VARCHAR2(4000),         -- Current global name
                exp_global_name VARCHAR2(4000),         -- Export global name
                instance        VARCHAR2(16),           -- The instance name
                db_version      VARCHAR2(30),           -- Cur. server software version
                exp_db_version  VARCHAR2(30),           -- Export svr. software version
                job_version     VARCHAR2(30),           -- Negotiated data version
                scn             NUMBER,                 -- Job SCN
                creator_privs   VARCHAR2(30),           -- Privs of job
                start_time      DATE,                   -- This job start time
                exp_start_time  DATE,                   -- Export start time
                term_reason     NUMBER,                 -- Job termination code
                max_degree      NUMBER,                 -- Max. parallelism
                timezone        VARCHAR2(64),           -- Cur. server timezone
                exp_timezone    VARCHAR2(64),           -- Exp. server timezone
                tstz_version    NUMBER,                 -- Cur. server timezone version
                exp_tstz_version NUMBER,                -- Exp. server timezone
                endianness      VARCHAR2(16),           -- Cur. platform's endianness
                exp_endianness  VARCHAR2(16),           -- Exp. platform's endianness
                                                        -- endianness is 'BIG' or 'LITTLE'
                charset         VARCHAR2(28),           -- Cur. server charset
                exp_charset     VARCHAR2(28),           -- Exp. server charset
                ncharset        VARCHAR2(28),           -- Cur. server national charset
                exp_ncharset    VARCHAR2(28),           -- Exp. server national charset
                log_file        VARCHAR2(4000),         -- Log file name
                sql_file        VARCHAR2(4000),         -- SQL file name
                params          ku$_ParamValues1010     -- Parameter list
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_JOBDESC1210" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JOBDESC1220
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JOBDESC1220" FORCE IS OBJECT
        (
                job_name        VARCHAR2(128),          -- The job name
                guid            RAW(16),                -- The job GUID
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                remote_link     VARCHAR2(4000),         -- DB link, if any
                owner           VARCHAR2(128),          -- Job owner
                platform        VARCHAR2(101),          -- Current job platform
                exp_platform    VARCHAR2(101),          -- Export platform
                global_name     VARCHAR2(4000),         -- Current global name
                exp_global_name VARCHAR2(4000),         -- Export global name
                instance        VARCHAR2(60),           -- The instance name
                db_version      VARCHAR2(60),           -- Cur. server software version
                exp_db_version  VARCHAR2(60),           -- Export svr. software version
                job_version     VARCHAR2(60),           -- Negotiated data version
                scn             NUMBER,                 -- Job SCN
                creator_privs   VARCHAR2(30),           -- Privs of job
                start_time      DATE,                   -- This job start time
                exp_start_time  DATE,                   -- Export start time
                term_reason     NUMBER,                 -- Job termination code
                max_degree      NUMBER,                 -- Max. parallelism
                timezone        VARCHAR2(64),           -- Cur. server timezone
                exp_timezone    VARCHAR2(64),           -- Exp. server timezone
                tstz_version    NUMBER,                 -- Cur. server timezone version
                exp_tstz_version NUMBER,                -- Exp. server timezone
                endianness      VARCHAR2(16),           -- Cur. platform's endianness
                exp_endianness  VARCHAR2(16),           -- Exp. platform's endianness
                                                        -- endianness is 'BIG' or 'LITTLE'
                charset         VARCHAR2(28),           -- Cur. server charset
                exp_charset     VARCHAR2(28),           -- Exp. server charset
                ncharset        VARCHAR2(28),           -- Cur. server national charset
                exp_ncharset    VARCHAR2(28),           -- Exp. server national charset
                log_file        VARCHAR2(4000),         -- Log file name
                sql_file        VARCHAR2(4000),         -- SQL file name
                params          ku$_ParamValues1010     -- Parameter list
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_JOBDESC1220" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JOBSTATUS1010
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JOBSTATUS1010" FORCE IS OBJECT
        (
                job_name        VARCHAR2(30),           -- Name of the job
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                bytes_processed NUMBER,                 -- Bytes so far
                total_bytes     NUMBER,                 -- Total bytes for job
                percent_done    NUMBER,                 -- Percent done
                degree          NUMBER,                 -- Of job parallelism
                error_count     NUMBER,                 -- #errors so far
                state           VARCHAR2(30),           -- Current job state
                phase           NUMBER,                 -- Job phase
                restart_count   NUMBER,                 -- #Job restarts
                worker_status_list ku$_WorkerStatusList1010, -- For (non-idle)
                                                        -- job worker processes
                files           ku$_DumpFileSet1010     -- Dump file info
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_JOBSTATUS1010" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JOBSTATUS1020
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JOBSTATUS1020" FORCE IS OBJECT
        (
                job_name        VARCHAR2(30),           -- Name of the job
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                bytes_processed NUMBER,                 -- Bytes so far
                total_bytes     NUMBER,                 -- Total bytes for job
                percent_done    NUMBER,                 -- Percent done
                degree          NUMBER,                 -- Of job parallelism
                error_count     NUMBER,                 -- #errors so far
                state           VARCHAR2(30),           -- Current job state
                phase           NUMBER,                 -- Job phase
                restart_count   NUMBER,                 -- #Job restarts
                worker_status_list ku$_WorkerStatusList1020, -- For (non-idle)
                                                        -- job worker processes
                files           ku$_DumpFileSet1010     -- Dump file info
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_JOBSTATUS1020" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JOBSTATUS1120
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JOBSTATUS1120" FORCE IS OBJECT
        (
                job_name        VARCHAR2(30),           -- Name of the job
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                bytes_processed NUMBER,                 -- Bytes so far
                total_bytes     NUMBER,                 -- Total bytes for job
                percent_done    NUMBER,                 -- Percent done
                degree          NUMBER,                 -- Of job parallelism
                error_count     NUMBER,                 -- #errors so far
                state           VARCHAR2(30),           -- Current job state
                phase           NUMBER,                 -- Job phase
                restart_count   NUMBER,                 -- #Job restarts
                worker_status_list ku$_WorkerStatusList1120, -- For (non-idle)
                                                        -- job worker processes
                files           ku$_DumpFileSet1010     -- Dump file info
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_JOBSTATUS1120" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JOBSTATUS1210
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JOBSTATUS1210" FORCE IS OBJECT
        (
                job_name        VARCHAR2(30),           -- Name of the job
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                bytes_processed NUMBER,                 -- Bytes so far
                total_bytes     NUMBER,                 -- Total bytes for job
                percent_done    NUMBER,                 -- Percent done
                degree          NUMBER,                 -- Of job parallelism
                error_count     NUMBER,                 -- #errors so far
                state           VARCHAR2(30),           -- Current job state
                phase           NUMBER,                 -- Job phase
                restart_count   NUMBER,                 -- #Job restarts
                worker_status_list ku$_WorkerStatusList1210, -- For (non-idle)
                                                        -- job worker processes
                files           ku$_DumpFileSet1010     -- Dump file info
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_JOBSTATUS1210" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JOBSTATUS1220
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JOBSTATUS1220" FORCE IS OBJECT
        (
                job_name        VARCHAR2(128),          -- Name of the job
                operation       VARCHAR2(30),           -- Current operation
                job_mode        VARCHAR2(30),           -- Current mode
                bytes_processed NUMBER,                 -- Bytes so far
                total_bytes     NUMBER,                 -- Total bytes for job
                percent_done    NUMBER,                 -- Percent done
                degree          NUMBER,                 -- Of job parallelism
                error_count     NUMBER,                 -- #errors so far
                state           VARCHAR2(30),           -- Current job state
                phase           NUMBER,                 -- Job phase
                restart_count   NUMBER,                 -- #Job restarts
                heartbeat       NUMBER,                 -- Job heartbeat
                worker_status_list ku$_WorkerStatusList1220, -- For (non-idle)
                                                        -- job worker processes
                files           ku$_DumpFileSet1010     -- Dump file info
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_JOBSTATUS1220" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_JOB_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_JOB_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  powner_id     number,                                          /* owner id */
  powner        varchar2(128),                                 /* owner name */
  lowner        varchar2(128),                             /* logged in user */
  cowner        varchar2(128),                                   /* parsing  */
  job_id        number,                                           /* job id  */
  last_date     varchar2(19),                /* when this job last succeeded */
  this_date     varchar2(19),   /* when current execute started,usually null */
  next_date     varchar2(19),                /* when to execute the job next */
  flag          number,                          /* 0x01, this job is broken */
  failures      number,             /* number of failures since last success */
  interval_num  varchar2(400),                /* function for next next_date */
  what          clob,                        /* PL/SQL text, what is the job */
  nlsenv        clob,                                      /* nls parameters */
  env           raw(32),                      /* other environment variables */
  field1        number,            /* instance number restricted to run  job */
  charenv       varchar2(4000)                /* Reserved for Trusted Oracle */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_JOB_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_LIBRARY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_LIBRARY_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                             /* library object number */
  schema_obj    ku$_schemaobj_t,                    /* library schema object */
  filespec      varchar2(2000),                                  /* filename */
  lib_audit     varchar2(2000),
  property      number,
  agent         varchar2(128),                  /* network agent for library */
  directory     varchar2(128),          /* directory object for library file */
  filename      varchar2(2000),                   /* filename of the library */
  credential    ku$_credential_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_LIBRARY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_LOBCOMPPART_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_LOBCOMPPART_LIST_T" force
as table of (ku$_lobcomppart_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_LOBCOMPPART_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_LOBCOMPPART_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_LOBCOMPPART_T" force as object
(
  obj_num       number,                             /* obj# of LOB partition */
  part_obj_num  number,                     /* table partition object number */
  part_num      number,                                  /* partition number */
  intcol_num    number,                            /* internal column number */
  schema_obj    ku$_schemaobj_t,            /* LOB schema object (for lobj#) */
  defts_name    varchar2(128),                    /* default tablespace name */
  defblocksize  number,                    /* default size of block in bytes */
  defchunk      number,                    /* oracle blocks in one lob chunk */
  defpctversion number,                              /* default version pool */
  defflags      number,                                             /* flags */
                                                           /* 0x0000 = CACHE */
                                                 /* 0x0001 = NOCACHE LOGGING */
                                               /* 0x0002 = NOCACHE NOLOGGING */
                                             /* 0x0008 = CACHE READS LOGGING */
                                           /* 0x0010 = CACHE READS NOLOGGING */
  defpro        number,                        /* default partition property */
                                             /* 0x02 = enable storage in row */
  definiexts    number,  /* default INITIAL extent size; NULL if unspecified */
  defextsize    number,     /* default NEXT extent size; NULL if unspecified */
  defminexts    number,           /* default MINEXTENTS; NULL if unspecified */
  defmaxexts    number,           /* default MAXEXTENTS; NULL if unspecified */
  defextpct     number,          /* default PCTINCREASE; NULL if unspecified */
  deflists      number,      /* default FREELISTS value; NULL if unspecified */
  defgroups     number,      /* default FREELIST GROUPS; NULL if unspecified */
  defbufpool    number,          /* default BUFFER_POOL; NULL if unspecified */
  spare1        number,
  spare2        number,
  spare3        number,
  defmaxsize    number,              /* default MAXSIZE; NULL if unspecified */
  defretention  number,            /* default RETENTION; NULL if unspecified */
  defmintime    number    /* default MIN retention time; NULL if unspecified */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_LOBCOMPPART_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_LOBFRAG_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_LOBFRAG_LIST_T" force as table of (ku$_lob_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_LOBFRAG_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_LOBINDEX_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_LOBINDEX_T" force as object
(
  obj_num       number,                                          /* object # */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  ts_name       varchar2(128),                                 /* tablespace */
  blocksize     number,                            /* size of block in bytes */
  storage       ku$_storage_t,                                    /* storage */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  dataobj_num   number,                          /* data layer object number */
  cols          number,                                 /* number of columns */
  pct_free      number,          /* minimum free space percentage in a block */
  initrans      number,                     /* initial number of transaction */
  maxtrans      number,                    /* maximum number of transactions */
  pct_thres     number,           /* iot overflow threshold, null if not iot */
  type_num      number,                       /* what kind of index is this? */
  flags         number,                                     /* mutable flags */
  property      number,             /* immutable flags for life of the index */
  blevel        number,                                       /* btree level */
  leafcnt       number,                                  /* # of leaf blocks */
  distkey       number,                                   /* # distinct keys */
  lblkkey       number,                          /* avg # of leaf blocks/key */
  dblkkey       number,                          /* avg # of data blocks/key */
  clufac        number,                                 /* clustering factor */
  analyzetime   varchar2(19),                /* timestamp when last analyzed */
  samplesize    number,                 /* number of rows sampled by Analyze */
  rowcnt        number,                       /* number of rows in the index */
  intcols       number,                        /* number of internal columns */
  degree        number,           /* # of parallel query slaves per instance */
  instances     number,             /* # of OPS instances for parallel query */
  trunccnt      number,                        /* re-used for iots 'inclcol' */
  numcolsdep    number,  /*spare1: number of columns depended on, >= intcols */
  numkeycols    number,       /*spare2 # of key columns in compressed prefix */
  spare3        number,
  spare4        varchar2(1000),     /* used for parameter str for domain idx */
  spare5        varchar2(1000),
  spare6        varchar2(19),
/* columns from ku$_lobfrag_index */
  base_obj_num  number,                                        /* base index */
  part_num      number,                                  /* partition number */
  inclcol       number                     /* iot include col#, null if !iot */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_LOBINDEX_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_LOB_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_LOB_T" force as object
(
  obj_num       number,                                /* obj# of base table */
  col_num       number,                                     /* column number */
  intcol_num    number,                            /* internal column number */
  schema_obj    ku$_schemaobj_t,                        /* LOB schema object */
  storage       ku$_storage_t,                          /* LOB storage       */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  ts_name       varchar2(128),                            /* tablespace name */
  blocksize     number,                            /* size of block in bytes */
  ind_num       number,                                 /* LOB index obj #   */
  lobindex      ku$_lobindex_t,                          /* LOB index object */
  chunk         number,                    /* oracle blocks in one lob chunk */
  pctversion    number,                                      /* version pool */
  flags         number,                                             /* flags */
                                                 /* 0x0001 = NOCACHE LOGGING */
                                               /* 0x0002 = NOCACHE NOLOGGING */
                                             /* 0x0008 = CACHE READS LOGGING */
                                           /* 0x0010 = CACHE READS NOLOGGING */
  property      number,                    /* 0x00 = user defined lob column */
                                    /* 0x01 = kernel column(s) stored as lob */
                                     /* 0x02 = user lob column with row data */
                                            /* 0x04 = partitioned LOB column */
                                   /* 0x0008 = LOB In Global Temporary Table */
                                          /* 0x0010 = Session-specific table */
  retention     number,                              /* LOB Retention period */
  freepools     number,                             /* LOB segment FREEPOOLS */
  spare1        number,
  spare2        number,
  spare3        varchar2(255),
  /* attributes from lobfarg (partitioned) */
  parent_obj_num number,                             /* parent object number */
  part_obj_num  number,                           /* partition object number */
  base_obj_num  number,                                /* obj# of base table */
  part_num      number                                   /* partition number */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_LOB_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_LOGENTRY1010
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_LOGENTRY1010" FORCE
AS TABLE OF (sys.ku$_LogLine1010)
PERSISTABLE -- Part of kupc$_LogEntries, kupc$_bad_file, etc

/

  GRANT EXECUTE ON "SYS"."KU$_LOGENTRY1010" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_LOGLINE1010
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_LOGLINE1010" FORCE IS OBJECT
        (
                logLineNumber   NUMBER,                 -- Line # in log file
                errorNumber     NUMBER,                 -- Error number
                LogText         VARCHAR2(2000)          -- Log entry text
        )
PERSISTABLE -- Part of ku$_LogEntry

/

  GRANT EXECUTE ON "SYS"."KU$_LOGLINE1010" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_MAP_TABLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_MAP_TABLE_T" force as object
(
  obj_num       number,                                              /* obj# */
  dataobj_num   number,                                /* data layer object# */
  bobj_num      number,                           /* base obj# (cluster/iot) */
  part_num      number,                                  /* partition number */
  storage       ku$_storage_t,                                    /* storage */
  ts_name       varchar2(128),                            /* tablespace name */
  blocksize     number,                            /* size of block in bytes */
  pct_free      number,                   /* min. free space %age in a block */
  pct_used      number,                   /* min. used space %age in a block */
  initrans      number,                     /* initial number of transaction */
  maxtrans      number,                     /* maximum number of transaction */
  flags         number                                              /* flags */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_MAP_TABLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_MAP_TABPART_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_MAP_TABPART_LIST_T" force
as table of (ku$_map_table_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_MAP_TABPART_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_MARKER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_MARKER_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  marker        number                                        /* marker type */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_MARKER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_METHOD_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_METHOD_LIST_T" 
 force as table of (ku$_method_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_METHOD_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_METHOD_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_METHOD_T" force as object
(
  toid           raw(16),                                            /* TOID */
  version_num    number,                     /* internal type version number */
  method_num     number,                        /* method number or position */
  name           varchar2(128),                               /* method name */
  properties     number,                             /* method's properties: */
  /* 0x00001 =      1 = PRIVATE method */
  /* 0x00002 =      2 = PUBLIC method (default) */
  /* 0x00004 =      4 = INLINE method */
  /* 0x00008 =      8 = VIRTUAL method => NOT FINAL */
  /* 0x00010 =     16 = CONSTANT method */
  /* 0x00020 =     32 = contructor method */
  /* 0x00040 =     64 = destructor method */
  /* 0x00080 =    128 = operator method */
  /* 0x00100 =    256 = selfish method */
  /* 0x00200 =    512 = MAP method */
  /* 0x00800 =   2048 = ORDER method */
  /* 0x01000 =   4096 = Read No Data State method (default) */
  /* 0x02000 =   8192 = Write No Data State method */
  /* 0x04000 =  16384 = Read No Process State method */
  /* 0x08000 =  32768 = Write No Process State method */
  /* 0x10000 =  65536 = Not Instantiable method */
  /* 0x20000 = 131072 = Overriding method */
  /* 0x40000 = 262144 = Returns SELF as result */
  parameters_num number,                             /* number of parameters */
  results        number,                                /* number of results */
  xflags         number,                          /* Flags not stored in TDO */
  /* 0x01 - Inherited method */
  spare1         number,                                         /* reserved */
  spare2         number,                                         /* reserved */
  spare3         number,                                         /* reserved */
  externVarName  varchar2(4000),  /*"M_VCSZ" external variable name for SQLJ */
  argument_list  ku$_argument_list_t,            /* argument list for method */
  procedureinfo  ku$_procinfo_t,                           /* procedure info */
  procjava       ku$_procjava_t,                       /*java procedure info */
  procplsql      ku$_procplsql_t,                     /*plsql procedure info */
  procc          ku$_procc_t,                             /*C procedure info */
  obj_num        number
)
not persistable

/
--------------------------------------------------------
--  DDL for Type KU$_MONITOR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_MONITOR_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                /* base object number */
  base_obj      ku$_schemaobj_t,                       /* base schema object */
  monitor       number                              /* 1: enable, 0: disable */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_MONITOR_T" TO "SELECT_CATALOG_ROLE";
--------------------------------------------------------
--  DDL for Type KU$_MULTI_DDL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_MULTI_DDL" FORCE AS OBJECT
        (       object_row      NUMBER,         -- object row of object
                ddls            sys.ku$_ddls    -- 1-N DDLs for the object
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_MULTI_DDL" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_MULTI_DDLS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_MULTI_DDLS" FORCE IS TABLE OF (sys.ku$_multi_ddl)
NOT PERSISTABLE;

/

  GRANT EXECUTE ON "SYS"."KU$_MULTI_DDLS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_MV_DEPTBL_OBJNUM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_MV_DEPTBL_OBJNUM_T" force as object
(
  obj_num       number                                             /* obj# */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_MV_DEPTBL_OBJNUM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_FH_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_FH_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  obj_num           number,                    /* object number of the mview */
  sowner            varchar2(128),                      /* Owner of snapshot */
  vname             varchar2(128),                       /* name of snapshot */
  mview             ku$_m_view_t,
  mview_tab         ku$_table_t,
  mview_idx_list    ku$_index_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_FH_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_H_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_H_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  obj_num           number,                    /* object number of the mview */
  sowner            varchar2(128),                      /* Owner of snapshot */
  vname             varchar2(128),                       /* name of snapshot */
  mview             ku$_m_view_t,
  mview_tab         ku$_table_t,
  mview_idx_list    ku$_index_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_H_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_IOT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_IOT_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  obj_num           number,                    /* object number of the mview */
  sowner            varchar2(128),                      /* Owner of snapshot */
  vname             varchar2(128),                       /* name of snapshot */
  mview             ku$_m_view_t,
  mview_tab         ku$_io_table_t,
  mview_idx_list    ku$_index_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_IOT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_LOG_FH_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_LOG_FH_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  tabobj_num        number,                       /* log table object number */
  mviewlog          ku$_m_view_log_t,
  mviewlog_tab      ku$_table_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_LOG_FH_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_LOG_H_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_LOG_H_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  tabobj_num        number,                       /* log table object number */
  mviewlog          ku$_m_view_log_t,
  mviewlog_tab      ku$_table_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_LOG_H_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_LOG_PFH_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_LOG_PFH_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  tabobj_num        number,                       /* log table object number */
  mviewlog          ku$_m_view_log_t,
  mviewlog_tab      ku$_table_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_LOG_PFH_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_LOG_PH_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_LOG_PH_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  tabobj_num        number,                       /* log table object number */
  mviewlog          ku$_m_view_log_t,
  mviewlog_tab      ku$_table_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_LOG_PH_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_LOG_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_LOG_T" force as object
(
  vers_major      char(1),                            /* UDT major version # */
  vers_minor      char(1),                            /* UDT minor version # */
  mowner          varchar2(128),                          /* owner of master */
  master          varchar2(128),                           /* name of master */
  oldest          varchar2(19),/*maximum age of rowid information in the log */
  oldest_pk       varchar2(21),  /* maximum age of PK information in the log */
  oscn            number,                                   /* scn of oldest */
  youngest        varchar2(21),             /* most recent snaptime assigned */
  yscn            number,                                      /* set-up scn */
  log             varchar2(128),                              /* name of log */
  trig            varchar2(128),                /* trigger on master for log */
  flag            number,    /* 0x01, rowid         0x02, primary key values */
                             /* 0x04, column values 0x08, log is imported    */
                             /* 0x10, log is created with temp table         */
  mtime           varchar2(21),                     /* DDL modification time */
  temp_log        varchar2(128),     /* temp table as updatable snapshot log */
  oldest_oid      varchar2(21), /* maximum age of OID information in the log */
  oldest_new      varchar2(21),      /* maximum age of new values in the log */
  oldest_seq      varchar2(21), /* maximum age of sequence values in the log */
  global_db_name  varchar2(4000),                    /* Global database Name */
  purge_start     varchar2(21),                          /* purge start date */
  purge_next      varchar2(200),               /* purge next date expression */
  fc_count        number,                        /* number of filter columns */
  fc_list         ku$_refcol_list_t,                   /* filter column list */
  lm_count        number,                         /* number of local masters */
  lm_list         ku$_slog_list_t                       /* local master list */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_LOG_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_PFH_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_PFH_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  obj_num           number,                    /* object number of the mview */
  sowner            varchar2(128),                      /* Owner of snapshot */
  vname             varchar2(128),                       /* name of snapshot */
  mview             ku$_m_view_t,
  mview_tab         ku$_table_t,
  mview_idx_list    ku$_index_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_PFH_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_PH_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_PH_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  obj_num           number,                    /* object number of the mview */
  sowner            varchar2(128),                      /* Owner of snapshot */
  vname             varchar2(128),                       /* name of snapshot */
  mview             ku$_m_view_t,
  mview_tab         ku$_table_t,
  mview_idx_list    ku$_index_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_PH_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_PIOT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_PIOT_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  obj_num           number,                    /* object number of the mview */
  sowner            varchar2(128),                      /* Owner of snapshot */
  vname             varchar2(128),                       /* name of snapshot */
  mview             ku$_m_view_t,
  mview_tab         ku$_io_table_t,
  mview_idx_list    ku$_index_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_PIOT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_SCM_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_SCM_LIST_T" 
 force as table of (ku$_m_view_scm_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_SCM_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_SCM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_SCM_T" force as object
(
  snacol            varchar2(128),                /* name of snapshot column */
  mascol            varchar2(128),                     /* master column name */
  maspos            number,            /* position of master column (intcol) */
  colrole           number,                       /* how is this column used */
  snapos            integer             /* position of col in snapshot table */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_SCM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_SRT_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_SRT_LIST_T" 
 force as table of (ku$_m_view_srt_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_SRT_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_SRT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_SRT_T" force as object
(
  tablenum          number,           /* order of Master table in snap query */
  snaptime          varchar2(21),          /* time of last refresh for table */
  mowner            varchar2(128),                    /* owner of this table */
  master            varchar2(128),                     /* name of this table */
  masflag           number,                 /* additional master information */
  masobj_num        number,                    /* obj number of master table */
  loadertime        varchar2(21),      /* last refresh w.r.t. SQL*Loader log */
  refscn            number, /* scn of latest info used to refresh this table */
  lastsuccess       varchar2(21),   /* time of last known successful refresh */
  fcmaskvec         raw(255),                  /* filter columns mask vector */
  ejmaskvec         raw(255),               /* equi-join columns mask vector */
  sub_handle        number,            /* subscription handle (if using CDC) */
  change_view       varchar2(128),        /* change view name (if using CDC) */
  scm_count         number,
  scm_list          ku$_m_view_scm_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_SRT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_M_VIEW_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_M_VIEW_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  oidval            raw(16),                                    /* unique id */
  sowner            varchar2(128),                      /* Owner of snapshot */
  vname             varchar2(128),                       /* name of snapshot */
  tname             varchar2(128),                             /* Table name */
  mowner            varchar2(128),                        /* owner of master */
  master            varchar2(128),                         /* name of master */
  mlink             varchar2(128),           /* database link to master site */
  dflcollname       varchar2(128),                 /* Default collation name */
  base_obj_num      number,                                /* obj# of master */
  snapshot          varchar2(21), /* used by V7 masters to identify snapshot */
  snapid            integer,  /* used by V8 masters to identify the snapshot */
  auto_fast         varchar2(8),      /* date function for automatic refresh */
  auto_fun          varchar2(200),                  /* next time for refresh */
  auto_date         varchar2(19),                  /* start time for refresh */
  uslog             varchar2(128),            /* log for updatable snapshots */
  status            integer,                           /* refresh operations */
  master_version    integer,            /* Oracle version of the master site */
  tables            integer,                 /* Number of tables in snapshot */
  flag              number,
  flag2             number,
  flag3             number,
  lobmaskvec        raw(255),                     /* lob columns mask vector */
  mas_roll_seg      varchar2(128),           /* master-side rollback segment */
  rscn              number,                              /* last refresh scn */
  instsite          integer,                           /* instantiating site */
  flavor_id         number,                                     /* flavor id */
  objflag           number,                 /* object properties of snapshot */
  sna_type_owner    varchar2(128),                   /* object MV type owner */
  sna_type_name     varchar2(128),                    /* object MV type name */
  mas_type_owner    varchar2(128),         /* master object table type owner */
  mas_type_name     varchar2(128),          /* master object table type name */
  parent_sowner     varchar2(128),                  /* parent snapshot owner */
  parent_vname      varchar2(128),                   /* parent snapshot name */
  query_len         number,                                  /* query length */
  query_txt         clob,              /* query which this view instantiates */
  parsed_query_txt  sys.xmltype,                         /* parsed query_txt */
  query_vcnt        ku$_vcnt,          /* store the query when length > 4000 */
  rel_query         clob,              /* relational transformation of query */
  loc_roll_seg      varchar2(128),            /* local side rollback segment */
  global_db_name    varchar2(4000),                  /* Global database Name */
  syn_count         number,                /* Number of synonyms in snapshot */
  srt_list          ku$_m_view_srt_list_t,
                             /* fields from sum$: */
  mflags            number,                                       /*  mflags */
  xpflags           number,                           /* extension to pflags */
  xpflags2          number,                           /* extension to pflags */
  zmapscale         number,                         /* zone map scale factor */
  evaledition_num   number,                     /* evaluation edition number */
  unusablebef_num   number,                /* unusable before edition number */
  unusablebeg_num   number         /* unusable beginning with edition number */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_M_VIEW_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_NTAB_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_NTAB_T" force as object
(
  obj_num       number,                              /* obj# of nested table */
  property      number,                                  /* table properties */
  property2     number,                                  /* table properties */
  property3     number,                                  /* table properties */
  storage       ku$_storage_t,                                    /* storage */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  ts_name       varchar2(128),                            /* tablespace name */
  blocksize     number,                            /* size of block in bytes */
  pct_free      number,                   /* min. free space %age in a block */
  initrans      number,                     /* initial number of transaction */
  maxtrans      number,                     /* maximum number of transaction */
  flags         number,                                             /* flags */
  con0_list     ku$_constraint0_list_t,               /* list of constraints */
  con1_list     ku$_constraint1_list_t,               /* list of constraints */
  con2_list     ku$_constraint2_list_t,               /* list of constraints */
  pkref_list    ku$_pkref_constraint_list_t, /* list of table ref constraints*/
  partobj       ku$_partobj_t,                     /* Base partitioning info */
  pct_used      number,                   /* min. used space %age in a block */
  pct_thresh    number,                            /* pctthreshold for IOTs. */
  numkeycols    number,      /* # of key columns in compressed prefix (IOTs) */
  inclcol_name  varchar(128),/*column where IOT splits into overflow segment */
  iov           ku$_ov_table_t                             /* overflow table */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_NTAB_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_NT_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_NT_LIST_T" force as table of (ku$_nt_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_NT_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_NT_PARENT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_NT_PARENT_T" force as object
(
  obj_num       number,                                /* obj# of base table */
  nts           ku$_nt_list_t                               /* nested tables */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_NT_PARENT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_NTPART_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_NTPART_LIST_T" force as table of (ku$_ntpart_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_NTPART_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_NTPART_PARENT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_NTPART_PARENT_T" force as object
(
  obj_num       number,                                /* obj# of base table */
  part_num      number,                     /* part# of base table partition */
  nts           ku$_ntpart_list_t                 /* nested table partitions */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_NTPART_PARENT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_NTPART_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_NTPART_T" force as object
(
  obj_num       number,                                /* obj# of base table */
  part_num      number,                               /* part# of base table */
  intcol_num    number,              /* internal column number in base table */
  ntab_num      number,              /* object number of nested table object */
  schema_obj    ku$_schemaobj_t,           /* schema object for nested table */
  col           ku$_simple_col_t,                                  /* column */
  property      number,                           /* nested table properties */
  property2     number,                           /* nested table properties */
  property3     number,                           /* nested table properties */
  flags         number,                                /* nested table flags */
  hnt           ku$_hntp_t                      /* heap table partition data */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_NTPART_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_NT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_NT_T" force as object
(
  obj_num       number,                                /* obj# of base table */
  intcol_num    number,              /* internal column number in base table */
  ntab_num      number,              /* object number of nested table object */
  schema_obj    ku$_schemaobj_t,           /* schema object for nested table */
  col           ku$_simple_col_t,                                  /* column */
  property      number,                                  /* table properties */
  property2     number,                                  /* table properties */
  property3     number,                                  /* table properties */
  flags         number,                                             /* flags */
  trigflag      number,                                     /* trigger flags */
  clst          ku$_clst_t,                 /* table clustering info, if any */
  hnt           ku$_ntab_t,                               /* heap table data */
  iont          ku$_ntab_t,                                      /* iot data */
  encalg        number,  /* encryption algorithm id if a column is encrypted */
  intalg        number,   /* integrity algorithm id if a column is encrypted */
  col_list      ku$_tab_column_list_t                     /* list of columns */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_NT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OBJGRANT_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OBJGRANT_LIST_T" 
 force as table of (ku$_objgrant_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OBJGRANT_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OBJGRANT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OBJGRANT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                 /* obj# of base obj. */
  base_obj      ku$_schemaobj_t,                           /* base obj. info */
  long_name     varchar2(4000),
  grantor       varchar2(128),
  grantee       varchar2(128),
  privname      varchar2(128),
  sequence      number,                        /* Unique seq# for this grant */
  wgo           number,                             /* with grant option = 1 */
                                                /* with hierarchy option = 2 */
  colname       varchar2(128),          /* column name if col grant else null */
  user_spare1   number)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OBJGRANT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OBJNUM
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OBJNUM" FORCE IS object(obj_num NUMBER)
NOT PERSISTABLE;

/

  GRANT EXECUTE ON "SYS"."KU$_OBJNUM" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OBJNUMNAM
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OBJNUMNAM" force as
 object (obj_num NUMBER,name VARCHAR2(128)) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_OBJNUMNAM" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OBJNUMNAMSET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OBJNUMNAMSET" FORCE IS TABLE OF  (ku$_ObjNumNam)
NOT PERSISTABLE;

/

  GRANT EXECUTE ON "SYS"."KU$_OBJNUMNAMSET" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OBJNUMPAIR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OBJNUMPAIR" FORCE AS OBJECT (
  num1          NUMBER,
  num2          NUMBER
)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_OBJNUMPAIR" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OBJNUMPAIRLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OBJNUMPAIRLIST" FORCE IS TABLE OF (ku$_ObjNumPair)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_OBJNUMPAIRLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OBJNUMSET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OBJNUMSET" FORCE IS TABLE OF (ku$_ObjNum)
NOT PERSISTABLE;

/

  GRANT EXECUTE ON "SYS"."KU$_OBJNUMSET" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OBJPKG_PRIVS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OBJPKG_PRIVS_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  tag           varchar2(128),                             /* procedural tag */
  cmnt          varchar2(2000),                        /* procedural comment */
  package       varchar2(128),                 /* procedural package objects */
  schema        varchar2(128),                             /* package schema */
  plsql         ku$_procobj_lines      /* PL/SQL code for proc sys privilege */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OBJPKG_PRIVS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OBJPKG_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OBJPKG_T" force as object
(
  tag           varchar2(128),                             /* procedural tag */
  cmnt          varchar2(2000),                        /* procedural comment */
  package       varchar2(128),                    /* procedural package name */
  schema        varchar2(128)                              /* package schema */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OBJPKG_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OIDINDEX_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OIDINDEX_T" force as object
(
  obj_num       number,                              /* obj# of owning table */
  intcol_num    number,                            /* internal column number */
  name          varchar2(128),                                 /* index name */
  flags         number,                     /* psuedo constraint defer flags */
  storage       ku$_storage_t,                                    /* storage */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  ts_name       varchar2(128),                            /* tablespace name */
  blocksize     number,                            /* size of block in bytes */
  pct_free      number,                   /* min. free space %age in a block */
  initrans      number,                     /* initial number of transaction */
  maxtrans      number                      /* maximum number of transaction */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OIDINDEX_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ON_USER_GRANT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ON_USER_GRANT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  user_name     varchar2(128),
  grantor       varchar2(128),
  grantee       varchar2(128),
  sequence      number)                        /* Unique seq# for this grant */
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ON_USER_GRANT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OPANCILLARY_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OPANCILLARY_LIST_T" force
as TABLE of (ku$_opancillary_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OPANCILLARY_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OPANCILLARY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OPANCILLARY_T" force as object
(
  obj_num       number,                  /* object number of ANCILLARY oper. */
  bind_num      number,                  /* bind number for the ancillary op */
  primop_num    number,          /* object number of PRIMARY for this ancil. */
  primop_obj    ku$_schemaobj_t,                /* schema object for PRIMARY */
  args          ku$_oparg_list_t               /* arguments for this primary */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OPANCILLARY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OPARG_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OPARG_LIST_T" force as TABLE of (ku$_oparg_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OPARG_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OPARG_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OPARG_T" force as object
(
  obj_num       number,                            /* operator object number */
  bind_num      number,                      /* binding this arg. belongs to */
  position      number,                   /* position of the arg in the bind */
  type          varchar2(61)                          /* datatype of the arg */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OPARG_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OPBINDING_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OPBINDING_LIST_T" force as TABLE of (ku$_opbinding_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OPBINDING_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OPBINDING_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OPBINDING_T" force as object
(
  obj_num       number,                            /* operator object number */
  bind_num      number,                            /* number of this binding */
  functionname  varchar2(386),               /* func that impl. this binding */
  returnschema  varchar2(128),             /* schema of return type (if ADT) */
  returntype    varchar2(128),                    /* return type of function */
  impschema     varchar2(128),            /* indextype implementation schema */
  imptype       varchar2(128),              /* indextype implementation type */
  property      number,                                    /* property flags */
  spare1        varchar2(128),
  spare2        varchar2(128),
  spare3        number,
  args          ku$_oparg_list_t,              /* arguments for this binding */
  ancillaries   ku$_opancillary_list_t  /* list of primary ops for this ancil*/
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OPBINDING_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OPERATOR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OPERATOR_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                            /* operator object number */
  schema_obj    ku$_schemaobj_t,                    /* base schema obj. info */
  property      number,                                    /* property flags */
  bindings      ku$_opbinding_list_t       /* List of bindings for this oper */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OPERATOR_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OPQTYPE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OPQTYPE_T" force as object
(
  obj_num       number,                               /* obj# of base object */
  intcol_num    number,                            /* internal column number */
  type          number,                            /* The opaque type - type */
                                                           /* 0x01 - XMLType */
  flags         number,                         /* flags for the opaque type */
                              /* -------------- XMLType flags ---------
                               * 0x0001 (1) -- XMLType stored as object
                               * 0x0002 (2) -- XMLType schema is specified
                               * 0x0004 (4) -- XMLType stored as lob
                               * 0x0008 (8) -- XMLType stores extra column
                               *
                               * 0x0020 (32)-- XMLType table is out-of-line
                               * 0x0040 (64)-- XMLType stored as binary
                               * 0x0080 (128)- XMLType binary ANYSCHEMA
                               * 0x0100 (256)- XMLType binary NO non-schema
                               */
  /* Flags for XMLType (type == 0x01). Override them when necessary  */
  lobcol        number,                                        /* lob column */
  objcol        number,                                    /* obj rel column */
  extracol      number,                                    /* extra info col */
  schemaoid     raw(16),                                   /* schema oid col */
  elemnum       number,                                    /* element number */
  schema_elmt   ku$_xmlschema_elmt_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OPQTYPE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OPTION_OBJNUM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OPTION_OBJNUM_T" force as object
(
  obj_num       number,                                              /* obj# */
  table_type    varchar2(1),         /* 'T' = base table, 'N' = nested table */
                                  /* 'X' = nested table belonging to XMLtype */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  tgt_type      number,                                             /* type# */
  impc_flags    number,           /* export processing flags: See dtools.bsq */
  tag           varchar2(128),                  /* optional group identifier */
  beginning_tgt_version varchar2(14),    /* 1st RDBMS version for which this */
        /* registration applies; i.e, applies to this and all later versions */
  ending_tgt_version    varchar2(14),    /* 1st RDBMS version for which this */
      /* registration does *not* apply; i.e, applies to all earlier versions */
  alt_name      varchar2(128),     /* alt name for tgt_object at import time */
  alt_schema    varchar2(128)    /* alt schema for tgt_object at import time */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OPTION_OBJNUM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OUTLINE_HINT_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OUTLINE_HINT_LIST_T" 
 force as table of (ku$_outline_hint_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OUTLINE_HINT_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OUTLINE_HINT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OUTLINE_HINT_T" force as object
( name              varchar2(128),                          /* outline name */
  hint              number,               /* which hint for a given outline */
  category          varchar2(128),              /* collection/grouping name */
  hint_type         number,                                 /* type of hint */
  hint_text         varchar2(512),             /* hint specific information */
  stage             number,            /* stage of hint generation/applic'n */
  node              number,                                  /* QBC node id */
  table_name        varchar2(128),                      /* for ORDERED hint */
  table_tin         number,                        /* table instance number */
  table_pos         number,                             /* for ORDERED hint */
  ref_id            number,        /* node id that this hint is referencing */
  user_table_name   varchar2(128), /* table name to which this hint applies */
  cost              double precision,    /* optimizer estimated cost of the
                                                           hinted operation */
  cardinality       double precision,    /* optimizer estimated cardinality
                                                    of the hinted operation */
  bytes             double precision,     /* optimizer estimated byte count
                                                    of the hinted operation */
  hint_textoff      number,             /* offset into the SQL statement to
                                                    which this hint applies */
  hint_textlen      number,     /* length of SQL to which this hint applies */
  join_pred         varchar2(2000)      /* join predicate (applies only for
                                                         join method hints) */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OUTLINE_HINT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OUTLINE_NODE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OUTLINE_NODE_LIST_T" 
 force as table of (ku$_outline_node_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OUTLINE_NODE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OUTLINE_NODE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OUTLINE_NODE_T" force as object
(
  name          varchar2(128),                             /* outline name  */
  category      varchar2(128),                          /* outline category */
  node          number,                              /* qbc node identifier */
  parent        number,      /* node id of the parent node for current node */
  node_type     number,                                    /* qbc node type */
  node_textlen  number,         /* length of SQL to which this node applies */
  node_textoff  number       /* offset into the SQL statement to which this
                                                               node applies */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OUTLINE_NODE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OUTLINE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OUTLINE_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  name              varchar2(128),        /* named is potentially generated */
  sql_text          clob,          /* the SQL stmt being outlined */
  textlen           number,                           /* length of SQL stmt */
  signature         raw(16),                       /* signature of sql_text */
  hash_value        number,                  /* KGL's calculated hash value */
  category          varchar2(128),                         /* category name */
  version           varchar2(64),          /* db version @ outline creation */
  creator           varchar2(128),        /* user from whom outline created */
  timestamp         varchar2(19),                       /* time of creation */
  flags             number,              /* e.g. everUsed, bindVars, dynSql */
  hintcount         number,               /* number of hints on the outline */
  hints             ku$_outline_hint_list_t,/* list of hints for this outln */
  nodes             ku$_outline_node_list_t           /* list of qbc blocks */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OUTLINE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OV_TABLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OV_TABLE_T" force as object
(
  obj_num       number,                                              /* obj# */
  dataobj_num   number,                                /* data layer object# */
  bobj_num      number,                           /* base obj# (cluster/iot) */
  storage       ku$_storage_t,                                    /* storage */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  ts_name       varchar2(128),                            /* tablespace name */
  blocksize     number,                            /* size of block in bytes */
  pct_free      number,                   /* min. free space %age in a block */
  pct_used      number,                   /* min. used space %age in a block */
  initrans      number,                     /* initial number of transaction */
  maxtrans      number,                     /* maximum number of transaction */
  flags         number                                              /* flags */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OV_TABLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OV_TABPART_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OV_TABPART_LIST_T" force
as table of (ku$_ov_tabpart_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_OV_TABPART_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_OV_TABPART_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_OV_TABPART_T" force as object
(
  obj_num       number,                                              /* obj# */
  dataobj_num   number,                                /* data layer object# */
  bobj_num      number,                           /* base obj# (cluster/iot) */
  part_num      number,                                  /* partition number */
  storage       ku$_storage_t,                                    /* storage */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  ts_name       varchar2(128),                            /* tablespace name */
  blocksize     number,                            /* size of block in bytes */
  pct_free      number,                   /* min. free space %age in a block */
  pct_used      number,                   /* min. used space %age in a block */
  initrans      number,                     /* initial number of transaction */
  maxtrans      number,                     /* maximum number of transaction */
  flags         number                                              /* flags */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_OV_TABPART_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PARAMVALUES1010
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PARAMVALUES1010" FORCE
AS TABLE OF (sys.ku$_ParamValue1010)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_PARAMVALUES1010" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PARAMVALUE1010
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PARAMVALUE1010" FORCE IS OBJECT
        (
                param_name      VARCHAR2(30),           -- Parameter name
                param_op        VARCHAR2(30),           -- Param operation
                param_type      VARCHAR2(30),           -- Its type
                param_length    NUMBER,                 -- Its length in bytes
                param_value_n   NUMBER,                 -- Numeric value
                param_value_t   VARCHAR2(4000)          -- And its text value
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_PARAMVALUE1010" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PARSED_ITEM
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PARSED_ITEM" FORCE AS OBJECT
        (       item            VARCHAR2(30),   -- item to be parsed
                value           VARCHAR2(4000), -- item's value
                object_row      NUMBER          -- object row of item
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_PARSED_ITEM" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PARSED_ITEMS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PARSED_ITEMS" FORCE
IS TABLE OF (sys.ku$_parsed_item) NOT PERSISTABLE;

/

  GRANT EXECUTE ON "SYS"."KU$_PARSED_ITEMS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PART_COL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PART_COL_LIST_T" force as table of (ku$_part_col_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PART_COL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PART_COL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PART_COL_T" force as object
(
  obj_num       number,                      /* object number of base object */
  intcol_num    number,                            /* internal column number */
  col           ku$_simple_col_t,       /* the column object */
  pos_num       number,                 /* position of col. in key */
  spare1        number                  /* spare column */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PART_COL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PARTITION_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PARTITION_T" force
 as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                              /* obj# */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  base_obj      ku$_schemaobj_t,         /* base object (if secondary table) */
  anc_obj       ku$_schemaobj_t,     /* ancestor object (if secondary table) */
  bobj_num      number,                           /* base obj# (cluster/iot) */
  tab_num       number,                  /* # in cluster, null if !clustered */
  cols          number,                                      /* # of columns */
  clucols       number,                 /* # of clustered cols, if clustered */
  tabcluster    ku$_tabcluster_t,        /* cluster info, null if !clustered */
  fba           ku$_fba_t, /* flashback archive info, null if not fb enabled */
  fba_periods   ku$_fba_period_list_t,                    /* valid-time info */
  clst          ku$_clst_t,                 /* table clustering info, if any */
  ilm_policies  ku$_ilm_policy_list_t,               /* ilm policies, if any */
  flags         number,                                      /* flags <31:0> */
  flags2        number,                                     /* flags <63:32> */
  audit_val     varchar2(128),                           /* auditing options */
  rowcnt        number,                                    /* number of rows */
  blkcnt        number,                                  /* number of blocks */
  empcnt        number,                            /* number of empty blocks */
  avgspc        number,                      /* average available free space */
  chncnt        number,                            /* number of chained rows */
  avgrln        number,                                /* average row length */
  avgspc_flb    number,       /* avg avail free space of blocks on free list */
  flbcnt        number,                             /* free list block count */
  analyzetime   varchar2(19),                /* timestamp when last analyzed */
  samplesize    number,                 /* number of rows sampled by Analyze */
  degree        number,                       /* # of PQ slaves per instance */
  instances     number,                         /* # of OPS instances for PQ */
  intcols       number,                             /* # of internal columns */
  kernelcols    number,                   /* number of REAL (kernel) columns */
  tstz_cols     char(1),                        /* 'Y' = table has TSTZ data */
  trigflag      number,                              /* inline trigger flags */
  spare1        number,                       /* used to store hakan_kqldtvc */
  spare2        number,         /* committed partition # used by drop column */
  spare3        number,                           /* summary sequence number */
  spare4        varchar2(1000),         /* committed RID used by drop column */
  spare5        varchar2(1000),
  spare6        varchar2(19),                               /* dml timestamp */
  spare7        number,
  spare8        number,
  spare9        varchar2(1000),
  spare10       varchar2(1000),
  encalg        number,  /* encryption algorithm id if a column is encrypted */
  intalg        number,   /* integrity algorithm id if a column is encrypted */
  im_colsel     ku$_im_colsel_list_t,           /* inmemory selective column */
  con0_list     ku$_constraint0_list_t,               /* list of constraints */
  con2_list     ku$_constraint2_list_t,               /* list of constraints */
  exttab        ku$_exttab_t,                     /* external table metadata */
  cubetab       ku$_cube_tab_t,                /* organization cube metadata */
  svcname       varchar(1000),            /* service name for IMC DISTRIBUTE */
  svcflags      number,                  /* service flags for IMC DISTRIBUTE */
  /* table storage (differs for p2t)
     NOTE - properties must also change for p2t */
  property      number,                                  /* table properties */
  property2     number,                             /* more table properties */
            /* the table property bits are defined in qcdl.h and kqld.h      */
            /* with names beginning "KQLDTVCP_" and "KQLDTVCP2_"             */
            /* e.g., KQLDTVCP_TTV,  KQLDTVCP2_ILM_MODTR                      */
  /* The low 32 bits of tab$.property are in "property"; "property2" has     */
  /* the high-order bits. Here are the bit definitions of tab$.property:     */
                   /* 0x01 = typed table */
                   /* 0x02 = has ADT columns, */
                   /* 0x04 = has nested-TABLE columns */
                   /* 0x08 = has REF columns, */
                   /* 0x10     (16) = has array columns */
                   /* 0x20     (32) = partitioned table, */
                   /* 0x40     (64) = index-only table (IOT) */
                   /* 0x80    (128) = IOT w/ row OVerflow, */
                   /* 0x100   (256) = IOT w/ row CLustering */
                   /* 0x200   (512) = IOT OVeRflow segment, */
                   /* 0x400  (1024) = clustered table */
                   /* 0x800  (2048) = has internal LOB columns, */
                   /* 0x1000 (4096) = has primary key-based OID$ column */
                   /* 0x2000 (8192) = nested table */
                   /* 0x4000 (16384) = View is Read Only */
                   /* 0x8000 (32768) = has FILE columns */
                   /* 0x10000 (65536) = obj view OID is sys-generated */
                   /* 0x20000 (131072) = used as AQ table */
                   /* 0x40000 (262144)= has user-defined lob columns */
                   /* 0x80000 (524288)= table contains unused columns */
                   /* 0x100000 (1048576)= has an on-commit materialized view */
                   /* 0x200000 (2097152)= has system-generated column names */
                   /* 0x400000 (4194304)= global temporary table */
                   /* 0x800000 (8388608)= session-specific temporary table */
                   /* 0x8000000 (134217728)= table is a sub table */
                   /* 0x20000000 (536870912) = pdml itl invariant */
                   /* 0x80000000 (2147483648)= table is external  */
  /* property2: High-order bits of tab$.property                             */
  /*  0x000000100000000 (1) - table is a CUBE table                          */
  /*  0x000000400000000 (4) = delayed segment creation                       */
  /*  0x000020000000000 (512) = result cache mode FORCE enabled on this tbl  */
  /*  0x000040000000000 (1024) = result cache mode MANUAL enabled on this tbl*/
  /*  0x000080000000000 (2048) = result cache mode AUTO enabled on this tbl */
  /*  0x020000000000000 (2097152) -                         long varchar col */
  /*  0x00040000000000000   (4194304)-    this table has a clustering clause */
  /*                                        (applies only to the fact table).*/
  /*  0x00080000000000000   (8388608)-   this table has one or more zonemaps */
  /*                                                           defined on it.*/
  /*  0x00400000000000000  (67108864)= has identity column                   */
  /*  0x01000000000000000 (268435456)-     this table appears as a dimension */
  /*                                       in one or more clustering clauses.*/
            /* the table property bits are defined in qcdl.h and kqld.h      */
            /* with names beginning "KQLDTVCP_" and "KQLDTVCP2_"             */
            /* e.g., KQLDTVCP_TTV,  KQLDTVCP2_ILM_MODTR                      */
  property3 number,
           /* the table property bits are defined in qcdl.h and kqld.h       */
           /* With names beginning KQLDTVCP3_                                */
           /* Here are the bit definitions of tab$.property2:                */
                /* 0x00000001 (1) = Binary XML table uses granular token set */
                /* 0x00000002 (2) = Table is a Binary XML Token Set entity   */
  storage       ku$_storage_t,                                    /* storage */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  ts_name       varchar2(128),                            /* tablespace name */
  blocksize     number,                            /* size of block in bytes */
  dataobj_num   number,                                /* data layer object# */
  pct_free      number,                   /* min. free space %age in a block */
  pct_used      number,                   /* min. used space %age in a block */
  initrans      number,                     /* initial number of transaction */
  maxtrans      number,                     /* maximum number of transaction */
  con1_list     ku$_constraint1_list_t,               /* list of constraints */
  /* col_list */
  col_list      ku$_tab_column_list_t,                   /* list of columns */
  /* used for 'full' tables (ADTs and such)  */
  nt            ku$_nt_parent_t,                            /* nested tables */
  pkref_list    ku$_pkref_constraint_list_t, /* list of table ref constraints*/
  /*   xml metadata */
  xmlschemacols char(1),          /* 'Y' = table has xmlschema-based columns */
  xmlcolset     ku$_XmlColSet_t,        /* OR intcolnums for xmltype stoarge */
  xmlhierarchy  char(1),             /* 'Y' = table is xml hierarchy enabled */
  /* reference partition child only */
  parent_obj    ku$_schemaobj_t,          /* parent object (if refpar child) */
  refpar_level  number,                         /* reference partition level */
  /* used for partitioned tables */
  objgrant_list ku$_objgrant_list_t,/* grants required, refpar parent access */
  /* used for IOTs  */
  pct_thresh    number,                            /* pctthreshold for IOTs. */
  numkeycols    number,      /* # of key columns in compressed prefix (IOTs) */
  inclcol_name  varchar(128),/*column where IOT splits into overflow segment */
  iov           ku$_ov_table_t,                            /* overflow table */
  maptab        ku$_map_table_t,                            /* mapping table */
  tabpart       ku$_tab_part_t,                    /* table partition */
  subpart       ku$_tab_subpart_t                  /* table subpartition */)
  not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PARTITION_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PARTLOB_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PARTLOB_T" force as object
(
  obj_num       number,                                /* obj# of base table */
  intcol_num    number,                            /* internal column number */
  schema_obj    ku$_schemaobj_t,            /* LOB schema object (for lobj#) */
  defts_name    varchar2(128),                    /* default tablespace name */
  defblocksize  number,                    /* default size of block in bytes */
  defchunk      number,                    /* oracle blocks in one lob chunk */
  defpctversion number,                              /* default version pool */
  defflags      number,                                             /* flags */
                                                 /* 0x0001 = NOCACHE LOGGING */
                                               /* 0x0002 = NOCACHE NOLOGGING */
                                             /* 0x0008 = CACHE READS LOGGING */
                                           /* 0x0010 = CACHE READS NOLOGGING */
  defpro        number,                        /* default partition property */
                                             /* 0x02 = enable storage in row */
  definiexts    number,  /* default INITIAL extent size; NULL if unspecified */
  defextsize    number,     /* default NEXT extent size; NULL if unspecified */
  defminexts    number,           /* default MINEXTENTS; NULL if unspecified */
  defmaxexts    number,           /* default MAXEXTENTS; NULL if unspecified */
  defextpct     number,          /* default PCTINCREASE; NULL if unspecified */
  deflists      number,      /* default FREELISTS value; NULL if unspecified */
  defgroups     number,      /* default FREELIST GROUPS; NULL if unspecified */
  defbufpool    number,          /* default BUFFER_POOL; NULL if unspecified */
  spare1        number,
  spare2        number,
  spare3        number,
  defmaxsize    number,              /* default MAXSIZE; NULL if unspecified */
  defretention  number,            /* default RETENTION; NULL if unspecified */
  defmintime    number    /* default MIN retention time; NULL if unspecified */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PARTLOB_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PARTOBJ_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PARTOBJ_T" force as object
(
  obj_num       number,                 /* obj# of partitioned tab. or index */
  parttype      number,                                 /* partitioning type */
             /* 1 = range, 2 = hash, 3 = system 4 = List, 5 = Ref;           */
             /* If range/list/hash, subparttype may be non-zero to indicate  */
             /* type of composite partitioning method.                       */
             /* see subparttype(spare1) for form of subpartitioning used.    */
  partcnt       number,                              /* number of partitions */
  partkeycols   number,                  /* # of columns in partitioning key */
  flags         number,                                             /* flags */
                                    /* 0x01 = local      index      */
                                    /* 0x02 = prefixed   index      */
                                    /* 0x04 = no-align   index      */
                                    /* 0x08 = domain     index      */
                                    /* 0x10 = compressed index      */
                                    /* 0x20 = table has ref ptn'ed children */
                                    /* 0x40 = table is interval partitioned */
                                    /* 0x80 = System managed domain index   */
                                   /* 0x100 = IOT Top index         */
                                   /* 0x200 = LOB column index      */
                                   /* 0x400 = Tracked Table IOT Top index  */
                                   /* 0x800 = Segment creation deferred */
                                  /* 0x1000 = Segment creation immediate */
                /* from kkpac.h:                                             */
                /* LOCAL_INDEX          0x0001 = local partitioned index     */
                /* PREFIXED_INDEX       0x0002 = prefixed index              */
                /* NOALIGN_INDEX        0x0004 = local system part. index    */
                /*                               (alignment means nothing    */
                /*                                because there are          */
                /*                                no part. columns)          */
                /* DOMAIN_INDEX         0x0008 = local domain index          */
                /* COMPRESSED_INDEX     0x0010 = index partitions            */
                /*                               compressed by default       */
  defts_name    varchar2(128),                    /* default tablespace name */
  defblocksize  number,          /* blocksize in bytes of default TABLESPACE */
  defpctfree    number,                                   /* default PCTFREE */
  defpctused    number,                 /* default PCTUSED (N/A for indexes) */
  defpctthres   number,             /* default PCTTHRESHOLD (N/A for tables) */
  definitrans   number,                                  /* default INITRANS */
  defmaxtrans   number,                                  /* default MAXTRANS */
  definiexts    number,                       /* default INITIAL extent size */
  defextsize    number,                          /* default NEXT extent size */
  defminexts    number,                                /* default MINEXTENTS */
  defmaxexts    number,                                /* default MAXEXTENTS */
  defextpct     number,                               /* default PCTINCREASE */
  deflists      number,                           /* default FREELISTS value */
  defgroups     number,         /* default FREELIST GROUPS (N/A for indexes) */
  deflogging    number,           /* default logging attribute of the object */
  defbufpool    number,                         /* default BUFFER_POOL value */
  spare2        number,                    /* subpartitioning info bytes 0-3 */
  /* from dpart.bsq:                              */
  /* 5 bytes of spare2 are currently spoken for */
  /* byte 0   : subparttype - non-zero implies Composite partitioning */
  /*            (1 - Range, 2 - Hash, 3 - System, 4 - List); */
  /* byte 1   : subpartkeycols; */
  /* bytes 2-3: defsubpartcnt */
  /* byte 4   : compression attribute of the partition */
  /*            following bit patterns are possible: */
  /*            00000000 : Compression not specified */
  /*            00000001 : Compression enabled for direct load operations */
  /*            00000010 : Compression disabled      */
  /*            00000101 : Compression enabled for all operations */
  /*            00001001 : Archive Compression: level 1 */
  /*            00010001 : Archive Compression: level 2 */
  /*            00011001 : Archive Compression: level 3 */
  /*            00100001 : Archive Compression: level 4 */
  /*            00101001 : Archive Compression: level 5 */
  /*            00110001 : Archive Compression: level 6 */
  /*            00111001 : Archive Compression: level 7 */
  /*            All other bit patterns are incorrect. */
  imc_flags     number,
  /* Bytes 5 and above from spare2 are now stored in imc_flags.             */
  /*  modular arithmetic used for decoding flags fail with large numbers,   */
  /*  due to using floating point.                                          */
  spare3        number,                                     /* spare column  */
  /* byte 1 of spare3 stores dtydef of interval (either DTYNUM, DTYIYM, or
   *  DTYIDS)
   */
  definclcol    number,                          /* default iot include col# */
  defparameters varchar2(1000),                       /* from indpart_param$ */
  /* interval_str and interval_bival new in 11g                              */
  interval_str varchar2(1000),                   /* string of interval value */
  interval_bival raw(200),              /* binary representation of interval */
  insert_ts_list ku$_insert_ts_list_t,      /* store-in list for interval pt */
  defmaxsize    number,                                   /* default MAXSIZE */
  /* New for 12.2, interval support at subpartition level */
  subinterval_str varchar2(1000),        /* string of subpart interval value */
  subinterval_bival raw(200),   /* binary representation of subpart interval */
  svcname       varchar(1000),            /* service name for IMC DISTRIBUTE */
  svcflags      number                   /* service flags for IMC DISTRIBUTE */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PARTOBJ_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_ADD_DEVICE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_ADD_DEVICE" FORCE UNDER kupc$_shadow_msg (
        devicename                VARCHAR2(4000),
        volumesize                NUMBER,
        CONSTRUCTOR FUNCTION kupc$_add_device(
                                dn  VARCHAR2,
                                vs  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_add_device(
                                qh  NUMBER,
                                dn  VARCHAR2,
                                vs  NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_ADD_DEVICE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
2dd 148
03SR98pqf/kmLeLFZkAzJ56v+F4wg1XIACAVfC9A2k7VSHCmPuZr4MX8j9DWohQXpTGnJZXl
5x3gOD6dT9tIPTtWWYFwOv/Q3HLt4gXvWozaU89M0OvOMf4tJFX/xrbnQaYWhIrY6v9UtDAJ
4t822p3q6xagSquEO7jfqaosLqY1VFy9+KN6Gh0dyCBsgwd9dlZ7IL0EE9cOeomK/ZxDbEj2
8u+jGUVS68T+FGRvnZsI+CCQ3Wjvsxun7XZhnIIulcJUjQGtcsN88CD3HtCiRP9VfmW899Ij
mzTSyz2uHJW1oUXTGhPbpOXBFyQZlr8lflhu

/

  GRANT EXECUTE ON "SYS"."KUPC$_ADD_DEVICE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_ADD_FILE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_ADD_FILE" FORCE UNDER kupc$_shadow_msg (
        filename                VARCHAR2(4000),
        directory               VARCHAR2(4000),
        filesize                NUMBER,
        filetype                NUMBER,
        reusefile               NUMBER,
        CONSTRUCTOR FUNCTION kupc$_add_file(
                                fn  VARCHAR2,
                                dr  VARCHAR2,
                                fs  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_add_file(
                                qh  NUMBER,
                                fn  VARCHAR2,
                                dr  VARCHAR2,
                                fs  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_add_file(
                                fn  VARCHAR2,
                                dr  VARCHAR2,
                                fs  NUMBER,
                                ft  NUMBER,
                                rf  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_add_file(
                                qh  NUMBER,
                                fn  VARCHAR2,
                                dr  VARCHAR2,
                                fs  NUMBER,
                                ft  NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_ADD_FILE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
811 1a1
yPeExkb/DuayDeA9GXrF2YfnbSEwg0OJLgwdfy9AAP7qR2sHb2+TlbeVhCKYr4qKn/GOYZzK
KzXSj5W1u8mx6QI8YcocaHbmZUIEm7yCXyAnRDTxsnqd7RmuhlWf/SxPhxypvr2pTVBCnhXq
NnsOpejmU7INdWAbAXfU5ZNtczQh4diI9KyzAZ/Ip/WeO6SmQPHVe+P/N4koRo+JPTs0M/ys
ge1p4qc5mI5jupJd+oEuScNuKOaGxtlRagk2kzFS0aU8bCLrdUyR6kJBchJgqwn6RYvVFCna
idOtAynT3v6IBU69iJdFB1pEsAlWzATYpBWhkXvViW36IJRSXHRgF4ZWMK9pM4dkGFJh3ZqJ
gec8LHLx+btONfik7WcjkWqPieKIco+0Mf34waKDchn7o5hr0g==

/

  GRANT EXECUTE ON "SYS"."KUPC$_ADD_FILE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_API_ACK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_API_ACK" FORCE UNDER kupc$_master_msg (
        errnum                   NUMBER,
        error                    kupc$_JobInfo,
        flags                    NUMBER,
        CONSTRUCTOR FUNCTION kupc$_api_ack(
                                en NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_api_ack(
                                en  NUMBER,
                                err kupc$_JobInfo
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_api_ack(
                                en  NUMBER,
                                flg NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_api_ack(
                                en  NUMBER,
                                err kupc$_JobInfo,
                                flg NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_API_ACK" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
4eb 13c
zoxgzRFFac/eep1zEK0eyJZPp6Qwgz0JLcsVyi8yM9VIfQ70f/+rWxiAXm2Ax92Pol+3KSWV
tR/yhuB3lWtlyJjG2VWGQ77HbWnsaohFEqpiFWOdAtkNHTjBpiXIMopjgnSXt/UNqBHP1W3K
g3vnMVZmHk414Zuw0zrVx71f/4I36TtRqbSjZEynCeBc63wGkdWcoiD+1o6+HGNGCDh4S8it
4i4UGknTnfP7m6MXWt7MMTZ5wE/+sKspSxO1/zezrD2/0U5X+RGX7IlYX/YtdeXe8uqqyC1N
wMI++AzQD7Y6PAb1chwYYTa4

/

  GRANT EXECUTE ON "SYS"."KUPC$_API_ACK" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_BAD_FILE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_BAD_FILE" FORCE UNDER kupc$_worker_msg (
                                error         ku$_LogEntry,
                                bad_row       CLOB,
        CONSTRUCTOR FUNCTION kupc$_bad_file(
                                err      ku$_LogEntry,
                                bro      CLOB
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_BAD_FILE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
151 10f
31lvTxyuUgwJjQ/qRCw1OWhkA4owgwLQ18sVyi9GAE6OEn01toYdtDAW9QUh6RGnbOhJBiDg
0o+V/h/y7cVbZXQDfCzQHayggefQ/h5xRusI00j+wZTFSaaJKkr61WE28HgY2vYO/tbFrNj8
UPWrnH8zEqjMb+2WrGFiq+hSc79Z8dfm3tW16OpnhUF0V3cuVizQ//b/BNMF/1muikzZ9DCY
E3x3i23zixMJR43vUnTp95CJ7xJah1an7eQLJRH8CeOgliI10oCY

/

  GRANT EXECUTE ON "SYS"."KUPC$_BAD_FILE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_COMPLETE_IMP_OBJECT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_COMPLETE_IMP_OBJECT" FORCE UNDER kupc$_master_msg (
                                old_seqno      NUMBER,
                                new_seqno      NUMBER,
                                restart        NUMBER,
        CONSTRUCTOR FUNCTION kupc$_complete_imp_object(
                                osn  NUMBER,
                                nsn  NUMBER,
                                rst  NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_COMPLETE_IMP_OBJECT" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
1b2 138
sw2+M+O4IfFitJ7kd83cFzprck0wg43I2ssVfC+iJscYYhZn5namovdXmZ4UmK+HmcyTZvKv
rhqp+AtJz6s2FZWXP+wtF1YF06ju9ZnGul6BTDKteLCSo5hzvlKcVWvi4i8T52d/iLMrvfZ1
ugnxf6+Xp+W7jh8BSqzR1fLG+tONdDSG+OCEP/Fi03eMTyeSDDvwNHcklYRQFiu2BEfBvAok
qxMMsXuv6WDNlAKTWs4K+th5O9Qso5gHEYN7V66QrypSpc5FpGxoND4AJqpe4KQJEvyGJN7n
bzNaKSEYFYpV+yM7D4w=

/

  GRANT EXECUTE ON "SYS"."KUPC$_COMPLETE_IMP_OBJECT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_DATA_FILTER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_DATA_FILTER" FORCE UNDER kupc$_shadow_msg (
        filter_name                VARCHAR2(30),
        filter_value_t             VARCHAR2(4000),
        filter_value_n             NUMBER,
        filter_value_l             kupc$_LobPieces,
        table_name                 VARCHAR2(128),
        schema_name                VARCHAR2(128),
        CONSTRUCTOR FUNCTION kupc$_data_filter(
                                fn   VARCHAR2,
                                fvt  VARCHAR2,
                                tn   VARCHAR2,
                                sn   VARCHAR2
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_data_filter(
                                fn   VARCHAR2,
                                fvn  NUMBER,
                                tn   VARCHAR2,
                                sn   VARCHAR2
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_data_filter(
                                fn   VARCHAR2,
                                fvl  CLOB,
                                tn   VARCHAR2,
                                sn   VARCHAR2
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_DATA_FILTER" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
87b 288
cAIvCTUdz6FIfmpyGkqW2sjY7S0wg82JAK5qfC9AWPjVSHBad00nmR1RfFdK62BX3AFPmVnz
BoTmfMrD+SQXxjt2CGw5omx9UNu/ZLv/rhk2lpzhm+hTRgecsB5zM4snED0ZVSTiIE83WK+m
qXiXDmF2/bJjXHYKYK9YTJtzYXCFg8LxFvXml3KqY1GdlOvPr9Ih+KO8FbuFCBI9Lla1CZCs
bxEN4e+RoVQR3tiiW+fKH07yOtMNWIxqQs/8OqXM27Cy+ljqQHXgDer9E7YGej5c3/rL1N6u
oOAlGG8SRZTxpbh6P+rlbsOTPpr6+j/Lk9GVE39Q8H9YHAIGQJai1xlNWQ8988D+5pQDDyrL
KY07x2u1edZPMK/4RhFzXBNa/GITz5wu4coCnsm5zmLMBw3Wer2v8rizm9TFX/GGFr6QSfS8
qyIL4fZm8zyvB8wWvf3FXKJqiuPWmG6uSPTMU4X2htx87JkaUHYf0jGJ3mlBlsU+ylIhrtxV
p44EpNH0oUE2Z++TPZToyhPJiBwXxiG5JZDbDYUboleMl+4h/f/vUjcZTkxQLRrhE29HcA9B
yMpVxWGt0tA8TECPq4HfAq94ExXAUy29Mv4Hzn0Cu6tycKXrlnPdTDOH+2OKJes=

/

  GRANT EXECUTE ON "SYS"."KUPC$_DATA_FILTER" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_DATA_REMAP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_DATA_REMAP" FORCE UNDER kupc$_shadow_msg (
        remap_name                 VARCHAR2(30),
        remap_table                VARCHAR2(128),
        remap_column               VARCHAR2(128),
        remap_function             VARCHAR2(392),
        remap_schema               VARCHAR2(128),
        remap_flags                NUMBER,
        CONSTRUCTOR FUNCTION kupc$_data_remap(
                                rn   VARCHAR2,
                                rt   VARCHAR2,
                                rc   VARCHAR2,
                                rf   VARCHAR2,
                                rs   VARCHAR2,
                                rfg  NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_DATA_REMAP" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
2c2 16d
Tw/zpHoeTdHstR042cI51+zUo5cwg40lNQxqfI5buHJzjq2KSzXz6pb8pcg06FV8Qj5ClhXc
Y01J80B9/ngpi3FwZeyE7Bokh4+1FQXcmUP8OzC1Ge1HkrHu9n0kmiJAkMjD42qmB9siptqW
7Knd/QcGPvV8Hvb6wv6Dl0g/XbWy0FIjpxw8JepDAf/rV1mG1yHctgrE5nBL8vhtn6g0iy9q
qHnsBBJoCXw0IKklzTnG06ej3FUjMHaMBx6dffhqnT3n/oAWzRE+TbTaKv5U0dkFE5UmOCZZ
SldRATKcPrgbVEcEbjjGB1KeE/UpEI01rDLkyV//PYLCYxrgp53BPuigPFRkGGbX6iQIQvd1


/

  GRANT EXECUTE ON "SYS"."KUPC$_DATA_REMAP" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_DEVICE_IDENT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_DEVICE_IDENT" FORCE UNDER kupc$_worker_msg (
                                flags         NUMBER,
                                file_name     VARCHAR2(4000),
                                file_number   NUMBER,
        CONSTRUCTOR FUNCTION kupc$_device_ident(
                                flg      NUMBER,
                                fnm      VARCHAR2,
                                fno      NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_DEVICE_IDENT" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
1a6 12c
29OD37QeLMjrmVjjmPUJ5JDPpTwwg/DIJCisfC+VkDqOeHwR4HZ2bMtjdrTn6uskFFmkqTd1
BFuBTroWHbe0a0IQ7b/tDy7HhFoBPN1zc34LsYFPa81VUIHQH3yk+7ihgxbZ8MPIugZgWqwK
7Qi0AVSZStyRWskeDKpkNFasyrpjTTMe++WsTVgGH+hKtaJdm/A9kqQWISvzEVbHch7Qg6cb
yLBU5+yjw0V8hoCQ/7atJFb6Vc8TojfxlCNW0lMD7/L12+U+uVinuSEBpQGlanqMYJfxFqv+
1x81DFTG

/

  GRANT EXECUTE ON "SYS"."KUPC$_DEVICE_IDENT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_DISK_FILE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_DISK_FILE" FORCE UNDER kupc$_master_msg (
                                file_number     NUMBER,
                                block_size      NUMBER,
                                flags           NUMBER,
                                allocated_size  NUMBER,
                                file_position   NUMBER,
                                file_max_size   NUMBER,
                                file_name       VARCHAR2(4000),
                                file_type       NUMBER,
                                user_directory  VARCHAR2(4000),
        CONSTRUCTOR FUNCTION kupc$_disk_file(
                                fno  NUMBER,
                                bsz  NUMBER,
                                flg  NUMBER,
                                asz  NUMBER,
                                fpo  NUMBER,
                                msz  NUMBER,
                                fnm  VARCHAR2,
                                typ  NUMBER,
                                dir  VARCHAR2
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_DISK_FILE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
338 199
07toO+hIZz8tRjd8YvsZGNxeO9Ywg43xAK5qfC9AWE7VSH2m0+BwGuC4igxLBpY6HffRHBH3
5WXKqPkk+RZrVhQIL8a/cu17+AAkq0YrA/PcDyxkE1MkP0EGBQhzptsqpsPVwXkOh7p9rFFB
9kSEfPW2iL+EilPdHttznXtj+8PIYoMFk1MymEO4SZJDfJNjfivSVuo+1b2lWVYQZjM/HP6M
k+LXU3M9QWMg3VEoKzeEs2PBoYAfRmQ8xLTHPXcFgSLQ+moLLUEZLjzGxye6U9MmkMnfvoeG
O1D140q7GKKb/l+ZJZjhGLxg41oUCIUbdVm4PN+DCGU3voV9bV8Ull7w5F6M49uD8DTj+WhJ
zSqrdoMhJW9OTdCtjcsqXJoWtYzgBej6mgogqEoa8A==

/

  GRANT EXECUTE ON "SYS"."KUPC$_DISK_FILE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_ENCODED_PWD
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_ENCODED_PWD" FORCE UNDER kupc$_master_msg (
                                encoded_pwd RAW(2000),
                                encoded_pwd_len NUMBER,
        CONSTRUCTOR FUNCTION kupc$_encoded_pwd(
                                encPwd    RAW,
                                encPwdLen NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_ENCODED_PWD" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
15a 10f
/+uNBQNINSOk3idOuK1dzpTGWPYwg/DQ7cusfC+pkEIY/QQhfyKp1PuD1i/u8oP2415bcGXM
b4YeBQn1f6vaIf5OTLnaIsTnvvEXU2iwIjKGDZ2yho/oxqZYoaZGZmqDniurngys1em4wjta
pPFp02P22r4zXf7BNXJGWhdVMyigYOHCLkqSHzT78H4qN69FpWEiKmGLfZALk7N6VXXxao34
hopin1IHuvwHkTH4RWyp8zoRvsozSPgU08zv21o/Fr21/L0l3Nzf

/

  GRANT EXECUTE ON "SYS"."KUPC$_ENCODED_PWD" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_ESTIMATE_JOB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_ESTIMATE_JOB" FORCE UNDER kupc$_master_msg (
                                md_worker NUMBER,
        CONSTRUCTOR FUNCTION kupc$_estimate_job (mdw NUMBER)
                               RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_ESTIMATE_JOB" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
142 11b
3QN4uQM/Tu2cZ7Nh7oSOwk6sF48wgwLQLZ4VfC9AkPiOePVQ6W5iy3kjp4PSZpyZBo7De03j
rIFzeatbSdcvwJq1x8/3c29rfEMc4mTGPoFVAySayxDBlv7vXd/7aUDYS17gBDxKiXdADlK6
jSOgCcS+Dpp14HvDqk9haPvI9pldnVWIfBgL4W0jADB0jDKjUcw3XC6GGDwr0yJLcfBgJ/l5
XSTebwpjmohIyIRCafTDwSt6ZRPzt+t7m/NCAXah52/3YLClYMUDFL3+XbK6JPKc

/

  GRANT EXECUTE ON "SYS"."KUPC$_ESTIMATE_JOB" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_EXIT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_EXIT" FORCE UNDER kupc$_master_msg (
                                unused        NUMBER,
        CONSTRUCTOR FUNCTION kupc$_exit
                               RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_EXIT" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
b7 ca
lbaxUQGfZ8UQZlO1yYadbuEvTpMwg5n0dLhcuJu/9MOF0WJaK/SuO4VWzLh0iwlpuDP+mcu9
njLLCCgJuJmBx8sI0v5epcuyuCv0v/CldPvl3SiscYTm1uSOrEwQaKk54b6vayKoL4yQcVUA
c905zjmYB6lxcAGZ34OTKJH1esN37Jk4y+PN/MHg15VEZoimiH3VHw==

/

  GRANT EXECUTE ON "SYS"."KUPC$_EXIT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_FILEINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_FILEINFO" FORCE AS OBJECT
(
   fileNumber         NUMBER,         -- Assigned file-number
   mediaType          NUMBER,         -- 0=disk file, 1=pipe, 2=tape, 3=uridisk
   version            NUMBER,         -- Dump file version (for import)
   directory          VARCHAR2(4000), -- Directory spec
   fileName           VARCHAR2(4000), -- User filename
   fileSpec           VARCHAR2(4000), -- Full file spec
   guid               RAW(16),        -- Holds guid from dmphdr during import
   maxFileSize        NUMBER,         -- Max size to use or 0 for unlimited
   flags              NUMBER,         -- FLAGS attribute for a DISK_FILE msg
   allocSize          NUMBER,         -- Tracks most current allocation size
   filePos            NUMBER,         -- Tracks most current file position
   blockSize          NUMBER,         -- Used only during import as a check
   charsetID          NUMBER,         -- Used only during import for lobs
   mdEncoding         NUMBER,         -- Used only during import for lobs
   reservedTo         NUMBER,         -- The ID of the proc using the file
   sid                NUMBER,         -- ID of slave if parallel
   used               NUMBER(1),      -- 1 if file was used, else 0
   reserved           NUMBER(1),      -- 1 when file is inuse, else 0
   usable             NUMBER(1),      -- 1 if file is good, else 0
   verified           NUMBER(1),      -- 1 if file verified at import, else 0
   hasMstTbl          NUMBER(1),      -- 1 if file contains the msttbl, else 0
   CONSTRUCTOR FUNCTION kupc$_fileInfo RETURN SELF AS RESULT
)
PERSISTABLE -- Part of kupc$_fileList
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_FILEINFO" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
26b 185
37uG8XRFmhks0oguzZ+fBRTmYiMwg3nx7dxqfC+pWE6OeNL7cGzgpXKtAD0t709M86fL4/JN
lEul+bQuDIboiPHOmLv/wU9Xy+clHvPLnSS7ClX5Ts41D/ggL2imFrtXQBpRKHDxXvc01i6r
dycXhWathqhwWa/7jCqtPiitMVdjDIqFQ5ZnLUz8bEB6MD83xjNGEncU4N5rFbp0ccmsq/ae
VKOIcrRs9gX2QrPvaPClqSeIKdPeU3pcGh9ksCEjajrS1BhKF70XVtiBJ8DV2uoEepqDZdkT
Yzs8ZnzUJowx+RH1l/bATAJOHAu0UUq8FXq6UHRJYBBbDxhWfqhih82wte+ohJkSYlPBBGPt
O0y5ojqAsAXoPrsHJL/ArD0=

/

  GRANT EXECUTE ON "SYS"."KUPC$_FILEINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_FILE_LIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_FILE_LIST" FORCE UNDER kupc$_master_msg (
                            fileList     kupc$_fileList,
        CONSTRUCTOR FUNCTION kupc$_file_list(
                            flist        kupc$_fileList
                           ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_FILE_LIST" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
110 f3
AGABOsBrZ2uNA5aOhVpHyfrTyWQwgxBKmMsVfHTpWPiUHHvdFVtpf1B3JmbmCZX/UD4d4SZR
HdOltV03lzYcViS5DSjQHeb2mPNIZPi+y7HevEZCI3ruZ5SpS0C0Qq88N9JgS8I5Sj8vMsjy
C1AYMKQynYQbocW84no6F4OphDP/pmun8xRhXSofGm8SAcL4ogBJ5FUiLB8FRD7PKy48YiSM
fIaJUjr3JyFMXlw+ZBkVuiQd

/

  GRANT EXECUTE ON "SYS"."KUPC$_FILE_LIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_FILELIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_FILELIST" FORCE AS TABLE OF (kupc$_fileInfo)
PERSISTABLE -- Part of kupc$_file_list

/

  GRANT EXECUTE ON "SYS"."KUPC$_FILELIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_FIXUP_VIRTUAL_COLUMN
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_FIXUP_VIRTUAL_COLUMN" FORCE UNDER kupc$_master_msg (
                                seqno          NUMBER,
        CONSTRUCTOR FUNCTION kupc$_fixup_virtual_column(
                                sq   NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_FIXUP_VIRTUAL_COLUMN" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
127 10f
rj4yjeDvab+qbrhlwUV59M5c8VgwgwLQr8usfHRAAE6OALhQbSjKCKYLL2b1Sztg3G2of6hR
04Zf0Ls5HPAzUKDXtcQPMrrHWqKDFTFKTBHcc9lKizGaLDNXdbnftNmU4JSmfDfyDOCjWoXn
WNE2FUonb+zYV2l5MwJ3jpxA9PHFcXvZu2nwDFpcFUMPzZ4UsRTzjpaCxoaj6WNB+tNBH1c7
TcPic4QTzaLUPJqFR4CULm+V/Y4ZDuxCfCybKsYhnuFPHyA4w2B3

/

  GRANT EXECUTE ON "SYS"."KUPC$_FIXUP_VIRTUAL_COLUMN" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_GET_WORK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_GET_WORK" FORCE UNDER kupc$_worker_msg (
                                dummy         NUMBER,
        CONSTRUCTOR FUNCTION kupc$_get_work RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_get_work(
                                wid  NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_GET_WORK" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
194 103
K9F7mXSCfDVllyqYXpid+TKyM3Awgw3QLcusfC9AkEIY/QT1f//fywnL5qnV3mSoWaTjUnBQ
BPBkILr1gvwGsu32u7W5uwhQqJHFLHBFkMZ3pCjqvyRMG7QTNmfFZdg7kWNrSxS+CTYNzZH8
8pGx1UzWYGHs3XBeMIUP8Hkw1IJW1ZuIDipsW7DN0QbAcxVVA+9R2JfW4O/mpCyL7mv0iW1d
xJZi75I+IyA2kQV0gerN/Cj9I6oIn5240RyYzUwm

/

  GRANT EXECUTE ON "SYS"."KUPC$_GET_WORK" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_JOBINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_JOBINFO" FORCE AUTHID CURRENT_USER IS OBJECT (
        errstat_info   kupc$_LogEntries,
        CONSTRUCTOR FUNCTION kupc$_JobInfo(
                                logLine IN ku$_LogLine
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_JobInfo(
                                text IN VARCHAR2,
                                errorNumber IN NUMBER DEFAULT NULL
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_JobInfo(
                                logEntry IN ku$_LogEntry
                                ) RETURN SELF AS RESULT,
        STATIC FUNCTION createJobInfo(
                                logLine IN ku$_LogLine
                                ) RETURN kupc$_JobInfo,
        STATIC FUNCTION createJobInfo(
                                text IN VARCHAR2,
                                errorNumber IN NUMBER DEFAULT NULL
                                ) RETURN kupc$_JobInfo,
        STATIC FUNCTION createJobInfo(
                                logEntry IN ku$_LogEntry
                                ) RETURN kupc$_JobInfo,
        MEMBER PROCEDURE addLogEntry(
                                logEntry IN ku$_LogEntry DEFAULT NULL
                                ),
        MEMBER PROCEDURE addLine(
                                logLine IN ku$_LogLine
                                ),
        MEMBER PROCEDURE addLine(
                                text IN VARCHAR2,
                                errorNumber IN NUMBER DEFAULT NULL
                                ),
        MEMBER PROCEDURE addError(
                                errorNumber IN NUMBER,
                                param1 IN VARCHAR2 DEFAULT '',
                                param2 IN VARCHAR2 DEFAULT '',
                                param3 IN VARCHAR2 DEFAULT '',
                                param4 IN VARCHAR2 DEFAULT '',
                                param5 IN VARCHAR2 DEFAULT '',
                                param6 IN VARCHAR2 DEFAULT '',
                                param7 IN VARCHAR2 DEFAULT '',
                                param8 IN VARCHAR2 DEFAULT ''
                                ),
        MEMBER FUNCTION format RETURN ku$_LogEntry,
        MEMBER PROCEDURE printJobInfo,
        MEMBER PROCEDURE addTimeStamp
        )
PERSISTABLE -- Part of kupc$_mastererror, kupc$_masterjobinfo, etc
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_JOBINFO" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
1e19 64e
xHPk+NVHkc2fKbTlN3gaZHKAtbAwg81UuiAF344ZAz9ELOFa23FqoUVhTRP7wqJJo2wlDk2f
P9On3QXCa5/uU2eZ0sbQiRb0iSa6fkkQdTei6PpOpEEFxoQtQ+E3iAicj5qWT7v/JZrfxK+S
crK4C5mm0I91s9sLRqxCrABvL3QZSZnQZO8DpnL0auoNqubApDkEN2daQWPAtD45++lWawTb
Fm5OVaU4bkZWmrF0TFtX1meJ1EcBJrSZMBJseMaNykcRqeCA/I5qY++NhFfXRseyBtoV+Xd7
8a90c/9GDSxx/FVT0uB3Pq/wyo5Js3TMqBadOhG5nm1S00ByhuIbO/J2kE73wvjMbkdTtclK
pa99z/V/WFnKejuYbVXFvafwT0cBAhVg1QIwj1w5I46+dACT+9752LoXo4bSVmYwou9PxBFK
zVGMlMt6SBykVBaAuF6TVuwB85esxA7bhD/m87gQnetYkECyLkDsNa92VycI0ADxcDkZ3l98
y9YWcHy2cHjnugHAKwwwWoKETj77us1XOXVd/UbAhzWzUtLXRkhHDo+M4QrdgDhfQIX29JkM
jopOkIuM/BL2NKIJT0pHRazvivpok0XCD1ccKWsVSSsodC4LxqOwmQq0jVxOfVIVTlkh5Kq4
/awKHARMFYgA3gcYBkKGOiWNgoinTlOOff9uAgxVfXHXYWV5fpiwzpU4BpwH9J16WeScatsP
pBv5knwIeLIGsAAXrur+cxQHKUIYI1uLrNCcCHV4Dyz/i35uO1rpQ9r84JOpm0KoT5ybOsIg
09mBZF1ODc+8N0uMEhb4tK1r99nlOQkpjzDl5/TgR9f+bJ1ZO5t99s4qru/6DHoGtn/6SKxT
rOoy9JNfIuxJ/WUbruDZI9smbDuUxyWuXJroWNkqu2s8Sj6+N9B4NeP1OGOdXbaRzDN15R8n
q3aU+4ulpyU0JxWGQmdjjXkQ2Ks+4v+mf2Kxp8mJ07Ir49CrLaNS5SNOcYWYAUMHT686oPtH
s8j+nj3DS6ufEjoRy7iOuu5T7qYsRq9bUWhr+pTUL3A1y8WibD7CWVdV9YJ9Wj1EsjC1aQxJ
pF7te+UcIHkuV9HJlyr1fOmgLWcXk+qIIOX2qm+VPqG0ZjgL+ZzJWDgDnbssJ5ZUeMS12Lmf
qbW8ktJC/tdAEiF8jvxIAxlzUp0/pt/O+aSJ+5EUlAeg7l8C4JDXr1NzE51QI8RzGy0cfhGL
dTww1QLPZtEnx1/JYIusFcCyRq6J4i32ItU20gYWEGOFoQHucyNjRYqA6PIDsanJ8lV5bCxN
PHjPfriBCjvM3LdgSBppYfmbKZ8NROpYK7JVBAcAGLbWNOg4rg0RmFV+KOsKUMcPO36BMhd3
M2q2MDeDR5rNH1pvouOM6W2MAyFP1zdt1ePHrX/+kbJoLomctvJzocPuD1iZNLczTEBgYbud
4+c/LXGD8Xgy7CoyGbHjY0K/2chPniCR8SA3AFx1UZawyzg9xtIwAl2mi+VSsXwzq4UPEJ7J
nenVh89XZcKsmkUeSDbO7RYSoWUNdGSWW7GPP5Q8Hi+g2xeuPXflnfgcw7yBVXdkEQa1rrX7
CFMz6A==

/

  GRANT EXECUTE ON "SYS"."KUPC$_JOBINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_LOAD_DATA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_LOAD_DATA" FORCE UNDER kupc$_master_msg (
                                start_process_order  NUMBER,
                                end_process_order    NUMBER,
                                datasize             NUMBER,
                                method               NUMBER,
                                creation_level       NUMBER,
                                flags                NUMBER,
        CONSTRUCTOR FUNCTION kupc$_load_data(
                                spo NUMBER,
                                epo NUMBER,
                                ds  NUMBER,
                                md  NUMBER,
                                pa  NUMBER,
                                lvl NUMBER,
                                flg NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_LOAD_DATA" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
2cf 189
brfkMXFY7J8+QQZyaJvv+dMWvlwwg43xmNzbfC/pJk6U0WGmvagnK45KAL3ztgXsiGSgISvb
n8o1+7XQLDc59LI+UV1oC9rs/a05ae3EgIGbOvk0DGQg2T6Qp9Dp3rmJZRktaSEGobKziFg0
XtB/dUzmZHnCo9IBM/m8VzBDBmgdTE8y7iziAQ0xkM2feH3N0Ry4A9qPU0UXPdXpyvdu4N2o
v/cPrVGgKyMESerEdUKJJY9VEHmVaOSg8TwRDwBvLvHhQh1H+rdExfbAf2JbF6qwpZCnczAj
5cZUSH45QqVhyDHf0yHeot0VrEhHL32bchRGhAybNKMhDhy+yHqNYGkDFMqbgfUfUirV8tSA
SWxTeaDXsHrB0Jq/TL4Pz/tN9vGA

/

  GRANT EXECUTE ON "SYS"."KUPC$_LOAD_DATA" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_LOAD_METADATA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_LOAD_METADATA" FORCE UNDER kupc$_master_msg (
                                flags         NUMBER,
                                degree        NUMBER,
                                start_row     NUMBER,
                                end_row       NUMBER,
                                md_worker     NUMBER,
        CONSTRUCTOR FUNCTION kupc$_load_metadata(
                                flg  NUMBER,
                                deg  NUMBER,
                                sro  NUMBER,
                                ero  NUMBER,
                                mdw  NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_LOAD_METADATA" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
248 164
2cp7eIwl+Mx+rhboy2Bkc/ebHKMwg43ILUgdqHRA2ppeMIVQWlyNrcxby8+wFqnvC/WXRtwu
sOgnQNJzmYBIfSUUdOcitQQ6t2oca2zHqXJPTvhmkLzGC5KSU1/GCGWsnrKpGyxGjG/gfVGx
wmwomFOxbZGhWF1picxRQccztT0xHN2AsWadaHT9z8p2dbkohu84F0Ctz4KYNmD0iqgOzcI0
z7Kz8j204J2BXpkfIz6DsSC3YHOSgAtFp3guXOiSafExTGwxmYbSV0/FnlFU0+tpESvMPiOC
gm5Ygt7KGagf7IAKd+XKvVjeFSKjEs1paSWO7YkV5SV7C63BLN8uXjOwD2ZPQl4=

/

  GRANT EXECUTE ON "SYS"."KUPC$_LOAD_METADATA" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_LOBPIECES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_LOBPIECES" FORCE
AS VARRAY(4000) OF (VARCHAR2(4000))
PERSISTABLE -- Part of kupc$_data_filter, kupc$_metadata_filter

/

  GRANT EXECUTE ON "SYS"."KUPC$_LOBPIECES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_LOGENTRIES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_LOGENTRIES" FORCE AS VARRAY(10) OF (ku$_LogEntry)
PERSISTABLE -- Part of kupc$_JobInfo

/

  GRANT EXECUTE ON "SYS"."KUPC$_LOGENTRIES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_LOG_ENTRY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_LOG_ENTRY" FORCE UNDER kupc$_shadow_msg (
        log_entry_text          VARCHAR2(2000),
        logfile_only            NUMBER,
        CONSTRUCTOR FUNCTION kupc$_log_entry(
                                let  VARCHAR2,
                                lon  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_log_entry(
                                qh   NUMBER,
                                let  VARCHAR2,
                                lon  NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_LOG_ENTRY" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
2fb 158
UBHxdUM6OJJtBxBqv7eRlkY2y3kwg1X3AK5qfC9AWE7VSH1Q8vOepLp/tP9sSrhyOxDR111r
5nTKZ+dA+RKKRhVgH0V31kPQxjPHZL4P71q6/qXSOmFP28Gxxs6lmwg/pu6ZpgH6A5kYO9Yb
yAb/02gCDeyiCwXj2+JPG7m7ycj7YRU+Ymg0evCweKkV8lHa+v/dqFuAj7Mh+q0uEHx6gwx+
2qviVDqnx2NtBa+HTBJiJxK1uqLkG6eVEbhxyWhSIkPWWTWF3sVjND7BXFzXP1DoggRiWCLW
oT9oBO2bBCaHb7Vvi2Bqf5Cbm/GxrCeCUP0QvJ2Fcz0fH+waNw==

/

  GRANT EXECUTE ON "SYS"."KUPC$_LOG_ENTRY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_LOG_ERROR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_LOG_ERROR" FORCE UNDER kupc$_shadow_msg (
        log_error_text          VARCHAR2(2000),
        error_number            NUMBER,
        fatal_error             NUMBER,
        logfile_only            NUMBER,
        CONSTRUCTOR FUNCTION kupc$_log_error(
                                let  VARCHAR2,
                                len  NUMBER,
                                lfe  NUMBER,
                                lon  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_log_error(
                                qh   NUMBER,
                                let  VARCHAR2,
                                len  NUMBER,
                                lfe  NUMBER,
                                lon  NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_LOG_ERROR" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
411 179
+47O0WioK4eQncMkvxEUKVTKG+Ewg83xf64dqI6pkLvqNGuEE3FHMbPU+1PGUvfmmSiBGzkL
diEmvtu1lnY7VaAudnaXZ4/t0B/OMCF+L1N5WzD45DBBlf5V9s+IxlXnR+qmFauu0efCy5F8
rCP2jyJ+21YnBen1/0VCBj8cq72PN61rdbo8SY853UYqgL/hVgh0tD/q+Y1MqYSe/6mAYrfw
oIE1XggVLR7Xw+DN2pfLILsblgaD1TyDxoxBU0krXL6vqFnOojqJKHo+i04UJrwmnC7rVp6j
S8AFdBtibKiIf0zlWVJC2GIS8LOrAFm9mCRpHPGxEYNcgRe1RVy4QPgMtnbsZ3/r/PQZ5ap3
b0K8kuEpx7S2

/

  GRANT EXECUTE ON "SYS"."KUPC$_LOG_ERROR" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_MASTERERROR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MASTERERROR" FORCE UNDER kupc$_master_msg (
                                flags        NUMBER,
                                error        kupc$_JobInfo,
        CONSTRUCTOR FUNCTION kupc$_mastererror(
                                err  kupc$_JobInfo
                               ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_mastererror(
                                flg  NUMBER,
                                err  kupc$_JobInfo
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_MASTERERROR" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
253 124
PDPXzfjRAYoSMd1WT9OKjX24Mvwwgz3IACgVyi9AkPjVSH0O9H//38tiRAljUHZ89SdfKZFf
OYG12YBbSTK49zdomXJV7b/ouxbD5bnu0lMcTu7PU1WAeHu/Umn8dKkWJrKj4I7hA/F1YKG0
BUpdhLonhPdmxW4Sm3MIBFlC2lwq8SbQPplnJ1byUMN8u9QMeQKhvMWX/YgMoOwTfJXJ/R63
PW1kOJJWZvqi+jKPPKGAFBEsGpx3fNvDPOkzajpYj6YlYZSVQ6pi2dq1n0zuQQD79OU3NA==


/

  GRANT EXECUTE ON "SYS"."KUPC$_MASTERERROR" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_MASTERJOBINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MASTERJOBINFO" FORCE UNDER kupc$_master_msg (
                                flags          NUMBER,
                                jobinfo        kupc$_JobInfo,
        CONSTRUCTOR FUNCTION kupc$_masterjobinfo(
                                info  kupc$_JobInfo
                               ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_masterjobinfo(
                                flg   NUMBER,
                                info  kupc$_JobInfo
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_MASTERJOBINFO" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
266 124
+wATGIS3+Km39ZWSKskl3IuGdZUwgz1pACgVyi8yuWRTa9Yb1FcFV46eGvJr7gt9d02zovA8
zgi1AhUGUX9S9+6PuRnaGQDrdzbIVqtXItEToAA7SP7NgVA7/sFMW77cpkuOgxZt8MNnO93o
ieGnYdTeukODLw3ITY7Dy6QzcwgW43dakoWIN2bUxfvsuPw2vsO6SKwholQ+kvONydRkZRP+
Tghd6aP9BZPQY3oXg++wqNDKDwi/FkAPcxPjZgw//B1DR+k41aJ3zrtxx/ydpdfGr7Ym/EC3


/

  GRANT EXECUTE ON "SYS"."KUPC$_MASTERJOBINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_MASTER_KEY_EXCHANGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MASTER_KEY_EXCHANGE" FORCE UNDER kupc$_master_msg (
                                public_key      VARCHAR2(256),
                                key_digest      VARCHAR2(64),
        CONSTRUCTOR FUNCTION kupc$_master_key_exchange(
                                pubkey  VARCHAR2,
                                digest  VARCHAR2
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_MASTER_KEY_EXCHANGE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
180 130
b4sP26D8wgx6OZh1CaflxRrBONwwgwLIJJkVfC+VkPg+SLhpL1uAlWsucgTYoaHR4LDKCY6i
87WpPxK36NbWtHTuAr+dhu1pXGaRxWSP0jS5+Lk0mCT8E9o9IOqdM8ZVQ2mEJ9Om6BqoeYg+
spnViL1sOAEMPL8edy8nxBWX7qdiXvpSj/S1sKBYWzS0GoOCI2X8osCvs1AfJaF0Ne+TYq9w
LaUA5Ou0rOCMdL7I1xgN7o75OHsgqy0I0GDipOxseZLmS3wvDrRsezfe1iNJ5X3bFjWMRxeh
07kZW89wVCo=

/

  GRANT EXECUTE ON "SYS"."KUPC$_MASTER_KEY_EXCHANGE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_MASTER_MSG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MASTER_MSG" FORCE UNDER kupc$_message (
        parallel                NUMBER,
        last_error              NUMBER,
        error_count             NUMBER,
        debug_flags             NUMBER,
        mcp_queue_type          NUMBER
        ) NOT FINAL NOT INSTANTIABLE

/

  GRANT EXECUTE ON "SYS"."KUPC$_MASTER_MSG" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_MDFILEPIECE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MDFILEPIECE" FORCE AS OBJECT
(
   dump_fileid     NUMBER,
   dump_pos        NUMBER,
   dump_len        NUMBER,
   dump_alloc      NUMBER,
   dump_off        NUMBER,
   dump_name       VARCHAR2(4000),
   dump_cred       VARCHAR2(4000),
   CONSTRUCTOR FUNCTION kupc$_mdFilePiece RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION kupc$_mdFilePiece (
                                fid      NUMBER,
                                pos      NUMBER,
                                len      NUMBER,
                                alc      NUMBER
                               ) RETURN SELF AS RESULT
)
NOT PERSISTABLE
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_MDFILEPIECE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
31c 150
tyI+gCc+0CyIGL1l4jCfkc94VHgwgw3MmEoVfC8ai9VhDlcUnidR1dMS8Fbf9tnQrMXpWjeP
GvbOqm7Z6QfLmWYUcbSGMaTZ2rYzb2tlwCiw2b+YEbzL/DC5ii322hZzdmcEM6/p818dlJM2
eQSfsxjpXgxjvTtgN498osaP98MlYwrQjkAfxWgn3EmpXw15I/CnphOuVB+qoCq8xrXe5v+z
bPfz/qDMxbHXAfCdIYBRExi4FrvFalYAYKeVz8K9LCT8gAzeraZKMgJIgcN8RWWTfJIqk2nx
U5R6zQ+8bzLseiyfrDpTtkdbQT/kM4X4EJ9ERRjoTA==

/

  GRANT EXECUTE ON "SYS"."KUPC$_MDFILEPIECE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_MDFILEPIECELIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MDFILEPIECELIST" FORCE
AS TABLE OF (SYS.kupc$_mdFilePiece)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KUPC$_MDFILEPIECELIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_MDREPLOFFSETS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MDREPLOFFSETS" FORCE AS OBJECT
(
   offset          NUMBER,
   CONSTRUCTOR FUNCTION kupc$_mdReplOffsets RETURN SELF AS RESULT,
   CONSTRUCTOR FUNCTION kupc$_mdReplOffsets (
                                off      NUMBER
                               ) RETURN SELF AS RESULT
)
NOT PERSISTABLE
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_MDREPLOFFSETS" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
164 f3
gk7kBgBc6jSUHxxIPjjbsmYcBq0wg5Cuf8sVfHSRudV69anwWBg3G8vlEZCFUkDcpA5MpiYJ
7rUa1xhnj6+8A7l+kKDLa6BFAh7HesFVcxVzMANqfIHQvcsiHWmnNLhp4IhZymyNbFdEsJvi
s1/iYdQwjihf03XdC3lRggksJ6F48norjkln03IRxAd5LYrxUtRaRYU/zr6H5E/FnrYOUImF
pT1LOu+AFLu3RxCB4XUaaTE=

/

  GRANT EXECUTE ON "SYS"."KUPC$_MDREPLOFFSETS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_MDREPLOFFSETSLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MDREPLOFFSETSLIST" FORCE
AS TABLE OF (SYS.kupc$_mdReplOffsets)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KUPC$_MDREPLOFFSETSLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_MESSAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MESSAGE" FORCE AS OBJECT (
        msgtype                 NUMBER,
        requestid               VARCHAR2(128),
        MEMBER FUNCTION isDatagram RETURN BOOLEAN,
        MEMBER FUNCTION isRequest  RETURN BOOLEAN,
        MEMBER FUNCTION isResponse RETURN BOOLEAN
        ) NOT FINAL
PERSISTABLE -- ***Root of DP persistable types***: Part of AQ messaging table
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_MESSAGE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
234 113
AcufSQMc4QeP1t8bqOuoIW8bBRcwg+1Kf5kVZ3QCkPjVZVcWjjWxBrixDB44EuqWvmte8z7L
ZueVtbs9YdaPK1L6mZb62cYyAso75e4zz3Gn1+3NRU4NRDXzZ/RjoltYeD729me301bASfK4
hRlYuN6ZjslUnHX2to5nF2eH05iNareA4DsGeTS6ahxKvPLr14nrNvsij7g5Xlba0PoFFayl
x6f0cPCEjBUKvChM0xBsHPuL4dAzJDAmwkC4IqXITroGvNGHtTkH9A==

/

  GRANT EXECUTE ON "SYS"."KUPC$_MESSAGE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_METADATA_FILTER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_METADATA_FILTER" FORCE UNDER kupc$_shadow_msg (
        filter_name                VARCHAR2(30),
        filter_value               VARCHAR2(4000),
        clob_value                 kupc$_LobPieces,
        object_path                VARCHAR2(200),
        CONSTRUCTOR FUNCTION kupc$_metadata_filter(
                                fn  VARCHAR2,
                                fv  VARCHAR2,
                                op  VARCHAR2
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_metadata_filter(
                                fn  VARCHAR2,
                                lo  CLOB,
                                op  VARCHAR2
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_METADATA_FILTER" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
571 264
G25AEVzpvve9LpSl88NaiZzbl8Uwg5Ve2dxqfC9dR+rO3ajzzD3hSRxbxlKDqQuAM0XdPuUw
WufIL8W1cpL3ITXjnstsBxQZkPq5R0iPYe4U6pViQvkwmNoRDyw8Cvg9Iz0iIu3YLBm9KvhG
fGyyEdln3gmj+g4J8XExQKSgKlujaQ55k72PezXScuo+vZMJ12/DLAEFs9maDlwDNSBEsKLH
S6PTaun0ewgR2KkOV8FO8pKud8nL/4zrmWR1LrwWSO+PR4wLWSWDgl/Xs1N6PgHf2UqwKeeg
GhVKzAyikFmwpEq9jSBpJZ7zBsWdXXSDQBXgWuqyJdAjn2nBGb5W/zO1Ml/mRCqYdqgrQ9NM
Csfi1u+yfTCfYdfgSwZfxFmTvdZd9ciK+KE5AwiItlWEAQh2xJEv8mZr8ZUOWJC56rR2T/wQ
r3w+m4NTYEnHywQTambzxfCFHulsV6FuF8EfSvHTGNPxaw/Bs0D0TfyeCXYDJwZQrMdUY5bT
I5WeMXR5R6VqLVX/R72d+53lqH10hD/qN6sEarY2GgBRcjdPTxJ20+oRohgQvxoweoqf+woS
sppzP2sRIcEgqg6YuxDhHi5/cA==

/

  GRANT EXECUTE ON "SYS"."KUPC$_METADATA_FILTER" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_METADATA_REMAP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_METADATA_REMAP" FORCE UNDER kupc$_shadow_msg (
        remap_name                VARCHAR2(30),
        remap_old_value           VARCHAR2(4000),
        remap_new_value           VARCHAR2(4000),
        object_type               VARCHAR2(128),
        CONSTRUCTOR FUNCTION kupc$_metadata_remap(
                                rn   VARCHAR2,
                                rov  VARCHAR2,
                                rnv  VARCHAR2,
                                ot   VARCHAR2
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_metadata_remap(
                                qh   NUMBER,
                                rn   VARCHAR2,
                                rov  VARCHAR2,
                                rnv  VARCHAR2,
                                ot   VARCHAR2
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_METADATA_REMAP" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
481 185
qvKUG0+muz0u4Q0Ye8XdgUD9aeUwgz0lLgwdfy85cHJzlK3SUBVmBfw1Vhybf80reLd5ZZMp
PlaDt44Yd7Ug3w388i2ONt7LhCIc5ptloNipvYynikN5TncoHj1hQkhhLjBMOxOyhuLGdSF9
hSOh1MImgKHH1oqv6sIsIS/qbjBLDkIq487+OH+n7LqTuNr/SsdeT9sIFEh9DCyVhMk3z8+d
1sCrx/QMwQyDbBRw38b1Ap+CJ+/t7Qy9+tlI5u6Gz/GlSJm+3BlC8wtvHW0xFpiXB5rwPlxN
QimYUHfMh8FCsWZ6HEvOaqtSKPEV+S0SFxbCs86LTtQzcs12aS4jqgV0bWZv0qOp1/9kx/nE
Mp5K5VmfzG72gg2BBqTfrJty

/

  GRANT EXECUTE ON "SYS"."KUPC$_METADATA_REMAP" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_METADATA_TRANSFORM
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_METADATA_TRANSFORM" FORCE UNDER kupc$_shadow_msg (
        transform_name             VARCHAR2(30),
        transform_value_t          VARCHAR2(4000),
        transform_value_n          NUMBER,
        object_type                VARCHAR2(128),
        CONSTRUCTOR FUNCTION kupc$_metadata_transform(
                                tn   VARCHAR2,
                                tvt  VARCHAR2,
                                tvn  NUMBER,
                                ot   VARCHAR2
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_metadata_transform(
                                qh   NUMBER,
                                tn   VARCHAR2,
                                tvt  VARCHAR2,
                                tvn  NUMBER,
                                ot   VARCHAR2
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_metadata_transform(
                                tn   VARCHAR2,
                                tvt  VARCHAR2,
                                ot   VARCHAR2
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_metadata_transform(
                                qh   NUMBER,
                                tn   VARCHAR2,
                                tvt  VARCHAR2,
                                ot   VARCHAR2
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_metadata_transform(
                                tn   VARCHAR2,
                                tvn  NUMBER,
                                ot   VARCHAR2
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_metadata_transform(
                                qh   NUMBER,
                                tn   VARCHAR2,
                                tvn  NUMBER,
                                ot   VARCHAR2
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_METADATA_TRANSFORM" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
be0 1be
x8ROokJSxI6CdOctvVDUD/VtD0swg82N164VfATUAE7q0t378ZV00nAUHIPiC30zb4PEDFcq
bSwf1qtutZ1MW/N/e6GPDgsHySyd/qH+0t4Pbq5EOGXst8bEnAXiTGiclUzMb2Fxb65kKHLZ
RGtFhOecDsyISgn3tKbG9DbAC+g09oI3IVFaYsWee6fFHr6sT5Y2eF3DCEblOFBfwVP9uV2v
kVlNyVQG1MOrKSLM4fDhUemr2vZojN8+PBt/f0GpnIXSBNUXlmQ0oeTSCqGflV/Pr8b2Dlhk
60CtxpMoqAQ2FziqE9neJ0aVrhFKSgAoarsRTRHB3HNcwvavs+JJRSv3jYVwMC0lTbXERR8v
8Hv4chVWqJ0POwu4Yay3aeMJcnLxPIApSynOckmVCFYR/jP5Cv1TKvC8AjuYle0wLApM8Em7
26tG8g==

/

  GRANT EXECUTE ON "SYS"."KUPC$_METADATA_TRANSFORM" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_MT_COL_INFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MT_COL_INFO" FORCE AS OBJECT (
    col_name    VARCHAR2(128),
    col_type    VARCHAR2(30),
    col_version VARCHAR2(30),
    col_size    NUMBER)
NOT PERSISTABLE

/
--------------------------------------------------------
--  DDL for Type KUPC$_MT_COL_INFO_LIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MT_COL_INFO_LIST" FORCE
IS TABLE OF (kupc$_mt_col_info)
NOT PERSISTABLE

/
--------------------------------------------------------
--  DDL for Type KUPC$_MT_INFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MT_INFO" FORCE AS OBJECT (
    version     VARCHAR2(30),
    owner_name  VARCHAR2(128),
    table_name  VARCHAR2(128))
NOT PERSISTABLE

/
--------------------------------------------------------
--  DDL for Type KUPC$_MT_INFO_LIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_MT_INFO_LIST" FORCE IS TABLE OF (kupc$_mt_info)
NOT PERSISTABLE

/
--------------------------------------------------------
--  DDL for Type KUPC$_OPEN
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_OPEN" FORCE UNDER kupc$_shadow_msg (
        current_user              VARCHAR2(128),
        operation                 VARCHAR2(30),
        job_mode                  VARCHAR2(30),
        remote_link               VARCHAR2(4000),
        job_name                  VARCHAR2(128),
        version                   VARCHAR2(30),
        compression               NUMBER,
        ena_sec_roles             NUMBER,
        CONSTRUCTOR FUNCTION kupc$_open(
                                cu   VARCHAR2,
                                op   VARCHAR2,
                                jm   VARCHAR2,
                                rl   VARCHAR2,
                                jn   VARCHAR2,
                                vs   VARCHAR2,
                                cp   NUMBER,
                                esr  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_open(
                                qh   NUMBER,
                                cu   VARCHAR2,
                                op   VARCHAR2,
                                jm   VARCHAR2,
                                rl   VARCHAR2,
                                jn   VARCHAR2,
                                vs   VARCHAR2,
                                cp   NUMBER,
                                esr  NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_OPEN" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
68a 1ca
dOY2bNg3mlNXHZDyZi7pkaeJ9xwwg823ACAVfC9A2k7VenypRsUOpOVRy0rHL90iE9ra07cH
5V5jp2O1nZ/hCYP7q70yFdZD0MbBTu0/cxk3Fn6+H7sPB7E45Ho0EOf6HaiJ6TOOicQUp/uN
D7qOBY93fKNbV/KFOujm/Ceh5fEhT3HbOx4CIFmWbvWdfbSZZL4f4ptef3XhfWV0WUnOZtpv
NiIvnjntWWXoPlvNujWZVDstvTgwQwO5cpbwDvwimavQCm011RzzDtA3N2XGa1qdawQmfFgu
yU6wUm1j1hQTT7M42AxHatLjfn7z8GJrDH5ZnMp8PIR39mifqCW9I27cmDdp7E83pYB7Ki+1
8uiLuVyXq5wnwKyJ9pz7AZFp99g5//0mfbBowABOBEtxdOLubUyBvwggHJIgKExy5o3bCXjb
4kVY/G4mwKr+suk08h8=

/

  GRANT EXECUTE ON "SYS"."KUPC$_OPEN" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_PAR_CON
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_PAR_CON" FORCE AS OBJECT (
   ind1            NUMBER,          /* 1st Parameter number */
   ok_value1       VARCHAR2(200),   /* Ok value for 1st parameter */
   ind2            NUMBER,          /* 2nd Parameter number */
   ok_value2       VARCHAR2(200),   /* Ok value for 2nd parameter */
   ok_mode         VARCHAR2(30))   /* Legal if in using this mode */
NOT PERSISTABLE

/
--------------------------------------------------------
--  DDL for Type KUPC$_POST_MT_INIT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_POST_MT_INIT" FORCE UNDER kupc$_master_msg (
                                metadata_worker    NUMBER,
                                restarting         NUMBER,
        CONSTRUCTOR FUNCTION kupc$_post_mt_init (
                                mdw  NUMBER,
                                rs   NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_POST_MT_INIT" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
18b 13c
zs5HXXnaKhi+76m+NSGaEf9dFP4wgwLQLUgVfC9A2sE+SHAWCVwyOTK4bu/CuP+zOlbb9R22
5Q5aRv7GSm13vXpUM6pPqhCnc+NQQEgoJMTZOGucmh4asKHQwYY2G9+m32mO3Cvhahv3lB/n
Yd6gmaSEjqSipK1Ccn1OKvXapvKEbeQI04vnKM5smDZgoVkvsyDC9bzUXWP8xLTa7NVAtAw6
zfwSPMRPtYGBIEXiFhgpXwRVRBlmnEkxvP/AvgRvgBD0rTx3E2gCRzhAPkIPTq0J/dOhiM8A
exggre8yHug++AWkhXCTBA==

/

  GRANT EXECUTE ON "SYS"."KUPC$_POST_MT_INIT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_PREPARE_DATA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_PREPARE_DATA" FORCE UNDER kupc$_master_msg (
                                seqno          NUMBER,
                                path           VARCHAR2(200),
                                restart        NUMBER,
        CONSTRUCTOR FUNCTION kupc$_prepare_data(
                                sq   NUMBER,
                                pa   VARCHAR2,
                                rst  NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_PREPARE_DATA" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
18f 130
mU1kQxyH9sEqzx5iScGz5vUqH54wgwLIfyAVfC8C2sHqaN1nYxhr78wHbce983DavxcUG9VR
WUxmw/kkn+EJsNRqt7s6mOsAHjG2w+IianIQNNgGMJhKas2rnQea+2mepobYFluMSmu9PBHB
VorWeAp9WHpllauUsb1ztVpP20AL6eQt5xJZwObf2l1yAW7pDwMfMb9wJd1vRssul3XyvVuQ
6yt3n5+rUokrTsF+neigyU54ec+8p7bsORbCySFiZRIcMpyy0Mdid7qcsikPLkL0z0m6nOn3
gc37e6XD2g==

/

  GRANT EXECUTE ON "SYS"."KUPC$_PREPARE_DATA" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_RECOMP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_RECOMP" FORCE UNDER kupc$_master_msg (
                               md_worker NUMBER,
        CONSTRUCTOR FUNCTION kupc$_recomp (mdw NUMBER)
                               RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_RECOMP" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
12f 10b
9DGe70CPqxeTkdDp0NpVSJ7Ey34wgwJKLZ4VZ3RAkPiOiHt9Zv9vBzPRYmO/vvHZzG5IFtxm
b6/+xLHHPHSoOpu2Ir5K5/Dr6lOdnL5fZAXkz1Zp+OFnrZsVNfQLER0+KaSvL2BcYGBDilMP
hJ3Z/L2prHnItcko3RY3vXrsnypU6ixfkZw5mEFhHzy/8RpynNfppAMM5JvFB/VudiiFPmHy
kScnlvNYVUA+BLc6QFHANxSk3FjJEyHvKeVaef77tgKiEA==

/

  GRANT EXECUTE ON "SYS"."KUPC$_RECOMP" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_RELEASE_FILES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_RELEASE_FILES" FORCE UNDER kupc$_master_msg (
                                unused        NUMBER,
        CONSTRUCTOR FUNCTION kupc$_release_files
                               RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_RELEASE_FILES" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
d2 df
NyBFrAtyQzgJHXXxtv95pXmSZR4wgxBKr54VfHRAAP4+wLQxW7gwtEX1jvZ77NJLXvMmyrnK
y5qaMp4GlXbmP9O8lmXL5zu7YFMAu8HFAJuJrsfcnB6JFxFU+xGuVqgnCPtZFGI8tnYGDgqO
UDhqdV8yVNy16mf0N6mzWAI0okrcGUpvEgzVj4XtiU+f+D1rxCRK0pOx/JlWggnq1VySi0Sc
LoIG

/

  GRANT EXECUTE ON "SYS"."KUPC$_RELEASE_FILES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_RESTART
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_RESTART" FORCE UNDER kupc$_shadow_msg (
        job_name                VARCHAR2(128),
        job_owner               VARCHAR2(128),
        ena_sec_roles           NUMBER,
        CONSTRUCTOR FUNCTION kupc$_restart(
                                jn  VARCHAR2,
                                jo  VARCHAR2,
                                esr NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_restart(
                                qh  NUMBER,
                                jn  VARCHAR2,
                                jo  VARCHAR2,
                                esr NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_RESTART" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
374 158
XqMpDFos85A2xF+/DYjqw+tLy0cwg0P3rvbhNXSVALuwha/WFWZ9JsMjdVjw4p94jKHUBt4W
Y7CHGD27u4osL5bya1DWx+e2m+9d7bD4sqyBlRy83JosajDO5K28LEpwFB24QaKtV4F0bWfc
6kGPKn5ofGUYqzzMUUidKvuKdJglpVadrviaUBZ0jidtzx+kHYw5Gy/Yb6FMJ2zDgymgU3HM
mFGnY99Kep2ge1UasYj4r3oe4qD3WVXg036bhUo8ia5OKYrezzXk/agPf/kYNWXMUOkzlPJq
bABVGpgNOu+UTorQUbSnUAWNJJF+Y2tRJ2t5Oq413zK4OTeFYS0=

/

  GRANT EXECUTE ON "SYS"."KUPC$_RESTART" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_RESTORE_LOGGING
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_RESTORE_LOGGING" FORCE UNDER kupc$_master_msg (
                                seqno          NUMBER,
        CONSTRUCTOR FUNCTION kupc$_restore_logging(
                                sq   NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_RESTORE_LOGGING" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
118 103
lSMsI/kkrBi+qDwhb553c7IqsMYwgwLQf8sVfHTpWMeeKKRw7qbDdCEyjBg83oaRfYn7XJTh
zMOP+RRith0wzsI7SbUgBSrnWP/aUzS5sNuuc4at3O2dSmq4vLK4cPvKKi0q3KN5DrgUeSa9
SuL39HiFOG28JfKNGjw3+UxoOajqFxH5wv18EZCocNgYL2xfisWYRpd8BP9JJyvfvC0Fcmtd
M9WJtaYpWYJhGu/ZzcJUeuDQibDmokzt++yJNSo=

/

  GRANT EXECUTE ON "SYS"."KUPC$_RESTORE_LOGGING" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_SEQUENTIAL_FILE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_SEQUENTIAL_FILE" FORCE UNDER kupc$_master_msg (
                                block_size      NUMBER,
                                flags           NUMBER,
                                allocated_size  NUMBER,
                                file_max_size   NUMBER,
                                file_name       VARCHAR2(4000),
        CONSTRUCTOR FUNCTION kupc$_sequential_file(
                                bsz  NUMBER,
                                flg  NUMBER,
                                asz  NUMBER,
                                msz  NUMBER,
                                fnm  VARCHAR2
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_SEQUENTIAL_FILE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
231 15c
nFv9W0hW7TQWVCV6c7XzzVqElGAwg43Irgwdfy+VALuwdYQongZrgG0HMYqRsi4bKqoYzWzj
fmtUorM/qgP0Vn2vg3bmm4t4ahMf39WsPJ/9MK28AHIlxqU/dock/q4HoAUsOWeapufZIlMW
rDLK720OVmpl4ttWQiPj2zVr3AneRUfSmrCBuqZK6Gy/ENOnRbUkX8FZ3xcxcB1LYEm5s9eu
JeqPFqLGj6HZisWqEHdrYDEJZFMmy5J8QKoS6lGOeJ1RWZrdUVA7YeBYNIOnQHbgjWPUGdDy
3OXFTYL0N0W91L3RXghS5XUslGBedzR5XB6rhhNTuiHXMA/P+3OwMvo=

/

  GRANT EXECUTE ON "SYS"."KUPC$_SEQUENTIAL_FILE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_SET_PARALLEL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_SET_PARALLEL" FORCE UNDER kupc$_shadow_msg (
        degree                   NUMBER,
        CONSTRUCTOR FUNCTION kupc$_set_parallel(
                                dg   NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_set_parallel(
                                qh   NUMBER,
                                dg   NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_SET_PARALLEL" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
237 11f
e4FkyXc8QE4g+jaMQjIPttAPgxUwgzvI7cusfI4CkEIY2nwR4M+m9ITelgJUo31y3XcvahQd
CMFzAlH0t2VQ7ujt/tnNrcbflOblVB2xwbj0c+0SzmvtDRCagWdZNmeNISvaJ41AR6EnmWzu
isWrEtY86qK2qGl+gNL+OM9WJY0+/J2KyyGjsGwEjjFNC8+rSYrYFumHhUtRIWjcOUqwDuMc
vJQ6/iG9FoTif8hfcpA6BylK8Wyz7Cse5Ib1nRanASbYLPLcFLY32E5jfy4yTuFp1iPI

/

  GRANT EXECUTE ON "SYS"."KUPC$_SET_PARALLEL" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_SET_PARAMETER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_SET_PARAMETER" FORCE UNDER kupc$_shadow_msg (
                                parameter_name     VARCHAR2(30),
                                parameter_value_t  VARCHAR2(4000),
                                parameter_value_n  NUMBER,
        CONSTRUCTOR FUNCTION kupc$_set_parameter(
                                pn   VARCHAR2,
                                pvt  VARCHAR2,
                                pvn  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_set_parameter(
                                qh   NUMBER,
                                pn   VARCHAR2,
                                pvt  VARCHAR2,
                                pvn  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_set_parameter(
                                pn   VARCHAR2,
                                pvt  VARCHAR2
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_set_parameter(
                                qh   NUMBER,
                                pn   VARCHAR2,
                                pvt  VARCHAR2
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_set_parameter(
                                pn   VARCHAR2,
                                pvn  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_set_parameter(
                                qh   NUMBER,
                                pn   VARCHAR2,
                                pvn  NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_SET_PARAMETER" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
9af 18d
xYpaPM1GiTQ3tq8MUG9/TMFRp9Ewg1WNLvbhfy9AEjPqR6/WFQlhLLDyKKGf9WOYA/Zlk6WO
ojMURC0ztXgxYmJv5YmjTfqoT67TGUKIQJwqrNjCbH6HxB5rEt7+SJiDO0EFEJgdODmm5WZq
g8XiIVliPkHqNq5hK4QXyExioBb3zNB6EjQ9jpJgEY2ZEBNui/35qCwiyrryd0nufxGRCr10
b15kd5bwYlOxVlLfsLn0JUdX233uLevY4ighmP6GocY/SLcsapQLY9CQdj2JaBS/Kc7VseMV
UYYdoDhyGbApvyFEgwzNrhLzOEqJLjkXgfb3aoB6t23A/ihH10QB6QfRm1fN+ZA3CBRxVj6U
UvHkZCFTR+W2rqT0GtF2eBTS6iASD7K8

/

  GRANT EXECUTE ON "SYS"."KUPC$_SET_PARAMETER" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_SHADOW_KEY_EXCHANGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_SHADOW_KEY_EXCHANGE" FORCE UNDER kupc$_shadow_msg (
                                public_key    VARCHAR2(256),
                                token         VARCHAR2(4000),
        CONSTRUCTOR FUNCTION kupc$_shadow_key_exchange(
                                pubkey  VARCHAR2,
                                tok     VARCHAR2
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_SHADOW_KEY_EXCHANGE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
18a 148
75lg4att3fvmyGY4Y/0DSN7E1kowgwLIJPZqfC+V2vheaI+vObZoJSZr1mxPpAvqZZK327fn
9CaoUDby3vjNEhglYtur2+spc0oSF0AcN/rAqYaxQiyYct6/VxCYhs4e1E9zoPgwLGtQ86ac
5v0BvveexdVT3hqpPDN6nyNcicCGo3Z2SDrlLyobomgk7QE2yFQfGASBiddmYGE15O8Dop6e
8FzhIZ+UQw6wYZC99AQ88FOgMOsNCBIwQu0UBm399Gg9oF/i67+y/jkoAlbuB0Ci7m2DZaME
DE3Irws5ckJBsK+2QJur6b5fZqok5Psw4JO6

/

  GRANT EXECUTE ON "SYS"."KUPC$_SHADOW_KEY_EXCHANGE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_SHADOW_MSG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_SHADOW_MSG" FORCE UNDER kupc$_message (
        handle                  NUMBER
        ) NOT FINAL NOT INSTANTIABLE

/

  GRANT EXECUTE ON "SYS"."KUPC$_SHADOW_MSG" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_SQL_FILE_JOB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_SQL_FILE_JOB" FORCE UNDER kupc$_master_msg (
                                file_path     VARCHAR2(4000),
                                file_name     VARCHAR2(2000),
                                restart       NUMBER,
        CONSTRUCTOR FUNCTION kupc$_sql_file_job(
                                fp  VARCHAR2,
                                fn  VARCHAR2,
                                rst NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_SQL_FILE_JOB" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
1c5 148
aLuTyHmFn/ABLGd2IrxPK7ECbKswg43Ir/Idfy9AALteR2tbRD4GswaoEy6fxMlJUmU+0iEO
FhGZO+O7IPFcffrgy6g6iwt1qjD9dKC8BRW5Hs40yHLQ7TS8zQ9dc6U2xd+mgwuR8uwANy5N
QtLnKD59AtuASZ/1YDy87Uf8msY5qfBmABZF7SIghqp+GHR16DxQk4GehbhmRhFu1/NOeBvG
x7Q80u88b16KvoqLubxAPdnrS5teTFwNJQ4wFsKySS89w9pUbmte95UvQ1zJGPq+WOoUg0ld
CVNY3hxflFzxTnPCZRJC/YorLl65bSDMouAd

/

  GRANT EXECUTE ON "SYS"."KUPC$_SQL_FILE_JOB" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_START_JOB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_START_JOB" FORCE UNDER kupc$_shadow_msg (
                                skip_current  NUMBER,
                                cluster_ok    NUMBER,
                                service_name  VARCHAR2(100),
                                abort_step    NUMBER,
        CONSTRUCTOR FUNCTION kupc$_start_job(
                                sc  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_start_job(
                                qh  NUMBER,
                                sc  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_start_job(
                                sc  NUMBER,
                                ab  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_start_job(
                                qh  NUMBER,
                                sc  NUMBER,
                                cl  NUMBER,
                                sn  VARCHAR2,
                                ab  NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_START_JOB" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
589 18d
UfGaqGBQp+vgERynVR2InfJUnwAwg9cJLdxqfC8BuepoUGuNxYllCX+0H8S9Uv8pkEwmt0R+
fKkO5CRSCXDv5Y70MEuKwbBOmP7/LP0dg0OAMDrPEuzG0Otq+D4inSKs8Yime9Ny++0LtDnm
D3usxSFX0AaU+DC70lFDc+02+xZ3g6XKMr1+z3Dhf58FJxFk09i7PRED1SbVzNn/SUPEv5Cr
NPnMtnKuE0pJXDGidEdAz2aZM1Ml4mNteC7mAxyKqtwXhDrJ36P4+AaYcz3jK/CKw2sWxKR5
D1mFmA8kQO1eI4ML6NKOwX51bTOsRTa4aV8CBhN/tvjE3oD9g+RXRcVrEXJ+agfTLhRcv1wU
fd9n7S+jO+oeVrqH8aqDZLymjExJ2w==

/

  GRANT EXECUTE ON "SYS"."KUPC$_START_JOB" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_STOP_JOB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_STOP_JOB" FORCE UNDER kupc$_shadow_msg (
                                immediate_flag  NUMBER,
                                keep_master     NUMBER,
                                delay           NUMBER,
        CONSTRUCTOR FUNCTION kupc$_stop_job(
                                im  NUMBER,
                                km  NUMBER,
                                de  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_stop_job(
                                qh  NUMBER,
                                im  NUMBER,
                                km  NUMBER,
                                de  NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_STOP_JOB" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
332 144
5O82M0MagfQjE2cJkpw6fiozCs4wg5X3nUjWfC/U2k6OeHwUCT1bEYmvtFtXzigtch23Y/UM
QMoNELVwyvbeFFEwS4qYTyJV/qQyYuY46VucmvnV0JoksSJBZElwIh2PPDDAN7cyaTlqoaMd
LhFCHAAx3xx+LYhLndB3pht94VX4ZgV63Z40A219b3YJuDl65cBL388QaSFYVkvxyYlQvFGJ
xsE/IfokuRuGaDEBt6jw5mUVVMUrbKP8JuvKYcyCrn1g975WaS3RlNvYfC63GRHb0brVKQtz
tdKHnY0ynAmC73dapB4XOz5VIHjiB+jy

/

  GRANT EXECUTE ON "SYS"."KUPC$_STOP_JOB" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_STOP_WORKER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_STOP_WORKER" FORCE UNDER kupc$_shadow_msg (
                                worker_id       NUMBER,
                                skip_current    NUMBER,
        CONSTRUCTOR FUNCTION kupc$_stop_worker(
                                wi  NUMBER,
                                sc  NUMBER
                                ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_stop_worker(
                                qh  NUMBER,
                                wi  NUMBER,
                                sc  NUMBER
                                ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_STOP_WORKER" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
2bf 134
A3zh9z4DMugcL+KUceZNN2oDS94wgw3I7cusfI5gkBAY2lcR4M+m8B2JnrIwbf4ZQFcyfNx0
q6oGHgw1tklS3csu+IEacyORDyfjecIHkj8iWeSBn3v4xikJLJYvCARnk5GosNvTfnbFf2+o
v2PsMG+6kpcJ4t6DyJqAAaZQeQsuToenPRPN6Rdno3aoS9HfLobJ2eLI4hLYXtbNlLrcbOT1
vkiYCpWAv7V7cQ1d1YKhcNXrAm4TJdWAGszm/+XZmMRqowvCqyhN9pxz4h4kJ1t4E+l1jmJT
2Tm4pIuztu8GjRM=

/

  GRANT EXECUTE ON "SYS"."KUPC$_STOP_WORKER" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_TABLE_DATA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_TABLE_DATA" FORCE AS OBJECT (
                                process_order  NUMBER,
                                creation_level NUMBER,
                                degree         NUMBER,
                                datasize       NUMBER,
                                method         NUMBER,
                                seqno          NUMBER
        )
PERSISTABLE -- Part of kupc$_table_datas

/

  GRANT EXECUTE ON "SYS"."KUPC$_TABLE_DATA" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_TABLE_DATA_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_TABLE_DATA_ARRAY" FORCE UNDER kupc$_worker_msg (
                                table_datas   kupc$_table_datas,
        CONSTRUCTOR FUNCTION kupc$_table_data_array(
                                tds      kupc$_table_datas
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_TABLE_DATA_ARRAY" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
12b 103
VaNPaRBQPMVYhdVYGNm6lKTnYmAwgwKumMsVfHSRueowfaaZLGeVyBveXPPxxZ9A3MwwWXwO
5XTkAKFqaX+pW9nQTlVYQIfmedumxMGGcZI+brnqqr1epTh2apkEb6ZoERQeV4iZ8Otue4zu
jyOHI+AN8Yd84EGT2UAyRrXL03VtIOHkEkX71fqTshZctjuVb5BRfsKnebAXGO9hifmDzRey
vEx15IrliFNQ3I99VnID8uVjb1zMGjQjHTGI6QM=

/

  GRANT EXECUTE ON "SYS"."KUPC$_TABLE_DATA_ARRAY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_TABLE_DATAS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_TABLE_DATAS" FORCE
AS VARRAY(1000) OF (kupc$_table_data)
PERSISTABLE -- Part of kupc$_table_data_array

/

  GRANT EXECUTE ON "SYS"."KUPC$_TABLE_DATAS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_TYPE_COMP_READY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_TYPE_COMP_READY" FORCE UNDER kupc$_worker_msg (
                               seqno     NUMBER,
        CONSTRUCTOR FUNCTION kupc$_type_comp_ready(
                                sn       NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_TYPE_COMP_READY" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
11a ff
THlm7BFHwcsS+oI7uRuPfBDJUZIwgwJKLcusZ3RnkDoYy3RFzvvTW62eqOYoZO03KeDI+gT0
szed/rm4wFD9I3lOgyIp2kZxHwBxD+vIRcF68EhTmhv+BHKciMtuphYuVtTFsznyDPInLrig
kPKQzkKw9QWt1gdRDxKS/gsYLDHfgE6cGak1LUCpLT7tX5Yx38IRQ1Q9juqgcUTztM2Mp4M/
3r4oyOnsCKJ7S1kMC77zwBpmDPEv6iDzzTWQ

/

  GRANT EXECUTE ON "SYS"."KUPC$_TYPE_COMP_READY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_UNLOAD_DATA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_UNLOAD_DATA" FORCE UNDER kupc$_master_msg (
                                start_process_order  NUMBER,
                                end_process_order    NUMBER,
                                datasize             NUMBER,
                                method               NUMBER,
                                creation_level       NUMBER,
                                seqno                NUMBER,
        CONSTRUCTOR FUNCTION kupc$_unload_data(
                                spo NUMBER,
                                epo NUMBER,
                                ds  NUMBER,
                                md  NUMBER,
                                pa  NUMBER,
                                lvl NUMBER,
                                seq NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_UNLOAD_DATA" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
2d6 191
10euJPAyacTlbtp3wWiipzTo3SUwg43xLgwdfy9AALtkdYQonmZBYhwlkaMfA6GfyQlNnEu0
E1EcirV4LNXnrEzH5/r4IrdkeMDn5/0gy6XAkjCHY+sFHvj1WcYpx+GVTFsO7QtrTZW2fozr
JRJb0H99XBj/IwHxzFHRgjq/ho+vlTjW9RCnlapLQDh/2nVDfmnZk5jEbZPUUslyUepnFvdx
4i0FdoBBwKAJrPu0j+K/MvQ3vwngNJhkvn0TLL4aMXHq8en3GmeH78ebkcjyXEroOn1HIB+d
VcIc/q4y72ou/WkcND6XcOzTjj72s29iTeje5lz5LsJTINw/LcmTlfHIhbHtcaADh2MaEPUJ
XwU64Vd7D9BfC16DmY1SIuRFHvKqCER1M4kD

/

  GRANT EXECUTE ON "SYS"."KUPC$_UNLOAD_DATA" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_UNLOAD_METADATA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_UNLOAD_METADATA" FORCE UNDER kupc$_master_msg (
                                flags          NUMBER,
                                degree         NUMBER,
                                start_seqno    NUMBER,
                                end_seqno      NUMBER,
                                md_worker      NUMBER,
        CONSTRUCTOR FUNCTION kupc$_unload_metadata(
                                flg  NUMBER,
                                deg  NUMBER,
                                ssq  NUMBER,
                                esq  NUMBER,
                                mdw  NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_UNLOAD_METADATA" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
252 16d
28hJZ4VZ5IH0xLds2fAHVqK5qLkwg43IACAVfC9n2sHqaN1Q8pT8cXevLZbzFa1qVZPj+hjy
sD/LpbX2xg7ypPL6LzGWch86KUjwUDnE1rGGsU5WpCQZIsYQI6qtX/gIfKz3Od0500MRKnz1
99jRHa/F4s1W6ZuvUyEOqxd3aMn4u7BOAKaVa+m8nRbaNOZvMeQP1PZdr3lym+n+ywQqZTcO
u8C8NI19DUB+LQ8lIeDIhwySxrA+GpC1nljcFVEms1mWldeBxfoBBLCGQlz3TTgurP2eAsF2
je++LBgXe1OgsjTm0SEPSwkgorZlB71e0vkhjA6RhBRiLBzFO3hiHuTQ6euJ/td423LPGg==


/

  GRANT EXECUTE ON "SYS"."KUPC$_UNLOAD_METADATA" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_WORKERERROR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_WORKERERROR" FORCE UNDER kupc$_worker_msg (
                                error         kupc$_JobInfo,
                                errcnt        NUMBER,
                                workerid      NUMBER,
                                last_msg      NUMBER,
        CONSTRUCTOR FUNCTION kupc$_workererror(
                                err      kupc$_JobInfo,
                                ecnt     NUMBER,
                                wid      NUMBER,
                                lstmsg   NUMBER
                               ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_workererror(
                                err      kupc$_JobInfo,
                                ecnt     NUMBER,
                                lstmsg   NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_WORKERERROR" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
384 148
x5a0TtYf5to1YOK25Gk4CzTtui0wg1X3LZ7hf3RAkLs+ZVcW4ygOVzDtQW48wyWOUkU1bnaJ
rM6S6B/zSSiAzVDoqk4HP70sn2/yD6SPz5gcB81z8f+w9fIp8XCInqaGf3zpakEOShFTCOcT
U4Jqn7veC/rTQquhi8Fs3qtNv83ZOfYkKf6IXdHdU2Jigf1xj3lU7XTtOgvK2fcvrDINfNkq
osbyD4Nc1ky9Jvq+6gPpgHDoINLNTlKHeqFj6vFJrwz6jpPxXioNeFwrf3uw5bo5/z3C5crl
Hh/Hfi3sH51XnO1L+fjKAgiYrYsQpabXfZjv

/

  GRANT EXECUTE ON "SYS"."KUPC$_WORKERERROR" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_WORKER_EXIT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_WORKER_EXIT" FORCE UNDER kupc$_worker_msg (
                                process_number       NUMBER,
        CONSTRUCTOR FUNCTION kupc$_worker_exit(
                                pid      NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_WORKER_EXIT" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
11a 103
nZeYHc5lVmXu5m8XGKarVUj85pcwgwLQ2ssVfHRAWBKeKKRw7qbKOexFXHff9HaAUD6EPfsy
plzKVyKhat02HFYkPwVPvnjnAtESdRzEqP5yHnrwAywPnNp2eTnKoMJZ3EsbTW7TVg2s1Ij3
+LfoOfqGk5t7FqoT9wGeiR6eGp2Ssi/C70RvBcUORndFp7bDNw3D2Rj/PHYPtKRvFi1zrJtP
iz/MqyXhO4EpP3bnWiaN0ZUEXBYBs2QZlLQ1HQ==

/

  GRANT EXECUTE ON "SYS"."KUPC$_WORKER_EXIT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_WORKER_FILE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_WORKER_FILE" FORCE UNDER kupc$_worker_msg (
                                sid           NUMBER,
                                flags         NUMBER,
                                minimum_size  NUMBER,
                                used_byte     NUMBER,
                                alloc_size    NUMBER,
                                file_number   NUMBER,
        CONSTRUCTOR FUNCTION kupc$_worker_file(
                                wid      NUMBER,
                                psi      NUMBER,
                                flg      NUMBER,
                                msz      NUMBER,
                                usb      NUMBER,
                                asz      NUMBER,
                                fno      NUMBER
                               ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_worker_file(
                                flg      NUMBER,
                                msz      NUMBER
                               ) RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_worker_file(
                                wid      NUMBER,
                                psi      NUMBER,
                                flg      NUMBER,
                                usb      NUMBER,
                                asz      NUMBER,
                                fno      NUMBER
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_WORKER_FILE" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
687 1a5
a24xEbBQskCIE9YfF8ae2UCa2Eswg83Dr/Idfy+BaGSFa1tE9wDVHPF+wkbJt2y3aWGcdhrm
3jU+4527fmBjBwbCJ2Nb/kuRG7tsWP4b9BCwdaUycmGWcihO5JKgmuL+OlIDuoLLgtQavy+E
8bNb6Le3szDGbya3TjTSOGvmPNTlDKI/c2IuLh2co2sVgRZrHYLwDnmC8FAVJ6uoN3Vgj16/
UP8s02AI6lZNdawLDtjUzXxGke+TScMLaF/FeQZw0s0QLdwZdlScmkm7ntNM5i/s6ahpX4dp
2GIgcIUOtIne8IJ5J4J1XJMs6WP0NuX/UdBsbZfMp7oeQ0l1qqnZNU2LwkVOibD8QC3AMBoP
isZPn9mauk5MzQoLl+qAMmTcO5KIvOG1nCM0LeW2hynuqgg5A2UMTw==

/

  GRANT EXECUTE ON "SYS"."KUPC$_WORKER_FILE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_WORKER_FILE_LIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_WORKER_FILE_LIST" FORCE UNDER kupc$_worker_msg (
                             dummy NUMBER,
        CONSTRUCTOR FUNCTION kupc$_worker_file_list
                             RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_worker_file_list (wid NUMBER)
                             RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_WORKER_FILE_LIST" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
188 10f
qlD2a66bteTKQngblmABDS+EWJ4wgw1KJCisfC+VkDqOeHx94G5sywnLJWmjJYeEbnsEWecU
q3fOgXmv9FNXMGpzoRlzGYxe8MjlijZzTp9KVR57M8190VVQRWuYJI8RZqboGqh5iD6yvo1f
U/Fpg+yV4sxFos3A0VC9SOch8T3TdBhoJPjrVDWCG5WsDCT7xV5puBksG3QF0X+5jFobrXKs
wHgsAzW0zMmh0ro0MoaTJSs+/Neiune1JRKGuzqED+37PwuRkw==

/

  GRANT EXECUTE ON "SYS"."KUPC$_WORKER_FILE_LIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_WORKER_GET_PWD
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_WORKER_GET_PWD" FORCE UNDER kupc$_worker_msg (
                             dummy NUMBER,
        CONSTRUCTOR FUNCTION kupc$_worker_get_pwd
                             RETURN SELF AS RESULT,
        CONSTRUCTOR FUNCTION kupc$_worker_get_pwd (wid NUMBER)
                             RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_WORKER_GET_PWD" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
17e 107
WRjKogwt3JmM2Uf2ozGe4CEVWOcwgw1KACisZ3RAkDqUpAT1f//TW77VRqYAwLGZUkU19B3W
RhHO+Bk3bdSVr8tzWgXBEDp3yhryQQ6qdMG0LsQtu2C/zblIddG4IfOpaZFUuq/yhMmhuGvn
8gXjtA3ynE1MSorsK6xgYezdcI066iSrugjhoX+Wheqpg112w/4HiGZhuy/+g0lOUqhqVUiI
b89995HTc+B5VSPTMXvp7ViTLAiWwYczmP7I6q6Lijii

/

  GRANT EXECUTE ON "SYS"."KUPC$_WORKER_GET_PWD" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_WORKER_LOG_ENTRY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_WORKER_LOG_ENTRY" FORCE UNDER kupc$_worker_msg (
                                wip           ku$_LogEntry,
        CONSTRUCTOR FUNCTION kupc$_worker_log_entry(
                                log      ku$_LogEntry
                               ) RETURN SELF AS RESULT
        )
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."KUPC$_WORKER_LOG_ENTRY" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
124 107
Gf607iNmxg31sqtA9w87dk+EGBQwgwLQncusZ3TUkEIYy3RFzqbTW62eqHDQaIHmdUh82/vv
QBFfILtzUsBQyy4T+bwz1Sik5tFt++jGzYmDwTRZhuCWTjFKsfibrNbcpkYU15fnp57yhKz2
oVB13BphnOU1AbqTkxQraoPunWprLRFZ/DI1M+oN+wJ+jjfUYfXicQou2bMPSlwuOJXM6ooP
g83WJC1zMxckom+lvLl6/Ogt0HjP8MORoQZO/LKfmKJy

/

  GRANT EXECUTE ON "SYS"."KUPC$_WORKER_LOG_ENTRY" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KUPC$_WORKER_MSG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KUPC$_WORKER_MSG" FORCE UNDER kupc$_message (
        id                      NUMBER
        ) NOT FINAL NOT INSTANTIABLE

/

  GRANT EXECUTE ON "SYS"."KUPC$_WORKER_MSG" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PIND_STATS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PIND_STATS_LIST_T" 
 force as table of (ku$_pind_stats_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PIND_STATS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PIND_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PIND_STATS_T" force as object
(
  obj_num           number,
  partname          VARCHAR2(128),
  bobj_num          number,
  rowcnt            number,
  leafcnt           number,
  distkey           number,
  lblkkey           number,
  dblkkey           number,
  clufac            number,
  blevel            number,
  ind_flags         number,
  obj_flags         number,
  sample_size       number,
  analyzetime       varchar2(19),       -- timestamp when last analyzed
  cache_info        ku$_cached_stats_t, -- cached stats information
  subpartition_list ku$_spind_stats_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PIND_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PIOT_PART_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PIOT_PART_LIST_T" force as table of (ku$_piot_part_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PIOT_PART_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PIOT_PART_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PIOT_PART_T" force as object
(
  obj_num       number,                                 /* obj# of partition */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  ts_name       varchar2(128),                                 /* tablespace */
  blocksize     number,                            /* size of block in bytes */
  storage       ku$_storage_t,                    /* storage characteristics */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  dataobj_num   number,                          /* data layer object number */
  base_obj_num  number,                                        /* base index */
  part_num      number,                                  /* partition number */
  hiboundlen    number,                     /* len. of high bound val. expr. */
  hiboundval    varchar2(4000),                                 /* text of " */
  hiboundvalc   clob,                                           /* text of " */
  lobs          ku$_lobfrag_list_t,                                  /* lobs */
  flags         number,                                   /* (indpart) flags */
  tp_flags      number,                                     /* tabpart flags */
  pct_free      number,                   /* min. free space %age in a block */
  pct_thres     number,                 /* iot overflow thresh. null if !iot */
  initrans      number,                         /* initial # of transactions */
  maxtrans      number,                            /* max. # of transactions */
  analyzetime   varchar2(19),                     /* timestamp last analyzed */
  samplesize    number,                                     /* for histogram */
  rowcnt        number,                                         /* # of rows */
  blevel        number,                                      /* B-tree level */
  leafcnt       number,                             /* number of leaf blocks */
  distkey       number,                                /* # of distinct keys */
  lblkkey       number,                      /* av. # of leaf blocks per key */
  dblkkey       number,                      /* av. # of data blocks per key */
  clufac        number,                                 /* clustering factor */
  spare1        number,
  spare2        number,
  spare3        number,
  inclcol       number                     /* iot include col#, null if !iot */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PIOT_PART_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PKREF_CONSTRAINT_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PKREF_CONSTRAINT_LIST_T" 
 force as table of (ku$_pkref_constraint_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_PKREF_CONSTRAINT_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PKREF_CONSTRAINT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PKREF_CONSTRAINT_T" force as object
(
  obj_num       number,                      /* object number of base object */
  col_num       number,                                     /* column number */
  intcol_num    number,                            /* internal column number */
  reftyp        number,                                     /* REF type flag */
                                                     /* 0x01 = REF is scoped */
                                             /* 0x02 = REF stored with rowid */
                                             /* 0x04 = Primary key based ref */
                            /* 0x08 = Unscoped primary key based ref allowed */
        /* 0x10 (16) = ref generated for xdb:SQLInline="false" (bug 6676049) */
  property      number,                     /* column properties (bit flags) */
  name          varchar2(128),                             /* name of column */
  attrname      varchar2(4000),/* name of type attr. column: null if != type */
  schema_obj    ku$_schemaobj_t,                         /* referenced table */
  foreignkey    number,               /* 1= scoped REF is also a foreign key */
  pk_col_list   ku$_simple_col_list_t   /* any pkREF refd. pkey constr. cols */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PKREF_CONSTRAINT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PLUGTS_BLK_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PLUGTS_BLK_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  prepost       number,                        /* 0: preaction, 1:postaction */
  plsql         ku$_procobj_lines      /* PL/SQL code for procedural objects */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PLUGTS_BLK_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PLUGTS_TABLESPACE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PLUGTS_TABLESPACE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  ts_num        number,                                 /* tablespace number */
  bitmapped     number,      /* If not bitmapped, 0 else unit size in blocks */
  flags         number,                                     /* various flags */
                                     /* 0x01 = system managed allocation     */
                                     /* 0x02 = uniform allocation            */
                                /* if above 2 bits not set then user managed */
                                     /* 0x04 = migrated tablespace           */
                                     /* 0x08 = tablespace being migrated     */
                                     /* 0x10 = undo tablespace               */
                                     /* 0x20 = auto segment space management */
                       /* if above bit not set then freelist segment managed */
                                     /* 0x40 (64) = COMPRESS                 */
                                     /* 0x80 = ROW MOVEMENT                  */
                                     /* 0x100 = SFT                          */
                                     /* 0x200 = undo retention guarantee     */
                                    /* 0x400 = tablespace belongs to a group */
                                  /* 0x800 = this actually describes a group */
                                   /* 0x1000 = tablespace has MAXSIZE set */
                                   /* 0x2000 = enc property initialized */
                                   /* 0x4000 = encrypted tablespace */
            /* 0x8000 = has its own key and not using the default DB enc key */
                                  /* 0x10000 = OLTP Compression */
                                  /* 0x20000 (131072) = ARCH1_COMPRESSION */
                                  /* 0x40000 (262144) = ARCH2_COMPRESSION */
                                  /* 0x80000 (524288) = ARCH3_COMPRESSION */
  ts_name       varchar2(128)                             /* tablespace name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PLUGTS_TABLESPACE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_POST_DATA_TABLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_POST_DATA_TABLE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                 /* obj# of base obj. */
  schema_obj    ku$_schemaobj_t,                           /* base obj. info */
  spare1        number   /* 32768 (0x8000) set if minimize records per block */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_POST_DATA_TABLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PREPOST_TABLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PREPOST_TABLE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,
  base_obj      ku$_schemaobj_t,
  action_str    sys.ku$_taction_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PREPOST_TABLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCACT_INSTANCE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCACT_INSTANCE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                                     /* object number */
  base_obj      ku$_schemaobj_t,                            /* schema object */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  level_num     number,                                             /* level */
  tag           varchar2(128),                             /* procedural tag */
  cmnt          varchar2(2000),                        /* procedural comment */
  package       varchar2(128),                         /* procedural package */
  pkg_schema    varchar2(128),                             /* package schema */
  class         number,                                             /* class */
  prepost       number,                        /* 0: preaction, 1:postaction */
  plsql         ku$_procobj_lines      /* PL/SQL code for procedural objects */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCACT_INSTANCE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCACT_INSTANCE_TBL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCACT_INSTANCE_TBL_T" force as
 table OF (sys.ku$_procact_instance_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCACT_INSTANCE_TBL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCACT_SCHEMA_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCACT_SCHEMA_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  user_name     varchar2(128),                                  /* user name */
  tag           varchar2(128),                             /* procedural tag */
  cmnt          varchar2(2000),                        /* procedural comment */
  package       varchar2(128),                         /* procedural package */
  schema        varchar2(128),                           /* procedual schema */
  level_num     number,                                             /* level */
  class         number,                                             /* class */
  prepost       number,                         /* 0:preaction, 1:postaction */
  plsql         ku$_procobj_lines      /* PL/SQL code for procedural objects */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCACT_SCHEMA_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCACT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCACT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  tag           varchar2(128),                             /* procedural tag */
  cmnt          varchar2(2000),                        /* procedural comment */
  package       varchar2(128),                         /* procedural package */
  schema        varchar2(128),                             /* package schema */
  level_num     number,                                             /* level */
  class         number,                                             /* class */
  prepost       number,                         /* 0:preaction, 1:postaction */
  plsql         ku$_procobj_lines      /* PL/SQL code for procedural objects */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCACT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCC_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCC_T" force as object
( obj_num        number,                 /* spec/body object number */
  procedure_num   number,                  /* procedure# or position */
  entrypoint_num number)                 /* entrypoint table entry# */
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCC_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCDEPOBJA_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCDEPOBJA_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                                     /* object number */
  base_obj      ku$_schemaobj_t,                            /* base object */
  class         number,                                             /* class */
  prepost       number,                         /* 0:preaction, 1:postaction */
  type_num      number,                                              /* type */
  level_num     number,                                             /* level */
  tag           varchar2(128),                                        /* tag */
  cmnt          varchar2(2000),                                   /* comment */
  package       varchar2(128),                                    /* package */
  pkg_schema    varchar2(128),                             /* package schema */
  anc_obj       ku$_schemaobj_t,                      /* ancestor schema obj */
  plsql         ku$_procobj_lines      /* PL/SQL code for procedural objects */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCDEPOBJA_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCDEPOBJG_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCDEPOBJG_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                                     /* object number */
  base_obj      ku$_schemaobj_t,                            /* base object */
  class         number,                                             /* class */
  prepost       number,                         /* 0:preaction, 1:postaction */
  type_num      number,                                              /* type */
  level_num     number,                                             /* level */
  tag           varchar2(128),                                        /* tag */
  cmnt          varchar2(2000),                                   /* comment */
  package       varchar2(128),                                    /* package */
  pkg_schema    varchar2(128),                             /* package schema */
  anc_obj       ku$_schemaobj_t,                      /* ancestor schema obj */
  plsql         ku$_procobj_lines      /* PL/SQL code for procedural objects */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCDEPOBJG_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCDEPOBJ_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCDEPOBJ_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                                     /* object number */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  class         number,                                             /* class */
  prepost       number,                         /* 0:preaction, 1:postaction */
  type_num      number,                                              /* type */
  level_num     number,                                             /* level */
  tag           varchar2(128),                                        /* tag */
  cmnt          varchar2(2000),                                   /* comment */
  package       varchar2(128),                                    /* package */
  pkg_schema    varchar2(128),                             /* package schema */
  base_obj_num  number,                                /* base object number */
  base_obj      ku$_schemaobj_t,                          /* base schema obj */
  plsql         ku$_procobj_lines      /* PL/SQL code for procedural objects */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCDEPOBJ_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCINFO_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCINFO_T" force as object
(
  obj_num       number,
  procedure_num number,
  objerload_num number,
  procedurename varchar2(128),                             /* procedure name */
  properties    number,                              /* procedure properties */
                /* 0x00001 =     1 = HIDDEN (internally generated) procedure */
                /* 0x00002 =     2 = C implementation (in spec)              */
                /* 0x00004 =     4 = Java implementation (in spec)           */
                /* 0x00008 =     8 = Aggregate function                      */
                /* 0x00010 =    16 = Pipelined function                      */
                /* 0x00020 =    32 = Parallel enabled                        */
                /* 0x00040 =    64 = Retrun Self as result (SQLJ)            */
                /* 0x00080 =   128 = Constructor function (SQLJ)             */
                /* 0x00100 =   256 = deterministic                           */
                /* 0x00200 =   512 = Pipelined func; interface impl          */
                /* 0x00400 =  1024 = Function with invokers rights           */
                /* 0x00800 =  2048 = Func with partitioned argument(s)       */
                /* 0x01000 =  4096 = Func with clustered argument(s)         */
                /* 0x02000 =  8192 = Func with ordered i/p argument(s)       */
                /* 0x04000 =  16384 = Partitioned arg: Hash partitioning     */
                /* 0x08000 = 32768 = Partitioned arg: Range partitioning     */
                /* 0x10000 = 65536 = Partitioned using any partitioning      */
  /* The following field is relevant only for aggregate and pipelined        */
  /*  functions that are implemented using an implementation type            */
  itypeobj_num  number,                 /* implementation type object number */
  spare1        number,
  spare2        number,
  spare3        number,
  spare4        number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCINFO_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCJAVA_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCJAVA_T" force as object
( obj_num       number,                 /* spec/body object number */
  procedure_num number,                  /* procedure# or position */
  ownername     varchar2(128),           /* class owner name */
  ownerlength   number,              /* length of class owner name */
  usersignature varchar2(4000),              /* User signature for java */
  usersiglen    number,                /* Length of user signature for java */
  classname     varchar2(4000),           /* method class name */
  classlength   number,             /* length of method class name */
  methodname    varchar2(4000),            /* java method name */
  methodlength  number,              /* length of java method name */
  flags         varchar2(4000),              /* internal flags */
  flagslength   number,                /* length of internal flags */
  cookiesize    number)                                      /* cookie size */
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCJAVA_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCOBJACT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCOBJACT_T" force as object
(
  package       varchar2(128),                    /* procedural package name */
  schema        varchar2(128)                              /* package schema */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCOBJACT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCOBJ_AUDIT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCOBJ_AUDIT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                              /* schema object number */
  base_obj      ku$_schemaobj_t,                            /* schema object */
  class         number,                      /* 1: sys, 2:schema, 3:instance */
  prepost       number,                          /* 0:praction, 1:postaction */
  type_num      number,                                           /* type id */
  level_num     number,                                             /* level */
  tag           varchar2(128),                             /* procedural tag */
  cmnt          varchar2(2000),                        /* procedural comment */
  package       varchar2(128),                         /* procedural package */
  pkg_schema    varchar2(128),                             /* package schema */
  plsql         ku$_procobj_lines      /* PL/SQL code for procedural objects */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCOBJ_AUDIT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCOBJ_GRANT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCOBJ_GRANT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                              /* schema object number */
  base_obj      ku$_schemaobj_t,                            /* schema object */
  class         number,                         /* 1:sys,2:schema,3:instance */
  prepost       number,                         /* 0:preaction, 1:postaction */
  type_num      number,                                           /* type id */
  level_num     number,                                             /* level */
  tag           varchar2(128),                             /* procedural tag */
  cmnt          varchar2(2000),                        /* procedural comment */
  package       varchar2(128),                         /* procedural package */
  pkg_schema    varchar2(128),                             /* package schema */
  plsql         ku$_procobj_lines      /* PL/SQL code for procedural objects */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCOBJ_GRANT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCOBJ_LINE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCOBJ_LINE" FORCE AS OBJECT
        (       grantor         VARCHAR2(128),
                locs            sys.ku$_procobj_locs )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_PROCOBJ_LINE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCOBJ_LINES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCOBJ_LINES" FORCE
AS TABLE OF (sys.ku$_procobj_line)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_PROCOBJ_LINES" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCOBJ_LINES_TAB
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCOBJ_LINES_TAB" FORCE
AS TABLE OF (sys.ku$_procobj_lines)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_PROCOBJ_LINES_TAB" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCOBJ_LOC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCOBJ_LOC" FORCE AS OBJECT
        (       newblock        NUMBER,
                line_of_code    VARCHAR2(32767) )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_PROCOBJ_LOC" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCOBJ_LOCS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCOBJ_LOCS" FORCE
AS TABLE OF (sys.ku$_procobj_loc)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_PROCOBJ_LOCS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROC_OBJNUM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROC_OBJNUM_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                     /* object number */
  type_num      number,                                       /* type number */
  schema_obj    ku$_schemaobj_t                             /* schema object */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROC_OBJNUM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCOBJ_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCOBJ_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                              /* schema object number */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  class         number,                         /* 1:sys,2:schema,3:instance */
  prepost       number,                         /* 0:preaction, 1:postaction */
  type_num      number,                                           /* type id */
  level_num     number,                                             /* level */
  tag           varchar2(128),                             /* procedural tag */
  cmnt          varchar2(2000),                        /* procedural comment */
  package       varchar2(128),                         /* procedural package */
  pkg_schema    varchar2(128),                             /* package schema */
  plsql         ku$_procobj_lines      /* PL/SQL code for procedural objects */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCOBJ_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROCPLSQL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROCPLSQL_T" force as object
( obj_num          number,                 /* spec/body object number */
  procedure_num    number,                  /* procedure# or position */
  entrypoint_num   number)                 /* entrypoint table entry# */
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROCPLSQL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROC_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROC_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                     /* object number */
  type_num      number,                                       /* type number */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  source_lines  ku$_source_list_t                           /* source lines */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROC_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROFILE_ATTR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROFILE_ATTR_T" force as object
(
  profile_id    number,                                       /* profile id  */
  resource_num  number,                                        /* resource id*/
  resname       varchar2(128),                              /* resource name */
  type_num              number,                                      /* type */
  limit_num             number                                      /* limit */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROFILE_ATTR_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROFILE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROFILE_LIST_T" force
as table of (ku$_profile_attr_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROFILE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROFILE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROFILE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  profile_id    number,                                       /* profile id  */
  profile_name  varchar2(128),                               /* profile name */
  pass_func_name varchar2(128),                  /* password verify function */
  profile_list  ku$_profile_list_t                     /* profile attributes */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROFILE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROXY_ROLE_ITEM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROXY_ROLE_ITEM_T" force as object
(
  role_id       number,                                           /* role id */
  client        varchar2(128),                                /* client name */
  proxy         varchar2(128),                                 /* proxy name */
  role          varchar2(128)                                /* role context */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROXY_ROLE_ITEM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROXY_ROLE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROXY_ROLE_LIST_T" force
as TABLE of (ku$_proxy_role_item_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROXY_ROLE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PROXY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PROXY_T" force as object
(
  user_id       number,                                           /* role id */
  client_name   varchar2(128),                                /* client name */
  proxy_name    varchar2(128),                                 /* proxy name */
  flags         number,               /* Mask flags of associated with entry */
  cred_type     number,                /* Type of credential passed by proxy */
  proxy_role_list  ku$_proxy_role_list_t                  /* proxy role list */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PROXY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PSW_HIST_ITEM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PSW_HIST_ITEM_T" force as object
(
  user_id       number,                    /* pws history user object number */
  uname         varchar2(128),                                  /* user name */
  password      varchar2(4000),                                  /* password */
  password_date varchar2(19)                                   /* start date */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PSW_HIST_ITEM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PSW_HIST_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PSW_HIST_LIST_T" force
as TABLE of (ku$_psw_hist_item_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PSW_HIST_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PSW_HIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PSW_HIST_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  user_id       number,
  name          varchar2(128),
  hist_list     ku$_psw_hist_list_t                     /* password history */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PSW_HIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_PTAB_STATS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_PTAB_STATS_LIST_T" 
 force as table of (ku$_tab_ptab_stats_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_PTAB_STATS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_QTAB_STORAGE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_QTAB_STORAGE_T" force as object
(
  obj_num       number,                         /* queue table object number */
  property      number,
  ts_num        number,
  ts_name       varchar2(128),
  pct_free      number,
  pct_used      number,
  initrans      number,
  maxtrans      number,
  flags         number,                                     /* Row movement */
  storage       ku$_storage_t,                              /* Storage info */
  col_list      ku$_tab_column_list_t,                   /* list of columns */
  clus_tab      ku$_tabcluster_t                        /* Table clustering */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_QTAB_STORAGE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_QTRANS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_QTRANS_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  transformation_id    number,                          /* transformation id */
  schema_name          varchar2(128),                              /* schema */
  transform_name       varchar2(128),                 /* transformation name */
  from_obj             ku$_schemaobj_t,                   /* from obj schema */
  to_obj               ku$_schemaobj_t,                     /* to obj schema */
  attribute_num        number,
  sql_expression       clob
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_QTRANS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_QUEUES_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_QUEUES_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                         /* queue table object number */
  qid           number,                            /* queue obj number */
  schema_obj    ku$_schemaobj_t,                      /* queue object schema */
  base_obj      ku$_schemaobj_t,                   /* queue table obj schema */
  tflags        number,                            /* queue table properties */
  usage         number,                                /* usage of the queue */
  max_retries   number,                         /* maximum number of retries */
  retry_delay   number,                      /* delay before retrying (secs) */
  enqueue_enabled number,                                 /*  queue enabled? */
  properties    number,                      /*  various properties of queue */
  retention     number,                       /* retention time (in seconds) */
  queue_comment  varchar2(2000)                              /* user comment */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_QUEUES_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_QUEUE_TABLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_QUEUE_TABLE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                         /* queue table object number */
  schema_obj    ku$_schemaobj_t,                    /* object of queue table */
  storage_clause ku$_qtab_storage_t,                  /* storage_clause info */
  udata_type    number,                                     /* userdata type */
  object_type   varchar2(257),                         /* userdata type name */
  sort_cols     number,                            /* sort order for dequeue */
  flags         number,                            /* queue table properties */
  table_comment         varchar2(2000),                      /* user comment */
  primary_instance      number,                /*  primary owner instance-id */
  secondary_instance    number,               /* secondary owner instance-id */
  owner_instance        number                  /* current owner instance-id */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_QUEUE_TABLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RADM_FPTM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RADM_FPTM_T" force as object
(
  vers_major   char(1),                               /* UDT major version # */
  vers_minor   char(1),                               /* UDT minor version # */
  numbercol    number,                                             /* number */
  binfloatcol  binary_float,                                 /* binary float */
  bindoublecol binary_double,                               /* binary double */
  charcol      char(1),                              /* fixed-size character */
  varcharcol   varchar2(1),                       /* variable-size character */
  ncharcol     nchar(1),                    /* fixed-size national character */
  nvarcharcol  nvarchar2(1),             /* variable-size national character */
  datecol      date,                                                 /* date */
  ts_col       timestamp,                                       /* timestamp */
  tswtz_col    timestamp with time zone,         /* timestamp with time zone */
  fpver        number               /* version of default fixed point values */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RADM_FPTM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RADM_MC_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RADM_MC_LIST_T" force as table of (ku$_radm_mc_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RADM_MC_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RADM_MC_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RADM_MC_T" force as object
(
  vers_major  char(1),                                /* UDT major version # */
  vers_minor  char(1),                                /* UDT minor version # */
  obj_num     number,                      /* object number of table or view */
  intcol_num  number,                                       /* column number */
  col_name    varchar2(128),                                  /* column name */
  pname       varchar2(128),                                  /* policy name */
  mfunc       number,                   /* RADM masking function (KZRADMMF_) */
  regexp_patt varchar2(512),              /* Data Redaction reg expr pattern */
  regexp_repl Varchar2(4000),      /* Data Redaction reg expr replace string */
  regexp_posi number,                    /* Data Redaction reg expr position */
  regexp_occu number,                  /* Data Redaction reg expr occurrence */
  regexp_matc varchar2(10),                 /* Data Redaction reg expr match */
  mparams     varchar2(1000),                     /* RADM masking parameters */
  pe_name     varchar2(128)                   /* RADM policy expression name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RADM_MC_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RADM_POLICY_EXPR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RADM_POLICY_EXPR_T" force as object
(
  vers_major   char(1),                               /* UDT major version # */
  vers_minor   char(1),                               /* UDT minor version # */
  obj_num      number,                           /* expression object number */
  def_onum     number,            /* default policy expression object number */
  ename        varchar2(128),                             /* expression name */
  expr         varchar2(4000),                                 /* expression */
  version      varchar2(30),               /* version that created expression*/
  descr        varchar2(4000),                                /* description */
  compat       varchar2(30),         /* Value of COMPATIBLE at creation time */
  spare1       varchar2(1000),
  spare2       date,
  spare3       timestamp,
  spare4       number,
  spare5       number,
  spare6       number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RADM_POLICY_EXPR_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RADM_POLICY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RADM_POLICY_T" force as object
(
  vers_major   char(1),                               /* UDT major version # */
  vers_minor   char(1),                               /* UDT minor version # */
  base_obj_num number,                               /* parent object number */
  base_obj     ku$_schemaobj_t,                             /* schema object */
  pname        varchar2(128),                                 /* policy name */
  pexpr        varchar2(4000),                          /* policy expression */
  enable_flag  number,  /* whether the policy is enabled (1) or disabled (0) */
  mc_list      ku$_radm_mc_list_t                    /* column specific data */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RADM_POLICY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_REFCOL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_REFCOL_LIST_T" 
 force as table of (ku$_refcol_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_REFCOL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_REFCOL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_REFCOL_T" force as object
(
  colname         varchar2(128),                 /* master table column name */
  oldest          varchar2(21),  /* maximum age of information in the column */
  flag            number                          /* column meta information */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_REFCOL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_REF_CONSTRAINT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_REF_CONSTRAINT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  con_num       number,                                 /* constraint number */
  owner_name    varchar2(128),                        /* owner of constraint */
  name          varchar2(128),                         /* name of constraint */
  flags         number,                                             /* flags */
  base_obj_num  number,                                     /* base object # */
  base_obj      ku$_schemaobj_t,            /* base table/view schema object */
  con2          ku$_constraint2_t                       /* type 2 constraint */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_REF_CONSTRAINT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_REFGROUP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_REFGROUP_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  refname       varchar2(128),                      /* name of refresh group */
  owner_num     number,                                 /* owner user number */
  refowner      varchar2(128),                     /* owner of refresh group */
  refgroup      number,                           /* number of refresh group */
  ref_make_user varchar2(2000),     /* executing string of dbms_refresh.make */
  ref_make_dba  varchar2(2000),    /* executing string of dbms_irefresh.make */
  ref_child     ku$_add_snap_list_t              /* refresh group child info */
                                          /* dbms_refresh.add execute string */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_REFGROUP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RESOCOST_ITEM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RESOCOST_ITEM_T" force as object
(
  resource_id       number,                                   /* resource id */
  resource_name     varchar2(128),                               /* resource */
  resource_type     number,                                          /* type */
  unit_cost         number                                      /* unit cost */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RESOCOST_ITEM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RESOCOST_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RESOCOST_LIST_T" force
as TABLE of (ku$_resocost_item_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RESOCOST_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RESOCOST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RESOCOST_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  cost_list     ku$_resocost_list_t                   /* resource cost info */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RESOCOST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RLS_ASSOCIATIONS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RLS_ASSOCIATIONS_T" force as object
(
  obj_num       number,                              /* parent object number */
  gname         varchar2(128),                       /* name of policy group */
  name          varchar2(128),                             /* name of policy */
  namespace     varchar2(128),                                  /* namespace */
  attribute     varchar2(128)                                   /* attribute */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RLS_ASSOCIATIONS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RLS_ASSOC_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RLS_ASSOC_LIST_T" 
 force as table of (ku$_rls_associations_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_RLS_ASSOC_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RLS_CONTEXT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RLS_CONTEXT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  base_obj      ku$_schemaobj_t,                       /* base schema object */
  obj_num       number,                              /* parent object number */
  name          varchar2(128),                                  /* namespace */
  attr          varchar2(128)                                   /* attribute */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RLS_CONTEXT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RLS_GROUP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RLS_GROUP_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  base_obj      ku$_schemaobj_t,                       /* base schema object */
  obj_num       number,                              /* parent object number */
  name          varchar2(128)                        /* name of policy group */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RLS_GROUP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RLS_POLICY_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RLS_POLICY_LIST_T" force
as table of (ku$_rls_policy_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_RLS_POLICY_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RLS_POLICY_OBJNUM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RLS_POLICY_OBJNUM_T" force as object
(
  obj_num       number,                              /* parent object number */
  name          varchar2(128),                             /* name of policy */
  pfschma       varchar2(128),             /* name of policy function schema */
  ppname        varchar2(128),                     /* name of policy package */
  pfname        varchar2(128),               /* name of policy function name */
  base_obj      ku$_schemaobj_t                        /* base schema object */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RLS_POLICY_OBJNUM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RLS_POLICY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RLS_POLICY_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  base_obj      ku$_schemaobj_t,                       /* base schema object */
  obj_num       number,                              /* parent object number */
  gname         varchar2(128),                       /* name of policy group */
  name          varchar2(128),                             /* name of policy */
  stmt_type     number,                        /* applicable statement type: */
  check_opt     number,                                 /* with check option */
  enable_flag   number,                         /* 0 = disabled, 1 = enabled */
  pfschma       varchar2(128),                  /* schema of policy function */
  ppname        varchar2(128),                        /* policy package name */
  pfname        varchar2(128),                       /* policy function name */
  policy_type   varchar2(35),                                 /* policy type */
  long_pred     number,                           /* 32K long predicate size */
  rel_cols      ku$_rls_sec_rel_col_list_t,     /* security relevant columns */
  rel_cols_opt  number,                  /* security relevant columns option */
  rls_assoc_list ku$_rls_assoc_list_t              /* attribute associations */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RLS_POLICY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RLS_SEC_REL_COL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RLS_SEC_REL_COL_LIST_T" 
 force as table of (ku$_rls_sec_rel_col_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_RLS_SEC_REL_COL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RLS_SEC_REL_COL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RLS_SEC_REL_COL_T" force as object
(
  sec_rel_col varchar2(128)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RLS_SEC_REL_COL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RMGR_CONSUMER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RMGR_CONSUMER_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,
  schema_obj    ku$_schemaobj_t,
  cpu_method    varchar2(128),     /* CPU resource alloc method for the plan */
  description   varchar2(2000),        /* Text comment on the consumer group */
  status        varchar2(128),                          /* pending or active */
  mandatory     number                                      /* 1:yes , 0: no */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RMGR_CONSUMER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RMGR_INIT_CONSUMER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RMGR_INIT_CONSUMER_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  user_num      number,
  grantee       varchar2(128),
  granted_group varchar2(128),/*consumer groups to which the user can switch */
  grant_option  number,                  /* mod(a.option$) =1 yes, others no */
                       /* whether the user can grant the privilege to others */
  defschclass   VARCHAR2(128)                               /* initial group */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RMGR_INIT_CONSUMER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RMGR_PLAN_DIRECT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RMGR_PLAN_DIRECT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,
  base_obj      ku$_schemaobj_t,
  group_or_subplan  varchar2(128),   /* Name of the consumer group or sub-plan
                                                                 referred to */
  type          number,                     /* 1: plan , 0: GROUP_OR_SUBPLAN */
  cpu_p1        number,           /* 1st parameter for CPU allocation method */
  cpu_p2        number,           /* 2nd parameter for CPU allocation method */
  cpu_p3        number,           /* 3rd parameter for CPU allocation method */
  cpu_p4        number,           /* 4th parameter for CPU allocation method */
  cpu_p5        number,           /* 5th parameter for CPU allocation method */
  cpu_p6        number,           /* 6th parameter for CPU allocation method */
  cpu_p7        number,           /* 7th parameter for CPU allocation method */
  cpu_p8        number,           /* 8th parameter for CPU allocation method */
  active_sess_pool_p1   number,       /* 1st parameter for max active sessions
                                                    target allocation method */
  queueing_p1           number,     /* 1st parameter for the queueing method */
  parallel_degree_limit_p1 number,   /* 1st parameter for the parallel degree
                                            limit resource allocation method */
  switch_group          varchar2(128),  /* group to switch to once switch time
                                                                  is reached */
  switch_time           number,       /* switch time limit for execution within
                                                                     a group */
  switch_estimate       number,   /* use execution estimate to determine
                                                                      group? */
  max_est_exec_time     number,      /* use of max. estimated execution time */
  undo_pool             number,  /* max. undo allocation for consumer groups */
  comments              varchar(2000), /* Text comment on the plan directive */
  status                varchar2(128),                /* PENDING  or ACTIVE  */
  mandatory             number                               /* 1 yes, 0 no  */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RMGR_PLAN_DIRECT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_RMGR_PLAN_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_RMGR_PLAN_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,
  schema_obj    ku$_schemaobj_t,
  cpu_method    varchar2(128),/* CPU resource allocation method for the plan */
  mast_method   varchar2(128),    /* maximum active sessions target resource */
                                  /* allocation method for the plan          */
  pdl_method    varchar2(128),             /* parallel degree limit resource */
                                           /* allocation method for the plan */
  num_plan_directives   number,    /* Number of plan directives for the plan */
  description   varchar2(2000),                  /* Text comment on the plan */
  que_method    varchar2(128),                 /* queueing method for groups */
  status        varchar2(128),                          /* PENDING or ACTIVE */
  mandatory     number                      /* Whether the plan is mandatory */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_RMGR_PLAN_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ROGRANT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ROGRANT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  grantee_id    number,                                         /* user id  */
  grantee       varchar2(128),                                   /* grantee */
  role          varchar2(128),                                      /* role */
  role_id       number,                                          /* role id */
  admin         number,                                    /*  admin option */
  sequence      number,                            /* unique grant sequence */
  user_spare1   number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ROGRANT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ROLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ROLE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  user_id       number,                                          /* role id  */
  name          varchar2(128),                               /* name of role */
  type_num      number ,                              /* 0 = role, 1 = user */
  password      varchar2(128),                                  /*  password */
  ctime         varchar2(19),                  /* user account creation time */
  ptime         varchar2(19),                        /* password change time */
  exptime       varchar2(19),             /* actual password expiration time */
  ltime         varchar2(19),                 /* time when account is locked */
  profnum       number,                                 /* resource profile# */
  user_audit        varchar2(38),                     /* user audit options */
  defrole       number,                           /* default role indicator: */
  defgrp_num       number,                             /* default undo group */
  defgrp_seq_num   number,             /* global sequence number for the grp */
  astatus       number,                             /* status of the account */
  lcount        number,                    /* count of failed login attempts */
  ext_username  varchar2(4000),                         /* external username */
  spare1        number,
  spare2        number,
  spare3        number,
  spare4        varchar2(1000),
  spare5        varchar2(1000),
  spare6        varchar2(19),
  schema        varchar2(128),                                     /* schema */
  package       varchar2(128)                                     /* package */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ROLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_ROLLBACK_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_ROLLBACK_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  us_num        number,                               /* undo segment number */
  name          varchar2(128),                      /* rollback segment name */
  user_num      number,                /* Owner: 0 = SYS(PRIVATE) 1 = PUBLIC */
  optimal       number,                                     /* optimal value */
  iniexts       number,                               /* initial extent size */
  minexts       number,                         /* minimum number of extents */
  maxexts       number,                         /* maximum number of extents */
  extsize       number,                          /* current next extent size */
                                           /* zero for bitmapped tablespaces */
  tablespace    ku$_tablespace_t                   /* tablespace information */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_ROLLBACK_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SCHEMAOBJ_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SCHEMAOBJ_T" force as object
(
  obj_num       number,                                     /* object number */
  dataobj_num   number,                          /* data layer object number */
  owner_num     number,                                 /* owner user number */
  owner_name    varchar2(128),                                 /* owner name */
  name          varchar2(128),                                /* object name */
  namespace     number,                               /* namespace of object */
  subname       varchar2(128),                    /* subordinate to the name */
  type_num      number,                                       /* object type */
  type_name     varchar2(128),                           /* object type name */
  ctime         varchar2(19),                        /* object creation time */
  mtime         varchar2(19),                       /* DDL modification time */
  stime         varchar2(19),           /* specification timestamp (version) */
  status        number,                                  /* status of object */
  remoteowner   varchar2(128),          /* remote owner name (remote object) */
  linkname      varchar2(128),                  /* link name (remote object) */
  flags         number,                                             /* flags */
    /* flag definitions from kqd.h */
    /* KQDOBFDOM  0x01                                                       */
    /* KQDOBTMP   0x02                                   object is temporary */
    /* KQDOBFGEN  0x04                            object is system generated */
    /* KQDOBFUNB  0x08               object is unbound (has invokers rights) */
    /* KQDOBSCO   0x10                                    secondary object - */
                                   /* currently only used for domain indexes */
    /* KQDOBIMT   0x20                                  in-memory temp table */
    /* KQDOBFPKJ  0x40                           permanently kept java class */
    /* KQDOBRBO   0x80                                 Object in Recycle Bin */
    /* KQDOBSYP   0x100                             synonym has VPD policies */
    /* KQDOBGRP   0x200                               synonym has VPD groups */
    /* KQDOBCVX   0x400                              synonym has VPD context */
    /* KQDOBCRD   0x800                            object is cursor duration */
/* NOTE: Flags 0x1000 - 0xf000  are reserved for object invalidation reasons */
    /* KQDOBFITE  0x1000                object's dependency type has evolved */
    /* KQDOBDFV   0x2000                             Disable fast validation */

                                    /*Using these two flags for misc purposes*/
    /* KQDOBNTP   0x4000                   object is a nested table parition */
    /* KQDOBOBERR 0x8000                            object has objerror$ row */

    /* KQDOBF_MD_LINK  0x10000     Metadata Link or a Metadata-Linked Object */
    /* KQDOBF_OBJ_LINK 0x20000         Object Link or a Object-Linked Object */
    /* KQDOBF_COMMON_OBJECT (KQDOBF_MD_LINK | KQDOBF_OBJ_LINK)

    /* KQDOBLID   0x40000                      object uses a long identifier */
    /* KQDOBFASTTABUPG 0x80000                allow fast alter table upgrade */
    /* KQDOBNE    0x100000             object marked not editionable by user */
    /* KQDOSIVK   0x200000                special invoker rights: see kkxrca */
    /* KQDOBORCL  0x400000                      is an Oracle-supplied object */
    /* KQDONFD    0x800000                    no fine-grained dep for object */
    /* KQDOBCMM  0x1000000                            common object mismatch */
    /* KQDOBLMC  0x2000000      use local MCode. only applies to common objs */
    /* KQDOBLDI  0x4000000      use local Diana. only applies to common objs */
    /* KQDOBFED  0x8000000                                 federation object */
    /* KQDOBDCL  0x10000000                   created with DEFAULT COLLATION */
    /* KQDOBOAS  0x20000000                                    on all shards */
    /* KQDOBSHD  0x40000000                                          sharded */
    /* KQDOBREF  0x80000000                                        reference */
  flags2        number,                                             /* flags */
    /* KQDOBF_ED_LINK 0x0100000000                        Extended Data Link */
    /* KQDOBBIN       0x0200000000             has binary collation behavior */
    /* KQDOBDLR       0x0400000000   Disable Log. Replication at table level */
  oid           raw(16),        /* OID for typed table, typed view, and type */
  spare1        number,
  spare2        number,
  spare3        number,                              /* 11.2 original owner# */
  spare4        varchar2(1000),
  spare5        varchar2(1000),
  spare6        varchar2(19),
  owner_name2   varchar2(128),                   /* 11.2 original owner_name */
/* columns added in 12.1 */
  signature     raw(16),
  spare7        number,
  spare8        number,
  spare9        number,
/* columns added in 12.2 */
  dflcollname   varchar2(128),            /* unit-level default collation id */
  spare10       number,
  spare11       number,
  spare12       varchar2(1000),
  spare13       varchar2(1000),
  spare14       timestamp
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SCHEMAOBJ_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SEQUENCE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SEQUENCE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  obj_num       number,                            /* sequence object number */
  schema_obj    ku$_schemaobj_t,                   /* sequence schema object */
  incre         number,                     /* the sequence number increment */
  minvalue      varchar2(28),                   /* minimum value of sequence */
  maxvalue      varchar2(28),                   /* maximum value of sequence */
  cycle         number,                               /* 0 = FALSE, 1 = TRUE */
  seq_order     number,                               /* 0 = FALSE, 1 = TRUE */
  cache         number,                          /* how many to cache in sga */
  highwater     varchar2(29),                        /* disk high water mark */
  seq_audit     varchar2(38),                            /* auditing options */
  flags         number                               /* 0x08 LOGICAL STANDBY */
                                                           /* 0x16 [NO]SCALE */
                                       /* 0x2048 [NO]EXTEND (only for SCALE) */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SEQUENCE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SGI_COL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SGI_COL_LIST_T" 
 force as table of (ku$_sgi_col_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SGI_COL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SGI_COL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SGI_COL_T" force as object
(
  obj_num           number,                 -- index object number
  con_num           number,                 -- constraint number if constraint
  name              varchar2(128)           -- column name
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SGI_COL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SIMPLE_COL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SIMPLE_COL_LIST_T" 
 force as table of (ku$_simple_col_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SIMPLE_COL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SIMPLE_COL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SIMPLE_COL_T" force as object
(
  obj_num       number,                      /* object number of base object */
  col_num       number,                          /* column number as created */
  intcol_num    number,                            /* internal column number */
  segcol_num    number,                          /* column number in segment */
  property      number,                     /* column properties (bit flags) */
  property2     number,                /* more column properties (bit flags) */
                   /* the column property bits are defined in qcdl.h        */
                   /* with names beginning "KQLDCOP_" and "KQLDCOP2_"       */
                   /* e.g., KQLDCOP_ATT, KQLDCOP2_ILM   */
  name          varchar2(128),                             /* name of column */
  attrname      varchar2(4000),/* name of type attr. column: null if != type */
  type_num      number,                               /* data type of column */
  deflength     number,    /* virtual column text length (for func. indexes) */
  default_val   varchar2(4000),            /* virtual column expression text */
  default_valc  clob,                      /* virtual column expression text */
  col_expr      sys.xmltype,           /* parsed functional index expression */
  org_colname   varchar2(128)        /* Original partitioned column name for
                                                           partitioned table */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SIMPLE_COL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SIMPLE_TYPE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SIMPLE_TYPE_T" force as object
(
  toid          raw(16),                                             /* toid */
  version_num   number,                                /* internal version # */
  version       varchar2(128),                        /* UDT minor version # */
  type_num      number,                      /* type encoding (see sqldef.h) */
  properties    number,                                   /* type properties */
  attribute_num number,                              /* number of attributes */
  local_attrs   number,                        /* number of local attributes */
  method_num    number,                                 /* number of methods */
  hidmethod_num number,                         /* number of hiddend methods */
  typeid        raw(16), /* short typeid value (for non final and sub types) */
  roottoid      raw(16),          /* TOID of root type (null if not subtype) */
  hashcode      raw(17),                                 /* Version hashcode */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  type_name     varchar2(128)                                   /* type name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SIMPLE_TYPE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SLOG_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SLOG_LIST_T" 
 force as table of (ku$_slog_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SLOG_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SLOG_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SLOG_T" force as object
(
  snapid          integer,                        /* identifies V8 snapshots */
  snaptime        varchar2(21),                       /* when last refreshed */
  tscn            number                                 /* last refresh scn */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SLOG_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SOURCE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SOURCE_LIST_T" FORCE AS TABLE OF (sys.ku$_source_t)
NOT PERSISTABLE;

/

  GRANT EXECUTE ON "SYS"."KU$_SOURCE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SOURCE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SOURCE_T" FORCE AS OBJECT
(
  obj_num       number,                                     /* object number */
  line          number,                                       /* line number */
  --
  -- The next 2 attributes are used by XSL scripts to edit the source line.
  -- E.g., in a type definition, the line might be 'type foobar as object' --
  -- 'foobar' is the object name.  Since the xsl script has already
  -- generated CREATE OR REPLACE TYPE FOOBAR, it uses 'post_name_off'
  -- to extract the useful part of the line.  If the source were
  -- create type /* this is a comment
  --  that continues on the next line */
  --  foobar
  -- which is rare but legal, the xsl script knows from 'pre_name' which
  -- lines are prior to the name and can safely be discarded.
  -- See bug 2844111 and rdbms/xml/xsl/kusource.xsl.
  pre_name      number,    /* 1 = this line is prior to line containing name */
  post_name_off number,   /* 1-based offset of 1st non-space char after name */
  post_keyw     number,   /* the offset of post keyword */
  pre_name_len  number,   /* length between keyword and name */
  --
  -- The next attribute is needed for appending the SQL terminator.
  -- If the last line ends in a newline, we simply add the "/";
  -- otherwise, we must insert a newline before the "/".
  -- This attribute is NULL for all but the last line; for the last
  -- line it is "Y" if the line ends in a newline, "N" otherwise.
  trailing_nl   char(1),
  -- The next field is part of the fix for bug #9223960.  Since the alter
  -- type statement will execute separately from the create type statement,
  -- the 'alter type name' part of the statement is replaced with the following
  -- 'alter type schema.typename' followed by the rest of the statement.
  post_atname_off number,        /* 1st non-space char after alter type name */
  -- Improve fix for bug #9223960 (bug #17952171) requires two more fields:
  atname_off    number,           /* offset of 1st char of alter type 'name' */
  new_version   number,   /* 1: if 1st line from new version of type, else 0 */
  source        varchar2(4000)                                /* source line */
)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_SOURCE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SPIND_STATS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SPIND_STATS_LIST_T" 
 force as table of (ku$_spind_stats_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SPIND_STATS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SPIND_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SPIND_STATS_T" force as object
(
  obj_num           number,
  partname          varchar2(128),
  subpartname       varchar2(128),
  bobj_num          number,
  rowcnt            number,
  leafcnt           number,
  distkey           number,
  lblkkey           number,
  dblkkey           number,
  clufac            number,
  blevel            number,
  ind_flags         number,
  obj_flags         number,
  sample_size       number,
  analyzetime       varchar2(19),       -- timestamp when last analyzed
  cache_info        ku$_cached_stats_t              -- cached stats information
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SPIND_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_STATUS1010
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_STATUS1010" FORCE IS OBJECT
        (
                mask            NUMBER,           -- Status types present
                wip             ku$_LogEntry1010, -- Work in progress
                job_description ku$_JobDesc1010,  -- Complete job description
                job_status      ku$_JobStatus1010,-- Detailed job status
                error           ku$_LogEntry1010  -- Multi-level context errors
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_STATUS1010" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_STATUS1020
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_STATUS1020" FORCE IS OBJECT
        (
                mask            NUMBER,           -- Status types present
                wip             ku$_LogEntry1010, -- Work in progress
                job_description ku$_JobDesc1020,  -- Complete job description
                job_status      ku$_JobStatus1020,-- Detailed job status
                error           ku$_LogEntry1010  -- Multi-level context errors
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_STATUS1020" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_STATUS1120
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_STATUS1120" FORCE IS OBJECT
        (
                mask            NUMBER,           -- Status types present
                wip             ku$_LogEntry1010, -- Work in progress
                job_description ku$_JobDesc1020,  -- Complete job description
                job_status      ku$_JobStatus1120,-- Detailed job status
                error           ku$_LogEntry1010  -- Multi-level context errors
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_STATUS1120" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_STATUS1210
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_STATUS1210" FORCE IS OBJECT
        (
                mask            NUMBER,           -- Status types present
                wip             ku$_LogEntry1010, -- Work in progress
                job_description ku$_JobDesc1210,  -- Complete job description
                job_status      ku$_JobStatus1210,-- Detailed job status
                error           ku$_LogEntry1010  -- Multi-level context errors
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_STATUS1210" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_STATUS1220
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_STATUS1220" FORCE IS OBJECT
        (
                mask            NUMBER,           -- Status types present
                wip             ku$_LogEntry1010, -- Work in progress
                job_description ku$_JobDesc1220,  -- Complete job description
                job_status      ku$_JobStatus1220,-- Detailed job status
                error           ku$_LogEntry1010  -- Multi-level context errors
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_STATUS1220" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_STORAGE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_STORAGE_T" force as object
(
  file_num      number,                        /* segment header file number */
  block_num     number,                       /* segment header block number */
  type_num      number,                                      /* segment type */
  ts_num        number,                       /* tablespace for this segment */
  transportable number,       /* 1 if tablspace in transportable set, else 0 */
  blocks        number,                /* blocks allocated to segment so far */
                                           /* zero for bitmapped tablespaces */
  extents       number,               /* extents allocated to segment so far */
  iniexts       number,                               /* initial extent size */
  minexts       number,                         /* minimum number of extents */
  maxexts       number,                         /* maximum number of extents */
  extsize       number,                          /* current next extent size */
                                           /* zero for bitmapped tablespaces */
  extpct        number,                             /* percent size increase */
  user_num      number,                        /* user who owns this segment */
  lists         number,                        /* freelists for this segment */
  groups        number,                  /* freelist groups for this segment */
  bitmapranges  number,                          /* ranges per bit map entry */
  cachehint     number,                                 /* hints for caching */
  scanhint      number,                                /* hints for scanning */
  hwmincr       number,                      /* Amount by which HWM is moved */
  flags         number,                                     /* Segment flags */
  /* These flags are defined in ktscts.h. Significant flags are        */
                   /* #define KTSSEGM_FLAG_COMPRESSED 0x0800    (2048) */
                   /* #define KTSSEGM_FLAG_OLTP  0x1000000  (16777216) */
                   /* #define KTSSEGM_FLAG_ARCH1 0x2000000  (33554432) */
                   /* #define KTSSEGM_FLAG_ARCH2 0x4000000  (67108864) */
                   /* #define KTSSEGM_FLAG_ARCH3 0x8000000 (134217728) */
  flags2        number,        /* Significant high order flags are     */
      /* KTSSEGM_FLAG_CC_NOT_ENABLED 0x1000000000000 (281474976710656) */
                                         /* as flags2: 0x10000 (65536) */
  spare2        number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_STORAGE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_STRMCOL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_STRMCOL_LIST_T" force as table of (ku$_strmcol_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_STRMCOL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_STRMCOL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_STRMCOL_T" force as object
(
  obj_num       number,                      /* object number of base object */
  col_num       number,                          /* column number as created */
  intcol_num    number,                            /* internal column number */
  segcol_num    number,                          /* column number in segment */
  col_sortkey   number,                              /* sort key for columns */
  base_intcol_num number,    /* internal column number of base column, i.e., */
                           /* the intcol# of the first column with this col# */
  base_col_type number, /* base column type: 1 = UDT, 2 = XMLType OR or CSX, */
                        /*                   3 = XMLType as CLOB,  4 = NTB,
                                             0 = other */
  property      number,                     /* column properties (bit flags) */
                /* 0x0400 =    1024 = nested table columns setid             */
            /* 0x00800000 = 8388608 = string column measured in characters   */
  property2     number,                /* more column properties (bit flags) */
  name          varchar2(128),                             /* name of column */
  attrname      varchar2(4000),/* name of type attr. column: null if != type */
  type_num      number,                               /* data type of column */
  length        number,                         /* length of column in bytes */
  precision_num number,                                         /* precision */
  scale         number,                                             /* scale */
  not_null      number,                               /* 0 = nulls permitted */
                                                 /* > 0 = no NULLs permitted */
  charsetid     number,                              /* NLS character set id */
  charsetform   number,
  charlength    number,            /* maximum number of characters in string */
  lob_property  number,                    /* lob$.property if column is lob */
                                /* 0x0200 = LOB data in little endian format */
  typemd        ku$_strmcoltype_t,
  base_col_name varchar2(128),
  attrname2     varchar2(4000)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_STRMCOL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_STRMCOLTYPE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_STRMCOLTYPE_T" force as object
(
  obj_num       number,                               /* obj# of base object */
  col_num       number,                                     /* column number */
  intcol_num    number,                            /* internal column number */
  owner_name    varchar2(128),                                 /* owner name */
  name          varchar2(128),                                /* object name */
  flags         number,                                             /* flags */
                     /* flags to indicate whether column type is ADT, Array, */
                                                      /* REF or Nested table */
                           /* 0x02 - adt column                              */
                           /* 0x04 - nested table column                     */
                           /* 0x08 - varray column                           */
                           /* 0x10 - ref column                              */
                           /* 0x20 - retrieve collection out-of-line         */
                           /* 0x20 - don't strip the null image              */
                           /* 0x40 - don't chop null image                   */
                           /* 0x40 - collection storage specified            */
                           /* 0x80 - column stores an old (8.0) format image */
                          /* 0x100 - data for this column not yet upgraded   */
                          /* 0x200 - ADT column is substitutable             */
                          /* 0x400 - NOT SUBSTITUTABLE specified explicitly  */
                          /* 0x800 - SUBSTITUTABLE specified explicitly      */
                         /* 0x1000 - implicitly not substitutable            */
                         /* 0x2000 - The typeid column stores the toid       */
                         /* 0x4000 - The column is an opaque type column     */
                         /* 0x8000 - nested table name is system generated   */
  opqflags      number,                         /* flags for the opaque type */
                              /* -------------- XMLType flags ---------
                               * 0x0001 (1) -- XMLType stored as object
                               * 0x0002 (2) -- XMLType schema is specified
                               * 0x0004 (4) -- XMLType stored as lob
                               * 0x0008 (8) -- XMLType stores extra column
                               * 0x0020 (32)-- XMLType table is out-of-line
                               * 0x0040 (64)-- XMLType store as binary xml
                               */
  toid          raw(16),                                             /* toid */
  version       number,                      /* internal type version number */
  hashcode      raw(17),                                 /* Version hashcode */
  typidcol_num  number,           /* intcol# of the type discriminant column */
  subtype_list  ku$_strmsubcoltype_list_t,               /* subtype metadata */
  anydata_list  ku$_Unpacked_AnyData_t      /* types in unpacked anydata col */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_STRMCOLTYPE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_STRMSUBCOLTYPE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_STRMSUBCOLTYPE_LIST_T" 
 force as table of (ku$_strmsubcoltype_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_STRMSUBCOLTYPE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_STRMSUBCOLTYPE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_STRMSUBCOLTYPE_T" force as object
(
  obj_num       number,                               /* obj# of base object */
  intcol_num    number,                            /* internal column number */
  owner_name    varchar2(128),                                 /* owner name */
  name          varchar2(128),                                /* object name */
  toid          raw(16),                                             /* toid */
  version       number,                      /* internal type version number */
  hashcode      raw(17),                                 /* Version hashcode */
  typeid        raw(16)  /* short typeid value (for non final and sub types) */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_STRMSUBCOLTYPE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_STRMTABLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_STRMTABLE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  vers_dpapi    number,                           /* direct path API version */
  endianness    number,                 /* 1 = big-endian, 2 = little-endian */
  charset       varchar2(128),                           /* db character set */
  ncharset      varchar2(128),                          /* db ncharacter set */
  dbtimezone    varchar2(64),                          /* database time zone */
  fdo           raw(100),               /* platform Format Descriptor Object */
  obj_num       number,                                              /* obj# */
  owner_name    varchar2(128),                                 /* owner name */
  name          varchar2(128),                                /* object name */
  pname         varchar2(128),                             /* partition name */
  property      number,                                  /* table properties */
  property2     number,                             /* more table properties */
  col_list      ku$_strmcol_list_t                        /* list of columns */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_STRMTABLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SUBCOLTYPE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SUBCOLTYPE_LIST_T" force
as table of (ku$_subcoltype_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SUBCOLTYPE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SUBCOLTYPE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SUBCOLTYPE_T" force as object
(
  obj_num       number,                               /* obj# of base object */
  intcol_num    number,                            /* internal column number */
  toid          raw(16),                                             /* toid */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  version       number,                      /* internal type version number */
  hashcode      raw(17),                                 /* Version hashcode */
  typeid        raw(16), /* short typeid value (for non final and sub types) */
  intcols       number,                        /* number of internal columns */
                                          /* storing the exploded ADT column */
  intcol_nums   raw(2000),            /* list of intcol#s of columns storing */
                          /* the unpacked ADT column; stored in packed form; */
                                          /* each intcol# is stored as a ub2 */
  flags         number)                                            /* flags */
                          /* 0x01 - This type was stated in the IS OF clause */
                          /* 0x02 - This type has ONLY in the IS OF clause   */
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SUBCOLTYPE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SUBMITRESULT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SUBMITRESULT" FORCE AS OBJECT
        (       ddl             sys.ku$_ddl,
                errorLines      sys.ku$_ErrorLines )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_SUBMITRESULT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SUBMITRESULTS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SUBMITRESULTS" FORCE
AS TABLE OF (sys.ku$_SubmitResult)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_SUBMITRESULTS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SWITCH_COMPILER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SWITCH_COMPILER_T" force as object
(
  obj_num       number,                                     /* object number */
  optlevel      VARCHAR2(4000),
  codetype      VARCHAR2(4000),
  debug         VARCHAR2(4000),
  ccflags       VARCHAR2(4000),
  plscope       VARCHAR2(4000),
  nlsemnt       VARCHAR2(4000)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SWITCH_COMPILER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SYNONYM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SYNONYM_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                             /* synonym object number */
  schema_obj    ku$_schemaobj_t,                    /* synonym schema object */
  syn_long_name varchar2(4000),                         /* synonym long name */
  db_link       varchar2(128),                                /* object node */
  owner_name    varchar2(128),                               /* object owner */
  name          varchar2(128),                                /* object name */
  obj_long_name varchar2(4000)                           /* object long name */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SYNONYM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_SYSGRANT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_SYSGRANT_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  privilege     number,                       /* numeric privilege type code */
  grantee       varchar2(128),
  privname      varchar2(128),
  sequence      number,
  wgo           number,
  user_spare1   number)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_SYSGRANT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_BYTES_ALLOC_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_BYTES_ALLOC_T" force as object
(
  obj_num       number,                                /* table object number */
  bytes_alloc   number                     /* total number of bytes allocated */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_BYTES_ALLOC_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TABCLST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TABCLST_T" force as object
(
  base_obj_num  number,                                     /* base object # */
  base_obj      ku$_schemaobj_t,                              /* base object */
  clst          ku$_clst_t                  /* table clustering info, if any */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TABCLST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TABCLUSTER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TABCLUSTER_T" force as object
(
  obj_num       number,                            /* object number of table */
  schema_obj    ku$_schemaobj_t,                  /* cluster's schema object */
  col_list      ku$_simple_col_list_t           /* list of clustered columns */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TABCLUSTER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_COL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_COL_LIST_T" 
 force as table of (ku$_tab_col_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_COL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_COL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_COL_T" force as object
(
  obj_num           number,             -- histogram object number
  colname           VARCHAR2(128),      -- column name
  name              VARCHAR2(128),      -- column name (backward compatibility)
  intcol_num        number,             -- internal column number
  col_num           number,             -- column number
  property          number,             -- column property
  nested_table      number,             -- 0 if no, 1 if yes
  attr_colname      varchar2(4000),     -- col name from attrcol$
  default_val       varchar2(4000)      -- virtual column expression text
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_COL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_COLUMN_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_COLUMN_LIST_T" force
as table of (ku$_tab_column_t)
not persistable

/
--------------------------------------------------------
--  DDL for Type KU$_TAB_COLUMN_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_COLUMN_T" force as object
(
-- col_comm
  obj_num       number,                      /* object number of base object */
  col_num       number,                          /* column number as created */
  intcol_num    number,                            /* internal column number */
  segcol_num    number,                          /* column number in segment */
  segcollength  number,                      /* length of the segment column */
  offset        number,                                  /* offset of column */
  property      number,                     /* column properties (bit flags) */
  property2     number,                        /*    more column properties  */
  /* The low 32 bits of col$.property are in "property"; "property2" has     */
  /* the high-order bits. Here are the bit definitions of col$.property:     */
                /* 0x0001 =       1 = ADT attribute column                   */
                /* 0x0002 =       2 = OID column                             */
                /* 0x0004 =       4 = nested table column                    */
                /* 0x0008 =       8 = virtual column                         */
                /* 0x0010 =      16 = nested table's SETID$ column           */
                /* 0x0020 =      32 = hidden column                          */
                /* 0x0040 =      64 = primary-key based OID column           */
                /* 0x0080 =     128 = column is stored in a lob              */
                /* 0x0100 =     256 = system-generated column                */
                /* 0x0200 =     512 = rowinfo column of typed table/view     */
                /* 0x0400 =    1024 = nested table columns setid             */
                /* 0x0800 =    2048 = column not insertable                  */
                /* 0x1000 =    4096 = column not updatable                   */
                /* 0x2000 =    8192 = column not deletable                   */
                /* 0x4000 =   16384 = dropped column                         */
                /* 0x8000 =   32768 = unused column - data still in row      */
            /* 0x00010000 =   65536 = virtual column                         */
            /* 0x00020000 =  131072 = place DESCEND operator on top          */
            /* 0x00040000 =  262144 = virtual column is NLS dependent        */
            /* 0x00080000 =  524288 = ref column (present as oid col)        */
            /* 0x00100000 = 1048576 = hidden snapshot base table column      */
            /* 0x00200000 = 2097152 = attribute column of a user-defined ref */
            /* 0x00400000 = 4194304 = export hidden column,RLS on hidden col */
            /* 0x00800000 = 8388608 = string column measured in characters   */
           /* 0x01000000 = 16777216 = virtual column expression specified    */
           /* 0x02000000 = 33554432 = typeid column                          */
           /* 0x04000000 = 67108864 = Column is encrypted                    */
          /* 0x20000000 = 536870912 = Column is encrypted without salt       */
  /* property2:                                                              */
      /* 0x000800000000 = 34359738368 (8) = default with sequence            */
      /* 0x001000000000 = 68719476736 (16) = default on null                 */
      /* 0x002000000000 = 137438953472 (32) = generated always identity col  */
      /* 0x004000000000 = 274877906944 (64)= generated by default iden col   */
      /* 0x008000000000 = (128)= guard column                                */
  name          varchar2(128),                             /* name of column */
  type_num      number,                               /* data type of column */
  length        number,                         /* length of column in bytes */
  fixedstorage  number,             /* flags: 0x01 = fixed, 0x02 = read-only */
  precision_num number,                                         /* precision */
  scale         number,                                             /* scale */
  not_null      number,                               /* 0 = nulls permitted */
                                                 /* > 0 = no NULLs permitted */
  deflength     number,                   /* default value expr. text length */
  default_val   varchar2(4000),     /* default value expression text <= 4000 */
  default_valc  clob,                /* default value expression text > 4000 */
  parsed_def    sys.xmltype,                    /* parsed default expression */
  binarydefval  clob,                    /* default replace null with clause */
  guard_id      number,                              /* guard col identifier */
  charsetid     number,                              /* NLS character set id */
  charsetform   number,
  con           ku$_constraint0_t,                    /* not null constraint */
  spare1        number,                      /* fractional seconds precision */
  spare2        number,                  /* interval leading field precision */
  spare3        number,
  spare4        varchar2(1000),          /* NLS settings for this expression */
  spare5        varchar2(1000),
  spare6        varchar2(19),
  identity_col  ku$_identity_col_t,              /* Identity Col information */
  evaledition_num number,                       /* evaluation edition number */
  unusablebef_num number,                  /* unusable before edition number */
  unusablebeg_num number,          /* unusable beginning with edition number */
  attrname2     varchar2(4000),  /* Unpacked anydata attrib w/o sys gen name */
  col_sortkey   number,                              /* sort key for columns */
  collname      varchar2(128),                             /* Collation name */
  collintcol_num number,       /* Reference to actual collated column number */
-- col_full / col_prim
  attrname      varchar2(4000),/* name of type attr. column: null if != type */
  fullattrname  varchar2(4000),      /* expanded attrname for DTYNAR columns */
  base_intcol_num number,    /* internal column number of base column, i.e., */
                           /* the intcol# of the first column with this col# */
  base_col_type number, /* base column type: 1 = UDT, 2 = XMLType OR or CSX, */
                        /*                   3 = XMLType as CLOB,  0 = other */
  base_col_name varchar2(128),     /* for any xmltype, name of xmltype column*/

  typemd        ku$_coltype_t,     /* type metadata. null if not a typed col */
  oidindex      ku$_oidindex_t,   /*oidindex if col is OID$ col of obj table */
-- lobs
  lobmd         ku$_lob_t,            /* lob metadata. null if not a lob col */
  opqmd         ku$_opqtype_t,   /* opaque metadata. null if not type opaque */
  plobmd        ku$_partlob_t,   /* part lob metadata. null if not a lob col */
  part_objnum   number                 /* for p2t, original partition objnum */
)
not persistable

/
--------------------------------------------------------
--  DDL for Type KU$_TAB_COMPART_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_COMPART_LIST_T" force
as table of (ku$_tab_compart_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_COMPART_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_COMPART_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_COMPART_T" force as object
(
  obj_num       number,                           /* obj# of comp. partition */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  dataobj_num   number,                          /* data layer object number */
  base_obj_num  number,                                     /* obj# of table */
  part_num      number,                                  /* partition number */
  hiboundlen    number,             /* length of high bound value expression */
  hiboundval    varchar2(4000),       /* text of high-bound value expression */
  hiboundvalc   clob,                                      /* clob text of " */
  ilm_policies  ku$_ilm_policy_list_t,               /* ilm policies, if any */
  subpartcnt    number,                           /* number of subpartitions */
  smatch_tpl    number,                  /* 1 = subpartitions match template */
  subparts      ku$_tab_subpart_list_t,                     /* subpartitions */
  lmatch_tpl    number,                           /* 1 = lobs match template */
  lobs          ku$_lobcomppart_list_t,                              /* lobs */
  flags         number,                                      /* flags <31:0> */
  flags2        number,                                     /* flags <63:32> */
  defts_name    varchar2(128),                         /* default TABLESPACE */
  defblocksize  number,          /* blocksize in bytes of default TABLESPACE */
  defpctfree    number,                                   /* default PCTFREE */
  defpctused    number,                                   /* default PCTUSED */
  definitrans   number,                                  /* default INITRANS */
  defmaxtrans   number,                                  /* default MAXTRANS */
  definiexts    number,  /* default INITIAL extent size; NULL if unspecified */
  defextsize    number,     /* default NEXT extent size; NULL if unspecified */
  defminexts    number,           /* default MINEXTENTS; NULL if unspecified */
  defmaxexts    number,           /* default MAXEXTENTS; NULL if unspecified */
  defextpct     number,          /* default PCTINCREASE; NULL if unspecified */
  deflists      number,      /* default FREELISTS value; NULL if unspecified */
  defgroups     number,      /* default FREELIST GROUPS; NULL if unspecified */
  deflogging    number,                        /* default LOGGING attribute  */
  defbufpool    number,                         /* default BUFFER_POOL value */
  analyzetime   varchar2(19),                /* timestamp when last analyzed */
  samplesize    number,                          /* samplesize for histogram */
  rowcnt        number,                                    /* number of rows */
  blkcnt        number,                                  /* number of blocks */
  empcnt        number,                            /* number of empty blocks */
  avgspc        number,                      /* average available free space */
  chncnt        number,                            /* number of chained rows */
  avgrln        number,                                /* average row length */
  spare1        number,
  spare2        number,                                  /* compression info */
  /* from dpart.bsq:                              */
  /* Only 2 bytes of spare2 are currently spoken for */
  /* byte 0   : compression attribute of the partition */
  /*            following bit patterns are possible: */
  /*            00000000 : Compression not specified */
  /*            00000001 : Compression enabled for direct load operations */
  /*            00000010 : Compression disabled      */
  /*            00000101 : Compression enabled for all operations */
  /*            00001001 : Archive Compression: level 1 */
  /*            00010001 : Archive Compression: level 2 */
  /*            00011001 : Archive Compression: level 3 */
  /*            00100001 : Archive Compression: level 4 */
  /*            00101001 : Archive Compression: level 5 */
  /*            00110001 : Archive Compression: level 6 */
  /*            00111001 : Archive Compression: level 7 */
  /*            All other bit patterns are incorrect. */
  /* byte 1   : segment creation attributes of the partition */
  /*            00000001 : Deferred segment creation is the default */
  /*            00000010 : Immediate segment creation is the default */
  /*            Other bits can be used as needed */
  spare2h1      number,                 /* second group of 32 bits of spare2 */
  spare3        number,
  defmaxsize    number,              /* default MAXSIZE; NULL if unspecified */
  bhiboundval   blob,
  svcname       varchar(1000),            /* service name for IMC DISTRIBUTE */
  svcflags      number,                  /* service flags for IMC DISTRIBUTE */
  ext_location  ku$_exttab_t           /* locations for ext table partitions */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_COMPART_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TABLE_DATA_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TABLE_DATA_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                              /* obj# */
  dataobj_num   number,                                /* data layer object# */
                                       /* hashed partitioned tables use obj# */
  name          varchar2(128),                                /* object name */
  part_name     varchar2(128),/* partition name (if object is a subpartition)*/
  parttype      number,                               /* (sub)partition type */
  property      number,                                    /* table property */
  property2     number,                                    /* table property */
  property3     number,                                    /* table property */
  trigflag      number,                   /* the other table property column */
  xmltype_fmts  number,  /* formats of XMLType columns: 0x01=CLOB; 0x02=BLOB */
  xmlschemacols char(1),          /* 'Y' = table has xmlschema-based columns */
  xml_outofline char(1),          /* 'Y' = table has xmlschema-based columns
                                    and table data is out of line (max is 1) */
  longcol       char(1),         /* 'Y' = table has a long column (max is 1) */
  nft_varray    char(1), /*'Y' = table has varray column with non-final type */
  nonscoped_ref char(1),       /* 'Y' = table has column with non-scoped ref */
  tstz_cols     char(1),                        /* 'Y' = table has TSTZ data */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  ts_name       varchar2(128),                            /* tablespace name */
  ts_num        number,                                 /* tablespace number */
  blocksize     number,                            /* size of block in bytes */
  bytes_alloc   number,                   /* total number of bytes allocated */
  base_obj      ku$_schemaobj_t,            /* base table/view schema object */
  domidx_obj    ku$_schemaobj_t,        /* domain index (if secondary table) */
  anc_obj       ku$_schemaobj_t, /* base obj of dom idx (if secondary table) */
  unload_method number,              /* Direct Path preferred or ET required */
  et_parallel   number,                /* ET parallel unload possible or not */
  fgac          number,                               /* FGAC enabled or not */
  refpar_level  number,                      /* reference partitioning level */
  read_only     char(1)                      /* Y if table_data is read_only */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TABLE_DATA_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TABLE_OBJNUM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TABLE_OBJNUM_T" force as object
(
  obj_num       number,                                              /* obj# */
  objnum_name   varchar(128),                 /* name associated with objnum */
  table_type    varchar2(1),         /* 'T' = base table, 'N' = nested table */
                                  /* 'X' = nested table belonging to XMLtype */
  property      number,                                    /* table property */
  property2     number,                                    /* table property */
  ts_num        number,                                          /* tab$.ts# */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  base_obj      ku$_schemaobj_t             /* base object (if nested table) */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TABLE_OBJNUM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TABLESPACE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TABLESPACE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  ts_num        number,                      /* tablespace identifier number */
  name          varchar2(128),                         /* name of tablespace */
  owner_num     number,                               /* owner of tablespace */
  status        number,                                            /* status */
                      /* 1 = ONLINE, 2 = OFFLINE, 3 = INVALID, 4 = READ ONLY */
  contents      number,                      /* TEMPORARY = 1 / PERMANENT = 0*/
  undofile_num  number,  /* undo_off segment file number (status is OFFLINE) */
  undoblock_num number,               /* undo_off segment header file number */
  blocksize     number,                            /* size of block in bytes */
  inc_num       number,                      /* incarnation number of extent */
  scnwrp        number,     /* clean offline scn - zero if not offline clean */
  scnbas        number,              /* scnbas - scn base, scnwrp - scn wrap */
  dflminext     number,                 /* default minimum number of extents */
  dflmaxext     number,                 /* default maximum number of extents */
  dflinit       number,                       /* default initial extent size */
  dflincr       number,                          /* default next extent size */
  dflminlen     number,                       /* default minimum extent size */
  dflextpct     number,              /* default percent extent size increase */
  dflogging     number,                         /* default logging attribute */
  affstrength   number,                                 /* Affinity strength */
  bitmapped     number,      /* If not bitmapped, 0 else unit size in blocks */
  plugged       number,                                        /* If plugged */
  directallowed number,    /* Operation which invalidate standby are allowed */
  flags         number,                       /* various flags -  see ktt3.h */
                                     /* 0x01 = system managed allocation     */
                                     /* 0x02 = uniform allocation            */
                                /* if above 2 bits not set then user managed */
                                     /* 0x04 = migrated tablespace           */
                                     /* 0x08 = tablespace being migrated     */
                                     /* 0x10 = undo tablespace               */
                                     /* 0x20 = auto segment space management */
                       /* if above bit not set then freelist segment managed */
                                     /* 0x40 (64) = COMPRESS                 */
                                     /* 0x80 = ROW MOVEMENT                  */
                                     /* 0x100 = SFT                          */
                                     /* 0x200 = undo retention guarantee     */
                                    /* 0x400 = tablespace belongs to a group */
                                  /* 0x800 = this actually describes a group */
                                   /* 0x1000 = tablespace has MAXSIZE set */
                                   /* 0x2000 = enc property initialized */
                                   /* 0x4000 = encrypted tablespace */
            /* 0x8000 = has its own key and not using the default DB enc key */
                                  /* 0x10000 = OLTP Compression */
                                  /* 0x20000 (131072) = ARCH1_COMPRESSION */
                                  /* 0x40000 (262144) = ARCH2_COMPRESSION */
                                  /* 0x80000 (524288) = ARCH3_COMPRESSION */
  flags2        number,                                    /*  flags <63:32> */
                   /* 0x800000000000 = 140737488355328 (32768) LOCAL_ON_LEAF */
                    /* 0x1000000000000= 281474976710656 (65536) LOCAL_ON_ALL */
                                                              /* from ktt3.h */
                                       /* Lost write protection status flags */
  /* #define KTT_LOST_ENABLED  ((ub8)0x20000000 00000000) lost write enabled */
  /* #define KTT_LOST_SUSPEND  ((ub8)0x40000000 00000000) lost write suspend */
  /* #define KTT_LOST_DISABLED ((ub8)0x0)                lost write disabled */
  svcname       varchar(1000),            /* service name for IMC DISTRIBUTE */
  svcflags      number,                  /* service flags for IMC DISTRIBUTE */
  pitrscnwrp    number,                      /* scn wrap when ts was created */
  pitrscnbas    number,                      /* scn base when ts was created */
  ownerinstance varchar(128),                         /* Owner instance name */
  backupowner   varchar(128),                  /* Backup owner instance name */
  groupname     varchar(128),                                  /* Group name */
  spare1        number,                                  /* plug-in SCN wrap */
  spare2        number,                                  /* plug-in SCN base */
  spare3        varchar2(1000),
  spare4        varchar2(19),
  filespec      ku$_file_list_t,
  encryptionalg varchar2(128)                        /* encryption algorithm */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TABLESPACE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TABLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TABLE_T" force 
 as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                              /* obj# */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  base_obj      ku$_schemaobj_t,         /* base object (if secondary table) */
  anc_obj       ku$_schemaobj_t,     /* ancestor object (if secondary table) */
  bobj_num      number,                           /* base obj# (cluster/iot) */
  tab_num       number,                  /* # in cluster, null if !clustered */
  cols          number,                                      /* # of columns */
  clucols       number,                 /* # of clustered cols, if clustered */
  tabcluster    ku$_tabcluster_t,        /* cluster info, null if !clustered */
  fba           ku$_fba_t, /* flashback archive info, null if not fb enabled */
  fba_periods   ku$_fba_period_list_t,                    /* valid-time info */
  clst          ku$_clst_t,                 /* table clustering info, if any */
  ilm_policies  ku$_ilm_policy_list_t,               /* ilm policies, if any */
  flags         number,                                      /* flags <31:0> */
  flags2        number,                                     /* flags <63:32> */
  audit_val     varchar2(128),                           /* auditing options */
  rowcnt        number,                                    /* number of rows */
  blkcnt        number,                                  /* number of blocks */
  empcnt        number,                            /* number of empty blocks */
  avgspc        number,                      /* average available free space */
  chncnt        number,                            /* number of chained rows */
  avgrln        number,                                /* average row length */
  avgspc_flb    number,       /* avg avail free space of blocks on free list */
  flbcnt        number,                             /* free list block count */
  analyzetime   varchar2(19),                /* timestamp when last analyzed */
  samplesize    number,                 /* number of rows sampled by Analyze */
  degree        number,                       /* # of PQ slaves per instance */
  instances     number,                         /* # of OPS instances for PQ */
  intcols       number,                             /* # of internal columns */
  kernelcols    number,                   /* number of REAL (kernel) columns */
  tstz_cols     char(1),                        /* 'Y' = table has TSTZ data */
  trigflag      number,                              /* inline trigger flags */
  spare1        number,                       /* used to store hakan_kqldtvc */
  spare2        number,         /* committed partition # used by drop column */
  spare3        number,                           /* summary sequence number */
  spare4        varchar2(1000),         /* committed RID used by drop column */
  spare5        varchar2(1000),
  spare6        varchar2(19),                               /* dml timestamp */
  spare7        number,
  spare8        number,
  spare9        varchar2(1000),
  spare10       varchar2(1000),
  encalg        number,  /* encryption algorithm id if a column is encrypted */
  intalg        number,   /* integrity algorithm id if a column is encrypted */
  im_colsel     ku$_im_colsel_list_t,           /* inmemory selective column */
  con0_list     ku$_constraint0_list_t,               /* list of constraints */
  con2_list     ku$_constraint2_list_t,               /* list of constraints */
  exttab        ku$_exttab_t,                     /* external table metadata */
  cubetab       ku$_cube_tab_t,                /* organization cube metadata */
  svcname       varchar(1000),            /* service name for IMC DISTRIBUTE */
  svcflags      number,                  /* service flags for IMC DISTRIBUTE */
  /* table storage (differs for p2t)
     NOTE - properties must also change for p2t */
  property      number,                                  /* table properties */
  property2     number,                             /* more table properties */
            /* the table property bits are defined in qcdl.h and kqld.h      */
            /* with names beginning "KQLDTVCP_" and "KQLDTVCP2_"             */
            /* e.g., KQLDTVCP_TTV,  KQLDTVCP2_ILM_MODTR                      */
  /* The low 32 bits of tab$.property are in "property"; "property2" has     */
  /* the high-order bits. Here are the bit definitions of tab$.property:     */
                   /* 0x01 = typed table */
                   /* 0x02 = has ADT columns, */
                   /* 0x04 = has nested-TABLE columns */
                   /* 0x08 = has REF columns, */
                   /* 0x10     (16) = has array columns */
                   /* 0x20     (32) = partitioned table, */
                   /* 0x40     (64) = index-only table (IOT) */
                   /* 0x80    (128) = IOT w/ row OVerflow, */
                   /* 0x100   (256) = IOT w/ row CLustering */
                   /* 0x200   (512) = IOT OVeRflow segment, */
                   /* 0x400  (1024) = clustered table */
                   /* 0x800  (2048) = has internal LOB columns, */
                   /* 0x1000 (4096) = has primary key-based OID$ column */
                   /* 0x2000 (8192) = nested table */
                   /* 0x4000 (16384) = View is Read Only */
                   /* 0x8000 (32768) = has FILE columns */
                   /* 0x10000 (65536) = obj view OID is sys-generated */
                   /* 0x20000 (131072) = used as AQ table */
                   /* 0x40000 (262144)= has user-defined lob columns */
                   /* 0x80000 (524288)= table contains unused columns */
                   /* 0x100000 (1048576)= has an on-commit materialized view */
                   /* 0x200000 (2097152)= has system-generated column names */
                   /* 0x400000 (4194304)= global temporary table */
                   /* 0x800000 (8388608)= session-specific temporary table */
                   /* 0x8000000 (134217728)= table is a sub table */
                   /* 0x20000000 (536870912) = pdml itl invariant */
                   /* 0x80000000 (2147483648)= table is external  */
  /* property2: High-order bits of tab$.property                             */
  /*  0x000000100000000 (1) - table is a CUBE table                          */
  /*  0x000000400000000 (4) = delayed segment creation                       */
  /*  0x000020000000000 (512) = result cache mode FORCE enabled on this tbl  */
  /*  0x000040000000000 (1024) = result cache mode MANUAL enabled on this tbl*/
  /*  0x000080000000000 (2048) = result cache mode AUTO enabled on this tbl */
  /*  0x020000000000000 (2097152) -                         long varchar col */
  /*  0x00040000000000000   (4194304)-    this table has a clustering clause */
  /*                                        (applies only to the fact table).*/
  /*  0x00080000000000000   (8388608)-   this table has one or more zonemaps */
  /*                                                           defined on it.*/
  /*  0x00400000000000000  (67108864)= has identity column                   */
  /*  0x01000000000000000 (268435456)-     this table appears as a dimension */
  /*                                       in one or more clustering clauses.*/
            /* the table property bits are defined in qcdl.h and kqld.h      */
            /* with names beginning "KQLDTVCP_" and "KQLDTVCP2_"             */
            /* e.g., KQLDTVCP_TTV,  KQLDTVCP2_ILM_MODTR                      */
  property3 number,
           /* the table property bits are defined in qcdl.h and kqld.h       */
           /* With names beginning KQLDTVCP3_                                */
           /* Here are the bit definitions of tab$.property2:                */
                /* 0x00000001 (1) = Binary XML table uses granular token set */
                /* 0x00000002 (2) = Table is a Binary XML Token Set entity   */
  storage       ku$_storage_t,                                    /* storage */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  ts_name       varchar2(128),                            /* tablespace name */
  blocksize     number,                            /* size of block in bytes */
  dataobj_num   number,                                /* data layer object# */
  pct_free      number,                   /* min. free space %age in a block */
  pct_used      number,                   /* min. used space %age in a block */
  initrans      number,                     /* initial number of transaction */
  maxtrans      number,                     /* maximum number of transaction */
  con1_list     ku$_constraint1_list_t,               /* list of constraints */
  /* col_list */
  col_list      ku$_tab_column_list_t,                   /* list of columns */
  /* used for 'full' tables (ADTs and such)  */
  nt            ku$_nt_parent_t,                            /* nested tables */
  pkref_list    ku$_pkref_constraint_list_t, /* list of table ref constraints*/
  /*   xml metadata */
  xmlschemacols char(1),          /* 'Y' = table has xmlschema-based columns */
  xmlcolset     ku$_XmlColSet_t,        /* OR intcolnums for xmltype stoarge */
  xmlhierarchy  char(1),             /* 'Y' = table is xml hierarchy enabled */
  /* reference partition child only */
  parent_obj    ku$_schemaobj_t,          /* parent object (if refpar child) */
  refpar_level  number,                         /* reference partition level */
  /* used for partitioned tables */
  objgrant_list ku$_objgrant_list_t,/* grants required, refpar parent access */
  /* used for IOTs  */
  pct_thresh    number,                            /* pctthreshold for IOTs. */
  numkeycols    number,      /* # of key columns in compressed prefix (IOTs) */
  inclcol_name  varchar(128),/*column where IOT splits into overflow segment */
  iov           ku$_ov_table_t,                            /* overflow table */
  maptab        ku$_map_table_t,                            /* mapping table */
  part_obj      ku$_tab_partobj_t ) not persistable

/
--------------------------------------------------------
--  DDL for Type KU$_TAB_PART_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_PART_LIST_T" force as table of (ku$_tab_part_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_PART_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_PARTOBJ_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_PARTOBJ_T" force as object
(
  obj_num       number,                         /* obj# of partitioned table */
  partobj       ku$_partobj_t,                     /* Base partitioning info */
  partcols      ku$_part_col_list_t,         /* list of partitioning columns */
  subpartcols   ku$_part_col_list_t,      /* list of subpartitioning columns */
  part_list     ku$_tab_part_list_t,                 /* table partition list */
  compart_list  ku$_tab_compart_list_t,    /* table composite partition list */
  tsubparts     ku$_tab_tsubpart_list_t        /* template subpartition list */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_PARTOBJ_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_PART_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_PART_T" force as object
(
  obj_num       number,                                     /* object number */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  ts_name       varchar2(128),                                 /* tablespace */
  blocksize     number,                            /* size of block in bytes */
  storage       ku$_storage_t,                    /* storage characteristics */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  dataobj_num   number,                          /* data layer object number */
  base_obj_num  number,                                 /* base table object */
  part_num      number,                                  /* partition number */
  hiboundlen    number,                   /* length of high bound value expr */
  hiboundval    varchar2(4000),             /* text of high bound value expr */
  hiboundvalc   clob,                                           /* text of " */
  lobs          ku$_lobfrag_list_t,                                  /* lobs */
  nt            ku$_ntpart_parent_t,              /* nested table partitions */
  ilm_policies  ku$_ilm_policy_list_t,               /* ilm policies, if any */
  pct_free      number,                   /* min. free space %age in a block */
  pct_used      number,                   /* min. used space %age in a block */
  initrans      number,                         /* initial # of transactions */
  maxtrans      number,                            /* max. # of transactions */
  flags         number,                   /* flags <31:0> defined in kkpac.h */
  flags2        number,                  /* flags <63:32> defined in kkpac.h */
  analyzetime   varchar2(19),                     /* timestamp last analyzed */
  samplesize    number,                          /* samplesize for histogram */
  rowcnt        number,                                    /* number of rows */
  blkcnt        number,                                  /* number of blocks */
  empcnt        number,                            /* number of empty blocks */
  avgspc        number,                      /* average available free space */
  chncnt        number,                            /* number of chained rows */
  avgrln        number,                                /* average row length */
  spare1        number,
  spare2        number,                                             /* flags */
  spare2h1      number,                 /* second group of 32 bits of spare2 */
  spare3        number,
  bhiboundval   blob,                                   /* binary hiboundval */
  phypart_num   number,                         /* physical partition number */
  ext_location  ku$_exttab_t,          /* locations for ext table partitions */
  svcname       varchar(1000),            /* service name for IMC DISTRIBUTE */
  svcflags      number                   /* service flags for IMC DISTRIBUTE */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_PART_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_PTAB_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_PTAB_STATS_T" force as object
(
  obj_num           number,             -- table object number
  trigflag          number,             -- table trigflag
  tabname           VARCHAR2(128),      -- table/nested table name
  partname          VARCHAR2(128),      -- Partition name
  subpartname       VARCHAR2(128),      -- subpartition name
  bobj_num          number,             -- base object number for part. tabs
  sysgen_cols       number,             -- system generated columns?
  blkcnt            number,             -- block count
  rowcnt            number,             -- row count
  avgrln            number,             -- average row length
  flags             number,             -- global/user spec. stats
  sample_size       number,             -- number of rows sampled by Analyze
  analyzetime       varchar2(19),       -- timestamp when last analyzed
  cache_info        ku$_cached_stats_t, -- cached stats information
  col_stats         ku$_col_stats_list_t-- column stats list for table (part)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_PTAB_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_STATS_T" force as object
(
  vers_major        char(1),                    -- UDT major version #
  vers_minor        char(1),                    -- UDT minor version #
  obj_num           number,                     -- object number for table
  base_obj          ku$_schemaobj_t,            -- table information
  nested_tab_name   varchar2(128)               -- nested table name
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_SUBPART_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_SUBPART_LIST_T" force
as table of (ku$_tab_subpart_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_SUBPART_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_SUBPART_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_SUBPART_T" force as object
(
  obj_num       number,                              /* obj# of subpartition */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  ts_name       varchar2(128),                            /* tablespace name */
  blocksize     number,                            /* size of block in bytes */
  storage       ku$_storage_t,                    /* storage characteristics */
  deferred_stg  ku$_deferred_stg_t,                      /* deferred storage */
  dataobj_num   number,                                   /* data layer obj# */
  pobj_num      number,                          /* obj# of parent partition */
  subpart_num   number,                                     /* subpartition# */
  lobs          ku$_lobfrag_list_t,                                  /* lobs */
  ilm_policies  ku$_ilm_policy_list_t,               /* ilm policies, if any */
  flags         number,                                      /* flags <31:0> */
  flags2        number,                                     /* flags <63:32> */
  pct_free      number,                      /* min. free space % in a block */
  pct_used      number,                      /* min. used spare % in a block */
  initrans      number,                         /* initial # of transactions */
  maxtrans      number,                            /* max. # of transactions */
  analyzetime   varchar2(19),                /* timestamp when last analyzed */
  samplesize    number,                      /* # of rows sampled by analyze */
  rowcnt        number,                                    /* number of rows */
  blkcnt        number,                                  /* number of blocks */
  empcnt        number,                            /* number of empty blocks */
  avgspc        number,                      /* average available free space */
  chncnt        number,                            /* number of chained rows */
  avgrln        number,                                /* average row length */
  spare1        number,
  spare2        number,
  spare2h1      number,                 /* second group of 32 bits of spare2 */
  spare3        number,
  hiboundlen    number,                     /* len. of high bound val. expr. */
  hiboundval    varchar2(4000),                                 /* text of " */
  hiboundvalc   clob,                                      /* clob text of " */
  bhiboundval   blob,                                   /* binary hiboundval */
  phypart_num   number,                      /* physical subpartition number */
  svcname       varchar(1000),            /* service name for IMC DISTRIBUTE */
  svcflags      number,                  /* service flags for IMC DISTRIBUTE */
  ext_location  ku$_exttab_t           /* locations for ext table partitions */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_SUBPART_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_TSUBPART_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_TSUBPART_LIST_T" force
as table of (ku$_tab_tsubpart_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_TSUBPART_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TAB_TSUBPART_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TAB_TSUBPART_T" force as object
(
  base_objnum   number,                            /* Object number of table */
  spart_pos     number,                             /* subpartition position */
  spart_name    varchar2(132),                      /* name assigned by user */
  ts_name       varchar2(128),                            /* tablespace name */
  ts_num        number,                   /* Default tablespace NULL if none */
  flags         number,                             /* as defined in kkpac.h */
  flags2        number,                             /* as defined in kkpac.h */
  hiboundlen    number,              /* high bound text of this subpartition */
  hiboundval    varchar2(4000),                        /* length of the text */
  hiboundvalc   clob,                                      /* clob text of " */
  tlobs         ku$_tlob_comppart_list_t,                            /* lobs */
  bhiboundval   blob,                                   /* binary hiboundval */
  svcname       varchar(1000),            /* service name for IMC DISTRIBUTE */
  svcflags      number                   /* service flags for IMC DISTRIBUTE */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TAB_TSUBPART_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TACTION_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TACTION_LIST_T" FORCE
IS TABLE OF (sys.ku$_taction_t)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_TACTION_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TACTION_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TACTION_T" FORCE AS OBJECT
(
  text  varchar2(32000)
)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_TACTION_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TBS_ILM_POLICY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TBS_ILM_POLICY_T" force as object
(
  ts_num        number,                      /* tablespace identifier number */
  name          varchar2(128),                         /* name of tablespace */
  ilm_policies  ku$_ilm_policy_list_t                /* default ilm policies */
)
not persistable

/
--------------------------------------------------------
--  DDL for Type KU$_TEMP_SUBPARTDATA_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TEMP_SUBPARTDATA_T" force as object
(
  obj_num       number,
  spts  number,
  dspts number,
  pdefts number,
  tdefts number,
  udefts number,
  spbnd  blob, -- varchar2(4000),
  dspbnd blob  -- varchar2(4000)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TEMP_SUBPARTDATA_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TEMP_SUBPARTLOBFRG_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TEMP_SUBPARTLOBFRG_T" force as object
(
  obj_num     number,  /* parentobj num */
  ts_num      number,
  fragobj_num   number,
  frag_num        number,
  tabfragobj_num  number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TEMP_SUBPARTLOBFRG_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TEMP_SUBPARTLOB_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TEMP_SUBPARTLOB_T" force as object
(
  obj_num         number,
  lpdefts number,
  lfts    number,
  lcdefts number,
  lspdefts number,
  spts     number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TEMP_SUBPARTLOB_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TEMP_SUBPART_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TEMP_SUBPART_T" force as object
(
  obj_num       number,                             /* obj# of subpartition */
  ts_num        number,
  pobj_num      number,     /* object# of partition containing subpartition */
  subpartno     number,
  bhiboundval   blob
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TEMP_SUBPART_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TLOB_COMPPART_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TLOB_COMPPART_LIST_T" force
as table of (ku$_tlob_comppart_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TLOB_COMPPART_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TLOB_COMPPART_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TLOB_COMPPART_T" force as object
(
  base_objnum    number,                           /* object number of table */
  colname        varchar2(128),
  intcol_num     number,                      /* column number of lob column */
  spart_pos      number,                            /* subpartition position */
  flags          number,          /* Type of lob column - 1 varray, 2 opaque */
  lob_spart_name varchar2(132),         /* segment name for lob subpartition */
  ts_name        varchar2(128),         /* tablespace name (if any) assigned */
  ts_num         number                      /* tablespace (if any) assigned */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TLOB_COMPPART_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TRIGGERCOL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TRIGGERCOL_LIST_T" 
 force as table of (ku$_triggercol_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TRIGGERCOL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TRIGGERCOL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TRIGGERCOL_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                   /* obj# of trigger */
  col_num       number,                                     /* column number */
  type_num      number,                          /* type of column reference */
     /* 6 = OLD IN-ARG, 5 = NEW IN-ARG, 9 = NEW OUT-VAR, 13 = NEW IN/OUT-VAR */
                                                  /* 0x14 = 20 PARENT IN-ARG */
  position_num  number,                               /* position in trigger */
  intcol_num    number,                            /* internal column number */
  name          varchar2(128),                             /* name of column */
  attrname      varchar2(4000) /* name of type attr. column: null if != type */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TRIGGERCOL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TRIGGERDEP_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TRIGGERDEP_LIST_T" 
 force as table of (ku$_triggerdep_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TRIGGERDEP_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TRIGGERDEP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TRIGGERDEP_T" force as object
(
  vers_major  char(1),                                /* UDT major version # */
  vers_minor  char(2),                                /* UDT minor version # */
  obj_num     number,                                     /* obj# of trigger */
  p_trgowner  varchar2(128),                         /* parent trigger owner */
  p_trgname   varchar2(128),                          /* parent trigger name */
  flag        number                              /* 0x01 FOLLOWS dependency */
                                                 /* 0x02 PRECEDES dependency */
                                  /* 0x04 - schema user not specified in ddl */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TRIGGERDEP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TRIGGER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TRIGGER_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                   /* obj# of trigger */
  schema_obj    ku$_schemaobj_t,                 /* object info. for trigger */
  base_obj_num  number,                                  /* obj# of base obj */
  base_obj_schema varchar2(128),        /* schema name - for schema triggers */
  base_obj      ku$_schemaobj_t,    /* object info. for base obj: May be null*/
  tab_property2 number,       /* table property bits if base object is table */
  xdb_generated number,                     /* 1 if xdb generated, else NULL */
  type_num      number,                                     /* trigger type: */
   /* 0=before table, 1=before row, 2=after table, 3=after row, 4=instead of */
  act_update    number,                                    /* fire on update */
  act_insert    number,                                    /* fire on insert */
  act_delete    number,                                    /* fire on delete */
  refoldname    varchar2(128),                       /* old referencing name */
  refnewname    varchar2(128),                       /* new referencing name */
  defschema_exst number,       /* Flag to identifify schema existance in def */
  definition    varchar2(4000),                /* text of trigger definition */
  parsed_def    ku$_source_t,          /* definition with name offset/length */
  whenclause    varchar2(4000),                       /* text of when clause */
  body          clob,                                /* text of trigger body */
  body_vcnt     ku$_vcnt,                            /* text of trigger body */
  body_len      number,                            /* length of trigger body */
  enabled       number,                         /* 0 = DISABLED, 1 = ENABLED */
  property      number,                                /* trigger properties */
                                                /* 0x01 = baseobject is view */
                                                /* 0x02 = Call style trigger */
                                                /* 0x04 = Java Trigger       */
                                            /* 0x08 = baseobject is database */
                                              /* 0x10 = baseobject is schema */
                                              /* 0x20 = Nested table trigger */
                                                 /* 0x40 = baseobject is IOT */
                              /* 0x80 = fire-once-only (fire one place only) */
  sys_evts      number,                         /* system events for trigger */
  nttrigcol     number,               /* intcol# on which trigger is defined */
  nttrigatt     number,                    /* attribute number within column */
  ntname        varchar2(128),                  /* nested table trigger name */
  refprtname    varchar2(128),                    /* PARENT referencing name */
  actionlineno  number,                         /* action line number offset */
  cols          ku$_triggercol_list_t,      /* columns referenced by trigger */
  trigdeps      ku$_triggerdep_list_t,               /* trigger dependencies */
  compiler_info ku$_switch_compiler_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TRIGGER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TRLINK_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TRLINK_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  name          varchar2(132),                          /* trusted link name */
  function      varchar2(45),                                    /* function */
  type          number                               /* type of trusted link */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TRLINK_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TSQUOTA_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TSQUOTA_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  user_id       number,                                          /* user id  */
  user_name     varchar2(128),                               /* name of user */
  ts_name       varchar2(128),                            /* tablespace name */
  ts_id         number,                                     /* tablespace id */
  maxblocks     number,                                        /* max blocks */
  blocksize     number,                                       /* blocks size */
  grantor_num   number,                                        /* grantor id */
  grantor       varchar2(128),                               /* grantor name */
  blocks        number,                  /* number of blocks charged to user */
  priv1         number,                     /* reserved for future privilege */
  priv2         number,                     /* reserved for future privilege */
  priv3         number                      /* reserved for future privilege */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TSQUOTA_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TYPE_ATTR_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TYPE_ATTR_LIST_T" 
 force as table of (ku$_type_attr_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TYPE_ATTR_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TYPE_ATTR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TYPE_ATTR_T" force as object
(
  toid          raw(16),                                             /* TOID */
  version_num   number,                      /* internal type version number */
  name          varchar2(128),                             /* attribute name */
  attribute_num number,                       /* attribute identifier number */
  attr_vers_num number,        /* attribute's type's internal version number */
  attr_toid     raw(16),                                 /* attribute's TOID */
  synobj_num    number,                              /* obj# of type synonym */
  properties    number,                           /* attribute's properties: */
  /* 0x4000 =   16384 = is a PONTER attribute */
  /* 0x8000 =   32768 = is a REF attribute */
  charsetid     number,                                  /* character set id */
  charsetform   number,                                /* character set form */
  length        number,                  /* fixed character string length or */
                                  /* maximum varying character string length */
  precision_num number,        /* fixed- or floating-point numeric precision */
  scale         number,                         /* fixed-point numeric scale */
  externname    varchar2(4000),        /* field in java class for SQLJ types */
  xflags        number,                           /* flags not stored in TDO */
  /* 0x01 - inherited attribute */
  spare1        number,                      /* fractional seconds precision */
  spare2        number,                  /* interval leading field precision */
  spare3        number,                                          /* reserved */
  spare4        number,                                          /* reserved */
  spare5        number,                                          /* reserved */
  setter        number,                        /* Setter function no. (SQLJ) */
  getter        number,                        /* Getter function no. (SQLJ) */
  typemd        ku$_simple_type_t                           /* schema object */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TYPE_ATTR_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TYPE_BODY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TYPE_BODY_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                     /* object number */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  source_lines  ku$_source_list_t,                           /* source lines */
  compiler_info ku$_switch_compiler_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TYPE_BODY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_TYPE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_TYPE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                     /* object number */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  oid           raw(16),                                             /* toid */
  typeid        raw(16), /* short typeid value (for non final and sub types) */
  version       number,                      /* internal type version number */
  hashcode      raw(17),                                 /* Version hashcode */
  type_num      number,                      /* type encoding (see sqldef.h) */
  properties    number,                                   /* type properties */
  attribute_num number,                              /* number of attributes */
  method_num    number,                                 /* number of methods */
  hidmethod_num number,                         /* number of hiddend methods */
  externtype    number,                                     /* external type */
                                                    /* 1 = SQLData SQLJ type */
                                                /* 2 = CustomDatum SQLJ type */
                                               /* 3 = serializable SQLJ type */
                                      /* 4 = internal serializable SQLJ type */
                                                    /* 5 = ORAData SQLJ type */
  externname    varchar(4000),   /* (M_VCSZ)java class implementing the type */
  source_lines  ku$_source_list_t,                           /* source lines */
  compiler_info ku$_switch_compiler_t,
  supertype_obj ku$_schemaobj_t,                    /* supertype object info */
  collection    ku$_collection_t,                        /* collection$ data */
  attr_list     ku$_type_attr_list_t,                      /* attribute list */
  method_list   ku$_method_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_TYPE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_UNPACKED_ANYDATA_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_UNPACKED_ANYDATA_T" FORCE
IS TABLE OF (varchar2(2000)) NOT PERSISTABLE;

/

  GRANT EXECUTE ON "SYS"."KU$_UNPACKED_ANYDATA_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_UP_STATS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_UP_STATS_LIST_T" 
 force as table of (ku$_up_stats_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_UP_STATS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_UP_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_UP_STATS_T" force as object
(
  obj_num            number,                    -- object number for table
  pname              varchar2(128),
  valnum             number,
  valchar            varchar2(4000),
  chgtime            varchar2(19),
  spare1             NUMBER)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_UP_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_USER_EDITIONING_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_USER_EDITIONING_LIST_T" 
 force as TABLE of (ku$_user_editioning_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_USER_EDITIONING_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_USER_EDITIONING_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_USER_EDITIONING_T" force as object
(
  user_id   number,
  type_name varchar2(128)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_USER_EDITIONING_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_USER_PREF_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_USER_PREF_STATS_T" force as object
(
  vers_major        char(1),                    -- UDT major version #
  vers_minor        char(1),                    -- UDT minor version # */
  obj_num            number,                    -- object number for table
  base_obj           ku$_schemaobj_t,           -- table information
  up_stats_list      ku$_up_stats_list_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_USER_PREF_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_USER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_USER_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  user_id       number,                                          /* user id  */
  name          varchar2(128),                               /* name of user */
  type_num      number ,                               /* 0 = role, 1 = user */
  password      varchar2(128),                         /* encrypted password */
  datats        varchar2(128),                   /* user default tablespace  */
  tempts        varchar2(128),    /* default tablespace for temporary tables */
  ltempts       varchar2(128),                      /* local temp tablespace */
  ctime         varchar2(19),                  /* user account creation time */
  ptime         varchar2(19),                        /* password change time */
  exptime       varchar2(19),             /* actual password expiration time */
  ltime         varchar2(19),                 /* time when account is locked */
  profnum       number,                                 /* resource profile# */
  profname      varchar2(128),                              /* profile name  */
  user_audit    varchar2(128),                         /* user audit options */
  defrole       number,                           /* default role indicator: */
  defgrp_num    number,                                /* default undo group */
  defgrp_seq_num   number,             /* global sequence number for the grp */
  astatus       number,                             /* status of the account */
  astatus_12    number,              /* status of the account for version 12 */
  lcount        number,                    /* count of failed login attempts */
  defschclass   varchar2(128),                     /* initial consumer group */
  ext_username  varchar2(4000),                         /* external username */
  spare1        number,
  spare2        number,
  spare3        varchar2(128),                     /* Default collation name */
  spare4        varchar2(1000),           /* indentfier with only version 10 */
  spare4_12     varchar2(1000),     /* indentfier with version 10, 11 and 12 */
  spare5        varchar2(1000),
  spare6        varchar2(19),
  edn_types     ku$_user_editioning_list_t         /* editions-enabled types */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_USER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_VCNT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_VCNT" FORCE AS TABLE OF (VARCHAR2(4000))
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_VCNT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_VIEW_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_VIEW_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  obj_num       number,                                              /* obj# */
  schema_obj    ku$_schemaobj_t,                            /* schema object */
  audit_val     varchar2(128),                           /* auditing options */
  cols          number,                                      /* # of columns */
  intcols       number,                             /* # of internal columns */
  property      number,                                  /* table properties */
                /* 0x0001 =       1 = this is typed view                     */
                /* 0x0002 =       2 = view has ADT column(s)                 */
                /* 0x0004 =       4 = view has nested table column(s)        */
                /* 0x0008 =       8 = view has REF column(s)                 */
                /* 0x0010 =      16 = view has array column(s)               */
                /* 0x1000 =    4096 = view has primary key-based oid         */
                /* 0x4000 =   16384 = view is read-only                      */
            /* 0x08000000 =         = view is a sub view                     */
            /* 0x10000000 =         = view is packed object view             */
  property2     number,                                  /* table properties */
            /* see kqld.h KQLDTVCP2 flags */
  flags         number,                                             /* flags */
                /* 0x0800 =    2048 = view/table has security policy         */
                /* 0x1000 =    4096 = view is insertable via trigger         */
                /* 0x2000 =    8192 = view is updatable via trigger          */
                /* 0x4000 =   16384 = view is deletable via trigger          */
             /* 0x0400000 =         = view has sub views defined under it    */
  textlength    number,                               /* length of view text */
  text          clob,                                           /* view text */
  parsed_text   sys.xmltype,                             /* parsed view text */
  with_option   ku$_constraint0_t,      /* check with option constraint name */
  textvcnt      ku$_vcnt,            /* (retained for backward compatibility */
  col_list      ku$_simple_col_list_t,    /* list of relational view columns */
  col_list2     ku$_tab_column_list_t,        /* list of object view columns */
  owner_name    varchar2(128),                          /* owner of row type */
  name          varchar2(128),                           /* name of row type */
  typetextlength  number,                         /* length of row type text */
  typetext        varchar2(4000),                               /* type text */
  oidtextlength   number,                              /* length of oid text */
  oidtext         varchar2(4000),                                /* oid text */
  transtextlength number,                 /* length of transformed view text */
  transtext       varchar2(4000),
  undertextlength number,       /* length of under clause text for sub-views */
  undertext       varchar2(4000),         /* under clause text for sub-views */
  con1_list     ku$_constraint1_list_t,               /* list of constraints */
  con2_list     ku$_constraint2_list_t                /* list of constraints */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_VIEW_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_WORKERSTATUSLIST1010
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_WORKERSTATUSLIST1010" FORCE
AS TABLE OF (sys.ku$_WorkerStatus1010)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_WORKERSTATUSLIST1010" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_WORKERSTATUSLIST1020
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_WORKERSTATUSLIST1020" FORCE
AS TABLE OF (sys.ku$_WorkerStatus1020)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_WORKERSTATUSLIST1020" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_WORKERSTATUSLIST1120
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_WORKERSTATUSLIST1120" FORCE
AS TABLE OF (sys.ku$_WorkerStatus1120)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_WORKERSTATUSLIST1120" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_WORKERSTATUSLIST1210
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_WORKERSTATUSLIST1210" FORCE
AS TABLE OF (sys.ku$_WorkerStatus1210)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_WORKERSTATUSLIST1210" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_WORKERSTATUSLIST1220
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_WORKERSTATUSLIST1220" FORCE
AS TABLE OF (sys.ku$_WorkerStatus1220)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_WORKERSTATUSLIST1220" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_WORKERSTATUS1010
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_WORKERSTATUS1010" FORCE AS OBJECT
        (
                worker_number     NUMBER,       -- Worker process identifier
                process_name      VARCHAR2(30), -- Worker process name
                state             VARCHAR2(30), -- Worker process state
                schema            VARCHAR2(30), -- Schema name
                name              VARCHAR2(4000),-- Object name
                object_type       VARCHAR2(200),-- Object type
                partition         VARCHAR2(30), -- Partition name
                completed_objects NUMBER,       -- Completed number of objects
                total_objects     NUMBER,       -- Total number of objects
                completed_rows    NUMBER,       -- Number of rows completed
                completed_bytes   NUMBER,       -- Number of bytes completed
                percent_done      NUMBER        -- Percent done current object
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_WORKERSTATUS1010" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_WORKERSTATUS1020
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_WORKERSTATUS1020" FORCE AS OBJECT
        (
                worker_number     NUMBER,       -- Worker process identifier
                process_name      VARCHAR2(30), -- Worker process name
                state             VARCHAR2(30), -- Worker process state
                schema            VARCHAR2(30), -- Schema name
                name              VARCHAR2(4000),-- Object name
                object_type       VARCHAR2(200),-- Object type
                partition         VARCHAR2(30), -- Partition name
                completed_objects NUMBER,       -- Completed number of objects
                total_objects     NUMBER,       -- Total number of objects
                completed_rows    NUMBER,       -- Number of rows completed
                completed_bytes   NUMBER,       -- Number of bytes completed
                percent_done      NUMBER,       -- Percent done current object
                degree            NUMBER        -- Degree of parallelism
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_WORKERSTATUS1020" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_WORKERSTATUS1120
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_WORKERSTATUS1120" FORCE AS OBJECT
        (
                worker_number     NUMBER,       -- Worker process identifier
                process_name      VARCHAR2(30), -- Worker process name
                state             VARCHAR2(30), -- Worker process state
                schema            VARCHAR2(30), -- Schema name
                name              VARCHAR2(4000),-- Object name
                object_type       VARCHAR2(200),-- Object type
                partition         VARCHAR2(30), -- Partition name
                completed_objects NUMBER,       -- Completed number of objects
                total_objects     NUMBER,       -- Total number of objects
                completed_rows    NUMBER,       -- Number of rows completed
                completed_bytes   NUMBER,       -- Number of bytes completed
                percent_done      NUMBER,       -- Percent done current object
                degree            NUMBER,       -- Degree of parallelism
                instance_id       NUMBER        -- Instance ID where running
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_WORKERSTATUS1120" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_WORKERSTATUS1210
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_WORKERSTATUS1210" FORCE AS OBJECT
        (
                worker_number     NUMBER,       -- Worker process identifier
                process_name      VARCHAR2(30), -- Worker process name
                state             VARCHAR2(30), -- Worker process state
                schema            VARCHAR2(30), -- Schema name
                name              VARCHAR2(4000),-- Object name
                object_type       VARCHAR2(200),-- Object type
                partition         VARCHAR2(30), -- Partition name
                completed_objects NUMBER,       -- Completed number of objects
                total_objects     NUMBER,       -- Total number of objects
                completed_rows    NUMBER,       -- Number of rows completed
                completed_bytes   NUMBER,       -- Number of bytes completed
                percent_done      NUMBER,       -- Percent done current object
                degree            NUMBER,       -- Degree of parallelism
                instance_id       NUMBER,       -- Instance ID where running
                instance_name     VARCHAR2(60), -- Instance Name where running
                host_name         VARCHAR2(64)  -- Host name where running
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_WORKERSTATUS1210" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_WORKERSTATUS1220
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_WORKERSTATUS1220" FORCE AS OBJECT
        (
                worker_number     NUMBER,       -- Worker process identifier
                process_name      VARCHAR2(128),-- Worker process name
                state             VARCHAR2(30), -- Worker process state
                schema            VARCHAR2(128),-- Schema name
                name              VARCHAR2(4000),-- Object name
                object_type       VARCHAR2(200),-- Object type
                partition         VARCHAR2(128),-- Partition name
                completed_objects NUMBER,       -- Completed number of objects
                total_objects     NUMBER,       -- Total number of objects
                completed_rows    NUMBER,       -- Number of rows completed
                completed_bytes   NUMBER,       -- Number of bytes completed
                percent_done      NUMBER,       -- Percent done current object
                degree            NUMBER,       -- Degree of parallelism
                instance_id       NUMBER,       -- Instance ID where running
                instance_name     VARCHAR2(60), -- Instance Name where running
                host_name         VARCHAR2(101), -- Host name where running
                access_method     VARCHAR2(16), -- Access Method of object
                obj_start_time    DATE,         -- Object start  time
                obj_status        DATE         -- Object status at current time
        )
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_WORKERSTATUS1220" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XMLCOLSET_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XMLCOLSET_T" FORCE IS TABLE OF (NUMBER)
NOT PERSISTABLE

/

  GRANT EXECUTE ON "SYS"."KU$_XMLCOLSET_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XMLSCHEMA_ELMT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XMLSCHEMA_ELMT_T" force as object
(
  obj_num       number,                                 /* owning table obj# */
  intcol_num    number,                             /* owning column intcol# */
  schemaoid     raw(16),                                   /* schema oid col */
  xmlschema     varchar2(700),                     /* The name of the schema */
  elemnum       number,                                    /* element number */
  element_name  varchar2(256)                     /* The name of the element */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XMLSCHEMA_ELMT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XMLSCHEMA_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XMLSCHEMA_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  owner_num     number,                                 /* owner user number */
  owner_name    varchar2(128 char),                             /* owner name */
  url           varchar2(700 char),                            /* schema URL */
-- The int_objname will be needed when Data Pump supports XML schemas
-- Fetched by (see catxdbv.sql)
--   xdb.xdb$Extname2Intname(s.xmldata.schema_url,s.xmldata.schema_owner)
--  int_objname varchar2(30),                         /* object name in obj$ */
  schemaoid     raw(16),                                       /* schema OID */
  local         number,        /* used as flags: 1 = set if local            */
                               /*                2 = set if stored as binary */
  schema_level  number,          /* depth of dependence on other xml schemas */
  schema_val    clob,                                /* the XMLSchema itself */
  stripped_val  clob                 /* the XMLSchema with username stripped */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XMLSCHEMA_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSACE_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSACE_LIST_T" force as table of (ku$_xsace_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSACE_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSACEPRIV_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSACEPRIV_LIST_T" force as table of (ku$_xsacepriv_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSACEPRIV_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSACEPRIV_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSACEPRIV_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  aclid         number,                                           /*  ACL id */
  ace_order     number,                                      /*  ACE Order # */
  privid        number,                                     /*  Privilege id */
  xs_obj        ku$_xsobj_t                                /* XS object info */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSACEPRIV_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSACE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSACE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  aclid         number,
  order_num     number,
  ace_type      number,                      /* 1 = GRANT(default), 0 = DENY */
  prin_id       number,
  prin_name     varchar2(132),
  prin_type     number,                                  /* 1=XS, 2=DB, 3=DN */
  prin_invert   number,                      /* 0 = FALSE(default), 1 = TRUE */
  start_date    timestamp,
  end_date      timestamp,
  priv_list     ku$_xsacepriv_list_t,
  xs_obj        ku$_xsobj_t,                               /* XS object info */
  xs_flag       number                                /* 2 - Oracle supplied */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSACE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSACLPARAM_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSACLPARAM_LIST_T" force
as table of (ku$_xsaclparam_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSACLPARAM_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSACLPARAM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSACLPARAM_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  xdsid         number,
  policy_name   varchar2(128),
  policy_owner  varchar2(128),
  aclid         number,
  name          varchar2(128),
  pvalue1       number,                                     /* number values */
  pvalue2       varchar2(4000),                             /* string values */
  type          number           /* 1=NUMBER; 2=VARCHAR; 3=DATE; 4=Timestamp */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSACLPARAM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSACL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSACL_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  aclid         number,
  name          varchar2(128),
  owner_name    varchar2(128),
  scid          number,
  sclass_name   varchar2(128),
  sclass_owner  varchar2(128),
  parent_aclid  number,
  parent_name   varchar2(128),
  parent_owner  varchar2(128),
  flag          number,
  ctime         timestamp,
  mtime         timestamp,
  description   varchar2(4000),
  xs_obj        ku$_xsobj_t,                               /* XS object info */
  xs_scl        ku$_xssclass_t,                      /* Security Class info */
  ace_list      ku$_xsace_list_t,
  param_list    ku$_xsaclparam_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSACL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSAGGPRIV_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSAGGPRIV_LIST_T" force as table of (ku$_xsaggpriv_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSAGGPRIV_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSAGGPRIV_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSAGGPRIV_T" force as object
(
  vers_major     char(1),                             /* UDT major version # */
  vers_minor     char(1),                             /* UDT minor version # */
  scid           number,                                /* Security Class id */
  aggr_privid    number,
  implied_privid number,
  name           varchar2(128),
  owner_name     varchar2(128)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSAGGPRIV_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSATTRSEC_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSATTRSEC_LIST_T" force as table of (ku$_xsattrsec_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSATTRSEC_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSATTRSEC_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSATTRSEC_T" force as object
(
  xdsid         number,
  priv_num      number,
  priv_name     varchar2(128),
  priv_owner    varchar2(128),
  name          varchar(128)
)
not persistable

/
--------------------------------------------------------
--  DDL for Type KU$_XSGRANT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSGRANT_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  name          varchar2(128),                                 /* Privilege */
  grantee       varchar2(128),                         /* receiver of grant */
  user_type     number,                   /* type of grantee: XS, DB,DN,EXT */
  schema        varchar2(128)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSGRANT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSINSTACL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSINSTACL_LIST_T" force
as table of (ku$_xsinst_acl_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSINSTACL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSINST_ACL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSINST_ACL_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  xdsid         number,
  order_num     number,
  aclid         number,
  acl_order_num number,
  xs_obj        ku$_xsobj_t                                /* XS object info */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSINST_ACL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSINSTINHKEY_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSINSTINHKEY_LIST_T" force
as table of (ku$_xsinst_inhkey_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSINSTINHKEY_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSINST_INHKEY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSINST_INHKEY_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  xdsid         number,
  order_num     number,
  pkey          varchar2(128),
  fkey          varchar2(4000),
  fkey_type     number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSINST_INHKEY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSINSTINH_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSINSTINH_LIST_T" force
as table of (ku$_xsinst_inh_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSINSTINH_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSINST_INH_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSINST_INH_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  xdsid         number,
  order_num     number,
  parent_owner  varchar2(128),
  parent_name   varchar2(128),
  when_cl       varchar2(4000),
  inhkey_list   ku$_xsinstinhkey_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSINST_INH_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSINST_RULE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSINST_RULE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  xdsid         number,
  order_num     number,
  rule          varchar2(4000),
  static_flg    number,               /* 0=dynamic instset; 1=static instset */
  flags         number,     /* 0x1=rule is parameterized, 0x2=has denies,etc */
  description   varchar2(4000),                              /* default null */
  instacl_list  ku$_xsinstacl_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSINST_RULE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSINSTSET_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSINSTSET_LIST_T" force as table of (ku$_xsinstset_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSINSTSET_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSINSTSET_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSINSTSET_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  xdsid         number,
  order_num     number,
  type          number,  /* 1=rule-based instance set; 2=inheritant inst set */
  instrule      ku$_xsinst_rule_t,
  inst_inh      ku$_xsinstinh_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSINSTSET_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSNSPACE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSNSPACE_T" force as object
(
  vers_major     char(1),                            /* UDT major version # */
  vers_minor     char(1),                            /* UDT minor version # */
  xs_obj         ku$_xsobj_t,
  ns_num         number,
  aclid          number,
  handler_schema varchar2(128),                      /* handler schema name */
  handler_pkg    varchar2(128),                     /* handler package name */
  handler_func   varchar2(128),                    /* handler function name */
  ctime          timestamp,
  mtime          timestamp,
  description    varchar2(4000),
  attr_list      ku$_xsnstmpl_attr_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSNSPACE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSNSTMPL_ATTR_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSNSTMPL_ATTR_LIST_T" force
as table of (ku$_xsnstmpl_attr_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSNSTMPL_ATTR_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSNSTMPL_ATTR_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSNSTMPL_ATTR_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  ns_num        number,
  attr_name     varchar2(4000),
  def_value    varchar2(4000),
  event_cbk     number
  -- 0=no event callback, 1=first-read event,
  -- 2=update event, 3=both first read and update
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSNSTMPL_ATTR_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSOBJ_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSOBJ_LIST_T" force as table of (ku$_xsobj_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSOBJ_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSOBJ_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSOBJ_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  name          varchar2(128),                              /* name of user */
  ws            varchar2(128),                         /* name of workspace */
  owner_name    varchar2(128),                              /* owner of ACL */
  tenant        varchar2(128),                                    /* Tenant */
  id            number,                                           /* TS id  */
  type          number,                                         /* TS type  */
                                                             /* 1=principal */
                                                             /* 2=sc        */
                                                             /* 3=acl       */
                                                             /* 4=priv      */
                                                             /* 5=dse       */
                                                             /* 6=roleset   */
                                                             /* 7=nstemplate*/
  status       number,                                /* 0=invalid, 1=valid */
  flags        number,                                         /* flag bits */
  early_depcnt number,
  late_depcnt  number,
  aclid        number,
  xs_prin      ku$_xsprin_t                                      /* xs$prin */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSOBJ_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSOLAP_POLICY_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSOLAP_POLICY_LIST_T" force
as table of (ku$_xsolap_policy_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSOLAP_POLICY_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSOLAP_POLICY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSOLAP_POLICY_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  olap_schema   varchar2(128),                           /* OLAP schema_name */
  logical_name  varchar2(128),                /* xs$olap_policy.logical_name */
  owner_name    varchar2(128),               /* xs$olap_policy.policy_schema */
  name          varchar2(128),                 /* xs$olap_policy.policy_name */
  enable        number
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSOLAP_POLICY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSPOLICY_PARAM_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSPOLICY_PARAM_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  xdsid         number,
  policy_name   varchar2(128),
  policy_owner  varchar2(128),
  name          varchar2(128),
  type          number           /* 1=NUMBER; 2=VARCHAR; 3=DATE; 4=Timestamp */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSPOLICY_PARAM_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSPOLICY_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSPOLICY_T" force as object
(
  vers_major       char(1),                           /* UDT major version # */
  vers_minor       char(1),                           /* UDT minor version # */
  xdsid            number,
  ctime            timestamp,
  mtime            timestamp,
  description      varchar2(4000),
  xs_obj           ku$_xsobj_t,                            /* XS object info */
  instset_list     ku$_xsinstset_list_t,
  attr_sec_list    ku$_xsattrsec_list_t,
  olap_policy_list ku$_xsolap_policy_list_t,
  rls_list         ku$_rls_policy_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSPOLICY_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSPRIN_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSPRIN_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  prin_id       number,
  type          number,
  guid          raw(16),
  ext_src       varchar2(128),
  start_date    timestamp(6) with time zone,
  end_date      timestamp(6) with time zone,
  schema        varchar2(128),
  tablespace    varchar2(128),
  profile_num   number,
  credential    varchar2(128),
  failedlogins  number,
  enable        number,
  duration      number,
  system        number,
  scope         number,
  powner        varchar2(128),
  pname         varchar2(128),
  pfname        varchar2(128),
  objacl_num    number,
  note          varchar2(4000),
  status        number,                             /* 1=ACTIVE, 2=INACTIVE */
  ctime         timestamp(6),
  mtime         timestamp(6),
  ptime         date,
  exptime       date,
  ltime         date,
  lslogontime   date,
  astatus       number,                   /* password policy account status */
  verifier      varchar2(256),                               /* XS Verifier */
  verifier_type number,                                 /* XS Verifier Type */
                                                      /* XS_SHA512      = 1 */
                                                      /* XS_SALTED_SHA1 = 2 */
  description   varchar2(4000)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSPRIN_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSPRIV_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSPRIV_LIST_T" force as table of (ku$_xspriv_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSPRIV_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSPRIV_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSPRIV_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  privid        number,                                     /*  Privilege id */
  scid          number,                                 /* Security Class id */
  ctime         timestamp,
  mtime         timestamp,
  description   varchar2(4000),
  name          varchar2(128),
  owner_name    varchar2(128),
  aggr_priv_list ku$_xsaggpriv_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSPRIV_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSRGRANT_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSRGRANT_LIST_T" force
as table of (ku$_xsrole_grant_t) not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSRGRANT_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSROLE_GRANT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSROLE_GRANT_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  grantee_num   number,
  grantee       varchar2(128),
  role_num      number,
  name          varchar2(128),
  granter_num   number,
  granter       varchar2(128),
  start_date    timestamp with time zone,
  end_date      timestamp with time zone
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSROLE_GRANT_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSROLESET_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSROLESET_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  rsid          number,                                       /* Roleset id */
  ctime         timestamp,
  mtime         timestamp,
  description   varchar2(4000),                      /* Roleset description */
  xs_obj        ku$_xsobj_t,                         /* Roleset object info */
  role_list     ku$_xsobj_list_t                /* Roles assoc with roleset */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSROLESET_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSROLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSROLE_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  xs_obj        ku$_xsobj_t,                              /* XS object info */
  xs_grant_list ku$_xsrgrant_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSROLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSSCLASS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSSCLASS_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  scid          number,                                 /* Security Class id */
  ctime         timestamp,
  mtime         timestamp,
  description   varchar2(4000),
  xs_obj        ku$_xsobj_t,                               /* XS object info */
  priv_list     ku$_xspriv_list_t,
  parent_list   ku$_xssecclsh_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSSCLASS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSSECCLSH_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSSECCLSH_LIST_T" force as table of (ku$_xssecclsh_t)
not persistable;

/

  GRANT EXECUTE ON "SYS"."KU$_XSSECCLSH_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSSECCLSH_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSSECCLSH_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(1),                              /* UDT minor version # */
  scid          number,                                 /* Security Class id */
  parent_scid   number,
  parent_name   varchar2(128),
  parent_owner  varchar2(128)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSSECCLSH_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_XSUSER_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_XSUSER_T" force as object
(
  vers_major    char(1),                             /* UDT major version # */
  vers_minor    char(1),                             /* UDT minor version # */
  name          varchar2(128),                              /* name of user */
  ws            varchar2(128),                         /* name of workspace */
  owner         varchar2(128),                              /* owner of ACL */
  tenant        varchar2(128),                                    /* Tenant */
  id            number,                                           /* TS id  */
  type          number,                                         /* TS type  */
                                                             /* 1=principal */
                                                             /* 2=sc        */
                                                             /* 3=acl       */
                                                             /* 4=priv      */
                                                             /* 5=dse       */
                                                             /* 6=roleset   */
                                                             /* 7=nstemplate*/
  status       number,                                /* 0=invalid, 1=valid */
  xs_prin      ku$_xsprin_t                                      /* xs$prin */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_XSUSER_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_1_COL_STATS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_1_COL_STATS_LIST_T" 
 force as table of (ku$_10_1_col_stats_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_1_COL_STATS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_1_COL_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_1_COL_STATS_T" force as object
(
  tab_obj_num       number,             -- table object number
  p_obj_num         number,             -- partition object number
  colname           VARCHAR2(30),       -- column name
  intcol_num        number,             -- internal column number
  distcnt           number,             -- distinct count
  lowval            raw(32),            -- low value
  hival             raw(32),            -- high value
  density           number,             -- density
  null_cnt          number,             -- null count
  avgcln            number,             -- average column length
  cflags            number,             -- flags
  eav               number,             --
  hist_gram_list    ku$_histgrm_list_t, -- histogram list
  hist_gram_min     ku$_histgrm_t,      -- minimum histogram
  hist_gram_max     ku$_histgrm_t       -- maximum histogram
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_1_COL_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_1_IND_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_1_IND_STATS_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  obj_num           number,                                   /* Index obj # */
  base_obj_num      number,                                   /* Table obj # */
  base_tab_obj      ku$_schemaobj_t,
  base_ind_obj      ku$_schemaobj_t,
  type_num          number,                   /* what kind of index is this? */
  property          number,         /* immutable flags for life of the index */
  cols              number,
  rowcnt            number,
  leafcnt           number,
  distkey           number,
  lblkkey           number,
  dblkkey           number,
  clufac            number,
  blevel            number,
  ind_flags         number,
  obj_flags         number,
  cache_info        ku$_cached_stats_t, -- cached stats information
  partition_list    ku$_10_1_pind_stats_list_t,
  cnst_col_list     ku$_tab_col_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_1_IND_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_1_PIND_STATS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_1_PIND_STATS_LIST_T" 
 force as table of (ku$_10_1_pind_stats_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_1_PIND_STATS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_1_PIND_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_1_PIND_STATS_T" force as object
(
  obj_num           number,
  schema_obj        ku$_schemaobj_t,
  bobj_num          number,
  rowcnt            number,
  leafcnt           number,
  distkey           number,
  lblkkey           number,
  dblkkey           number,
  clufac            number,
  blevel            number,
  ind_flags         number,
  obj_flags         number,
  cache_info        ku$_cached_stats_t, -- cached stats information
  subpartition_list ku$_10_1_spind_stats_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_1_PIND_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_1_PTAB_STATS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_1_PTAB_STATS_LIST_T" 
 force as table of (ku$_10_1_tab_ptab_stats_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_1_PTAB_STATS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_1_SPIND_STATS_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_1_SPIND_STATS_LIST_T" 
 force as table of (ku$_10_1_spind_stats_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_1_SPIND_STATS_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_1_SPIND_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_1_SPIND_STATS_T" force as object
(
  obj_num           number,
  schema_obj        ku$_schemaobj_t,
  bobj_num          number,
  rowcnt            number,
  leafcnt           number,
  distkey           number,
  lblkkey           number,
  dblkkey           number,
  clufac            number,
  blevel            number,
  ind_flags         number,
  obj_flags         number,
  cache_info        ku$_cached_stats_t              -- cached stats information
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_1_SPIND_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_1_TAB_PTAB_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_1_TAB_PTAB_STATS_T" force as object
(
  obj_num           number,             -- table object number
  trigflag          number,             -- table trigflag
  schema_obj        ku$_schemaobj_t,    -- table schema object
  bobj_num          number,             -- base object number for part. tabs
  sysgen_cols       number,             -- system generated columns?
  blkcnt            number,             -- block count
  rowcnt            number,             -- row count
  avgrln            number,             -- average row length
  flags             number,             -- global/user spec. stats
  cache_info        ku$_cached_stats_t, -- cached stats information
  col_stats         ku$_10_1_col_stats_list_t
                                        -- column stats list for table (part)
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_1_TAB_PTAB_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_1_TAB_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_1_TAB_STATS_T" force as object
(
  vers_major        char(1),                    -- UDT major version #
  vers_minor        char(1),                    -- UDT minor version #
  obj_num           number,                     -- object number for table
  base_obj          ku$_schemaobj_t,            -- table information
  tab_info          ku$_10_1_tab_ptab_stats_t,  -- table statistics
  ptab_info_list    ku$_10_1_ptab_stats_list_t  -- partitioned statistics
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_1_TAB_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_2_STRMCOL_LIST_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_2_STRMCOL_LIST_T" force
as table of (ku$_10_2_strmcol_t)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_2_STRMCOL_LIST_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_2_STRMCOL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_2_STRMCOL_T" force as object
(
  obj_num       number,                      /* object number of base object */
  col_num       number,                          /* column number as created */
  intcol_num    number,                            /* internal column number */
  segcol_num    number,                          /* column number in segment */
  /* col_sortkey, base_intcol_num not present on 10g */
  /* base_col_type, base_col_name added for bug fix on 10g */
  base_col_type number, /* base column type: 1 = UDT, 2 = XMLType OR or CSX, */
                        /*                   3 = XMLType as CLOB,  0 = other */
  base_col_name varchar2(128),     /* for any xmltype, name of xmltype column*/
  property      number,                     /* column properties (bit flags) */
                /* 0x0400 =    1024 = nested table columns setid             */
            /* 0x00800000 = 8388608 = string column measured in characters   */
  property2     number,                /* more column properties (bit flags) */
  name          varchar2(128),                             /* name of column */
  attrname      varchar2(4000),/* name of type attr. column: null if != type */
  type_num      number,                               /* data type of column */
  length        number,                         /* length of column in bytes */
  precision_num number,                                         /* precision */
  scale         number,                                             /* scale */
  not_null      number,                               /* 0 = nulls permitted */
                                                 /* > 0 = no NULLs permitted */
  charsetid     number,                              /* NLS character set id */
  charsetform   number,
  charlength    number,            /* maximum number of characters in string */
  lob_property  number,                    /* lob$.property if column is lob */
                                /* 0x0200 = LOB data in little endian format */
  typemd        ku$_10_2_strmcoltype_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_2_STRMCOL_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_2_STRMCOLTYPE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_2_STRMCOLTYPE_T" force as object
(
  obj_num       number,                               /* obj# of base object */
  col_num       number,                                     /* column number */
  intcol_num    number,                            /* internal column number */
  owner_name    varchar2(128),                                 /* owner name */
  name          varchar2(128),                                /* object name */
  flags         number,                                             /* flags */
                     /* flags to indicate whether column type is ADT, Array, */
                                                      /* REF or Nested table */
                           /* 0x02 - adt column                              */
                           /* 0x04 - nested table column                     */
                           /* 0x08 - varray column                           */
                           /* 0x10 - ref column                              */
                           /* 0x20 - retrieve collection out-of-line         */
                           /* 0x20 - don't strip the null image              */
                           /* 0x40 - don't chop null image                   */
                           /* 0x40 - collection storage specified            */
                           /* 0x80 - column stores an old (8.0) format image */
                          /* 0x100 - data for this column not yet upgraded   */
                          /* 0x200 - ADT column is substitutable             */
                          /* 0x400 - NOT SUBSTITUTABLE specified explicitly  */
                          /* 0x800 - SUBSTITUTABLE specified explicitly      */
                         /* 0x1000 - implicitly not substitutable            */
                         /* 0x2000 - The typeid column stores the toid       */
                         /* 0x4000 - The column is an opaque type column     */
                         /* 0x8000 - nested table name is system generated   */
  /* opqflags not present in 10g */
  toid          raw(16),                                             /* toid */
  version       number,                      /* internal type version number */
  hashcode      raw(17),                                 /* Version hashcode */
  typidcol_num  number,           /* intcol# of the type discriminant column */
  subtype_list  ku$_strmsubcoltype_list_t                /* subtype metadata */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_2_STRMCOLTYPE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_10_2_STRMTABLE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_10_2_STRMTABLE_T" force as object
(
  vers_major    char(1),                              /* UDT major version # */
  vers_minor    char(2),                              /* UDT minor version # */
  vers_dpapi    number,                           /* direct path API version */
  endianness    number,                 /* 1 = big-endian, 2 = little-endian */
  charset       varchar2(128),                           /* db character set */
  ncharset      varchar2(128),                          /* db ncharacter set */
  dbtimezone    varchar2(64),                          /* database time zone */
  fdo           raw(100),               /* platform Format Descriptor Object */
  obj_num       number,                                              /* obj# */
  owner_name    varchar2(128),                                 /* owner name */
  name          varchar2(128),                                /* object name */
  pname         varchar2(128),                             /* partition name */
  property      number,                                  /* table properties */
  col_list      ku$_10_2_strmcol_list_t                   /* list of columns */
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_10_2_STRMTABLE_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_11_2_IND_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_11_2_IND_STATS_T" force as object
(
  vers_major        char(1),                          /* UDT major version # */
  vers_minor        char(1),                          /* UDT minor version # */
  obj_num           number,                                   /* Index obj # */
  base_obj_num      number,                                   /* Table obj # */
  base_tab_obj      ku$_schemaobj_t,
  base_ind_obj      ku$_schemaobj_t,
  type_num          number,                   /* what kind of index is this? */
  property          number,         /* immutable flags for life of the index */
  cols              number,
  rowcnt            number,
  leafcnt           number,
  distkey           number,
  lblkkey           number,
  dblkkey           number,
  clufac            number,
  blevel            number,
  ind_flags         number,
  obj_flags         number,
  sample_size       number,
  analyzetime       varchar2(19),       -- timestamp when last analyzed
  cache_info        ku$_cached_stats_t, -- cached stats information
  partition_list    ku$_pind_stats_list_t,
  cnst_col_list     ku$_tab_col_list_t
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_11_2_IND_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type KU$_11_2_TAB_STATS_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."KU$_11_2_TAB_STATS_T" force as object
(
  vers_major        char(1),                    -- UDT major version #
  vers_minor        char(1),                    -- UDT minor version #
  obj_num           number,                     -- object number for table
  base_obj          ku$_schemaobj_t,            -- table information
  nested_tab_name   varchar2(30),               -- nested table name
  column_list       ku$_tab_col_list_t,         -- column list
  tab_info          ku$_tab_ptab_stats_t,       -- table statistics
  ptab_info_list    ku$_ptab_stats_list_t       -- partitioned statistics
)
not persistable

/

  GRANT EXECUTE ON "SYS"."KU$_11_2_TAB_STATS_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type LCR_ANYDATA_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR_ANYDATA_T" AS OBJECT ("SYS_XDBPD$" "XDB"."XDB$RAW_LIST_T","varchar2" CLOB,"char" CLOB,"nchar" NCLOB,"nvarchar2" NCLOB,"number" NUMBER,"raw" BLOB,"date" "LCR_DATETIME_FORMAT_T","timestamp" "LCR_DATETIME_FORMAT_T","timestamp_tz" "LCR_DATETIME_FORMAT_T","timestamp_ltz" "LCR_DATETIME_FORMAT_T","interval_ym" VARCHAR2(4000 CHAR),"interval_ds" VARCHAR2(4000 CHAR),"urowid" VARCHAR2(4000 CHAR))NOT FINAL INSTANTIABLE 

/

  GRANT EXECUTE ON "SYS"."LCR_ANYDATA_T" TO "XDB";
  GRANT EXECUTE ON "SYS"."LCR_ANYDATA_T" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR_COLUMN_VALUE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR_COLUMN_VALUE_T" AS OBJECT ("SYS_XDBPD$" "XDB"."XDB$RAW_LIST_T","column_name" VARCHAR2(4000 CHAR),"data" "LCR_ANYDATA_T","lob_information" VARCHAR2(4000 CHAR),"lob_offset" NUMBER(38),"lob_operation_size" NUMBER(38),"long_information" VARCHAR2(4000 CHAR))NOT FINAL INSTANTIABLE 

/

  GRANT EXECUTE ON "SYS"."LCR_COLUMN_VALUE_T" TO "XDB";
  GRANT EXECUTE ON "SYS"."LCR_COLUMN_VALUE_T" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR_DATETIME_FORMAT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR_DATETIME_FORMAT_T" AS OBJECT ("SYS_XDBPD$" "XDB"."XDB$RAW_LIST_T","value" VARCHAR2(4000 CHAR),"format" VARCHAR2(4000 CHAR))NOT FINAL INSTANTIABLE 

/

  GRANT EXECUTE ON "SYS"."LCR_DATETIME_FORMAT_T" TO "XDB";
  GRANT EXECUTE ON "SYS"."LCR_DATETIME_FORMAT_T" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR$_DDL_RECORD
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR$_DDL_RECORD" 
AS OPAQUE VARYING (*)
USING LIBRARY lcr_ddl_lib
(
   -- Constructor
   STATIC FUNCTION construct(
     source_database_name       in varchar2,
     command_type               in varchar2,
     object_owner               in varchar2,
     object_name                in varchar2,
     object_type                in varchar2,
     ddl_text                   in clob,
     logon_user                 in varchar2,
     current_schema             in varchar2,
     base_table_owner           in varchar2,
     base_table_name            in varchar2,
     tag                        in raw               DEFAULT NULL,
     transaction_id             in varchar2          DEFAULT NULL,
     scn                        in number            DEFAULT NULL,
     position                   in raw               DEFAULT NULL,
     edition_name               in varchar2          DEFAULT NULL,
     current_user               in varchar2          DEFAULT NULL,
     root_name                  in varchar2          DEFAULT NULL
   )
   RETURN lcr$_ddl_record,

   MAP MEMBER FUNCTION map_lcr RETURN NUMBER,

   ---------------## Accessors for lcr$_ddl_record.source_database_name
   -- This function returns the source database name. If there is
   -- no source database name, NULL is returned.
   MEMBER FUNCTION get_source_database_name RETURN varchar2,

   -- Sets the name of the source database
   MEMBER PROCEDURE set_source_database_name
   (self in out nocopy lcr$_ddl_record,
    source_database_name IN varchar2),

   --------------## Accessors for lcr$_ddl_record.command_type
   -- This FUNCTION returns command type.
   MEMBER FUNCTION get_command_type RETURN varchar2,

   -- This procedure sets command type. If an input command_type
   -- does not make sense, an exception will be raised. For example,
   -- changing INSERT to GRANT.
   MEMBER PROCEDURE set_command_type (self in out nocopy lcr$_ddl_record,
                                      command_type IN varchar2),
   --------------## Accessors for lcr$_ddl_record.object_owner
   -- This FUNCTION returns the owner of the object.
   MEMBER FUNCTION get_object_owner RETURN varchar2,

   -- This procedure sets the owner of the object.
   MEMBER PROCEDURE set_object_owner
    (self in out nocopy lcr$_ddl_record, object_owner IN VARCHAR2),

   --------------## Accessors for lcr$_ddl_record.object_name
   -- This FUNCTION returns the name of the object.
   MEMBER FUNCTION get_object_name RETURN varchar2,

   -- This procedure sets the name of the object.
   MEMBER PROCEDURE set_object_name
    (self in out nocopy lcr$_ddl_record, object_name IN VARCHAR2),

   --------------## Accessors for lcr$_ddl_record.transaction_id
   -- This function returns the transaction ID of the LCR.
   MEMBER FUNCTION get_transaction_id       RETURN VARCHAR2,

   -- This function returns the system change NUMBER (SCN) of the LCR.
   MEMBER FUNCTION get_scn RETURN NUMBER,

   --------------## Accessors for lcr$_ddl_record.object_type
   -- This FUNCTION returns the type of the object.
   MEMBER FUNCTION get_object_type RETURN varchar2,

   -- This procedure sets the type of the object.
   MEMBER PROCEDURE set_object_type
    (self in out nocopy lcr$_ddl_record, object_type IN VARCHAR2),

   --------------## Accessors for lcr$_ddl_record.logon_user
   -- This FUNCTION returns the logon user name
   MEMBER FUNCTION get_logon_user RETURN varchar2,

   -- This procedure sets the logon user name
   MEMBER PROCEDURE set_logon_user
    (self in out nocopy lcr$_ddl_record, logon_user IN VARCHAR2),

   --------------## Accessors for lcr$_ddl_record.current_schema
   -- This FUNCTION returns the current schema
   MEMBER FUNCTION get_current_schema RETURN varchar2,

   -- This procedure sets the current schema
   MEMBER PROCEDURE set_current_schema
    (self in out nocopy lcr$_ddl_record, current_schema IN VARCHAR2),

   --------------## Accessors for lcr$_ddl_record.base_table_owner
   -- This FUNCTION returns the base owner name
   MEMBER FUNCTION get_base_table_owner RETURN varchar2,

   -- This procedure sets the base owner name
   MEMBER PROCEDURE set_base_table_owner
    (self in out nocopy lcr$_ddl_record, base_table_owner IN VARCHAR2),

   --------------## Accessors for lcr$_ddl_record.base_table_name
   -- This FUNCTION returns the base table name
   MEMBER FUNCTION get_base_table_name RETURN varchar2,

   -- This procedure sets the base table name
   MEMBER PROCEDURE set_base_table_name
    (self in out nocopy lcr$_ddl_record, base_table_name IN VARCHAR2),

   --------------## Accessors for lcr$_ddl_record.ddl_text
   -- This FUNCTION returns ddl text
   MEMBER PROCEDURE get_ddl_text
    (self in lcr$_ddl_record, ddl_text IN OUT NOCOPY CLOB),

   -- This procedure sets ddl text
   MEMBER PROCEDURE set_ddl_text
    (self in out nocopy lcr$_ddl_record, ddl_text IN CLOB),

   --------------------------------------------## Methods for tag
   -- This function sets the tag for the LCR
   MEMBER PROCEDURE set_tag(self in out nocopy lcr$_ddl_record,
       tag    IN RAW),

   -- This function gets the tag for the LCR
   MEMBER FUNCTION get_tag      RETURN RAW,

   -- This function returns 'Y' or 'N' depending on whether or not
   -- tag for the LCR is NULL
   MEMBER FUNCTION is_null_tag  RETURN VARCHAR2,

   -- This procedure constructs and applys the statement from the ddl lcr
   MEMBER procedure execute(self in lcr$_ddl_record),

   -- This function returns the system change NUMBER (SCN) of the commit lcr
   -- for the transaction to which this lcr belongs.
   -- FOR INTERNAL USE ONLY
   MEMBER FUNCTION get_commit_scn RETURN NUMBER,

   -- This function returns the source time of the commit lcr
   -- for the transaction to which this lcr belongs to.
   MEMBER FUNCTION get_commit_time RETURN DATE,

   --------------## Accessors for the the optional attributes
   -- This FUNCTION returns the value for the corresponding optional attribute.
   -- If the value is NULL, then a sys.AnyData instance with a NULL
   -- value inside is returned. If no value for such an attribute exists,
   -- NULL is returned.
   MEMBER FUNCTION get_extra_attribute(
        attribute_name         IN VARCHAR2) RETURN Sys.AnyData,

   -- Overwrites the attribute value for the specified attribute
   -- If value is NULL, the existing attribute will be removed.
   MEMBER procedure set_extra_attribute(self in out nocopy lcr$_ddl_record,
        attribute_name         IN VARCHAR2,
        attribute_value        IN Sys.AnyData),

   -- Returns the minimum compatible setting when such LCR is supported
   -- by Streams.
   MEMBER FUNCTION get_compatible RETURN NUMBER,

   -- Returns the creation/redo generation time of the lcr
   MEMBER FUNCTION get_source_time RETURN DATE,

   -- Returns the thread number where the redo for the lcr was generated
   MEMBER FUNCTION get_thread_number RETURN NUMBER,

   -- Returns the position
   MEMBER FUNCTION get_position RETURN RAW,

   -- Return the LCR SCN from an XStream Out position.
   STATIC FUNCTION get_scn_from_position(position IN RAW) RETURN NUMBER,

   -- Return the commit SCN from an XStream Out position.
   STATIC FUNCTION get_commit_scn_from_position(position IN RAW) RETURN NUMBER,

   -- Returns the edition_name
   MEMBER FUNCTION get_edition_name RETURN varchar2,

   -- Sets the edition_name
   MEMBER PROCEDURE set_edition_name
    (self in out nocopy lcr$_ddl_record, edition_name IN VARCHAR2),

   --------------## Accessors for lcr$_ddl_record.current_user
   -- This FUNCTION returns the current user
   MEMBER FUNCTION get_current_user RETURN varchar2,

   -- This procedure sets the current_user
   MEMBER PROCEDURE set_current_user
    (self in out nocopy lcr$_ddl_record, current_user IN VARCHAR2),

   -- This procedure sets the source root name
   MEMBER PROCEDURE set_root_name
    (self in out nocopy lcr$_ddl_record, root_name IN VARCHAR2),
   -- This FUNCTION returns the source root name
   MEMBER FUNCTION get_root_name RETURN varchar2

)
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."LCR$_DDL_RECORD" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
359c 954
xWX5Y1x+peJxIBMQOyd7VMeM1vIwg1W6TCAGV45VFz8CXNeE1WuzJw2uutfWoXTXxRSFoehD
PlGpRT0JTco9/3IPwdktkPZJQFCkeSHKq9p4/kHHEOStCMA1UBT1nBHEIj+heBNMI2jiKMay
FfOrqMPPUQTGQdbooY/bhwTKSXRRdRvczxOcwpt8a8uhTHaGvUpaq4+tNUNDRH3a6P8d6J3w
2ZfcV0+G3S6G5NebPeJ23PkU3G5A0PtrENWZILvidDD7w59MJPD6Xl+DHwqKzu4a5X0HA3xa
t01DYuOi5j69BiHAHIV2v8PRqQHOkhoCQC3CGGCYwF8XWsctl44kxXhMZZX0LIzKCHODNpU1
Rm1dWgDqH/Szol02OZaskSL3f0RZVhWF1ZtO5GfjulSpwE0gyioKZ9PSKjVqL9yGHBvAmb86
H2xS5h1d2tIM7MGWbNxaTCsG6eNjZWv7M8wI8ROd/phMs9KxB3MpOToZRuBFRyxiQZGqA8Yc
7c6oIDrp2lRwl0GRYGYrCeVnXMNApsXmfTBZ3zRw3zzVQB9TQdaGyFERCWwWFgSsYjsOpmFn
APN+3oFgIAyLJnkK14wZp3bmBSu6O6a6DlR/ullj5EtN2kAepmFnALbkJfyk2+8Uv2bQe602
fjcnFrQl5WMxK2qUfgyL00tEJz4DldsXfnejhW8U5awPo7ONeWv3K4dYLQlUxiM6RHYdMivn
CQpqqWJpuALKDax+Wnw+pDc29mPVcJmJcK+nK1GopdU+KxjlmEjmUjdvA4e14pkx67/+7zMA
xpkhSekshYA4ioeXFEVhXjL3yTeqrTv+F+fPO80WZvmg5Dyial7l0hO1XpBP8zxQa9wOwl6/
wEzufqDuIfMOBYc/nHdlnZRPHyH15wtAS8E4sCDVahZZVEl2e+7gJjOYXBsRI2Br6p2CgM9l
omjW3eAhTwvMtabAtdi8umVq6zxaqutGVq0kg2apqXbfYfoZMd0LS6E3G7j9GdCxi+1SmXet
qe7LrGM3WKTGHoqDxT0Gsd3CjuOy66SckbFmH0BnFxq8D3hRYcFMq6IFCD/OsJxBTwx8heJd
uamK8p9itCpwuMyb0MNP9U4ct6f9ziKElyj4xAqzeQaDKy34pX7VfUC0W9P1s3/XNI5+aBvi
jaEHpFUx0LHXDdotvFVFOFSX6OYldZLlhPyorPwABm+c81a6JzP5KQDCJkTBqHRVrHmY7vY4
ZQlxJdgdoSgy3qBLaQuA5LmG9TRZjJQ5QIgweAh0p0Thom+hcBXBBlYvcawfVdjADg3dya0b
JO07IsTEK6QcuLg8h9CgiKr9yFN1x5Vic+Epk2jq9g+nRw/Y+8FlD0USpBl5upKS7GJMwPLE
yd6VMPa9aEpOF/je50UJnGRgZX57oLjCWvTB9v89o0pYM3j/LvCCG3lyWIFHQ7ZlC1A+kJ7I
LvKRH9ceI7BGewr2mH73LyXRbUzffngxwZ+yUWRqPjdGqURVQKX4A9dkZnZz4oldGki32Ok0
HP9uI7y2z9kPuaHav8VBVbjAt2V/On9Yy1cPtLHpJRUX68gP5qk7vZ7+kzEWH9bzHOZMk6Mk
31lAGOMzqQiRKAsgjirK7HxGqF3sw89nLwt6HtZP87wnxu16psN2X3/7nDuH9d2IyLfqx+xD
dpBfH9xc/YvkIKZ284hClOIiYGn0SYJ38zHZ3fcy1wbHSxMEDlc0Ftdy1Y0toPh2Xnxk+Ipe
1vfa6Cvl8UkGFFLriD46JvbYClU+Vfm04iTCeSOT1jsF1Q8KgJdbik5P4BhedgO0G77+XNUG
eEbrsuCqVGrTYoxkV1SLmN1M70Ye142UFwLRzD4tcV7NMhuE++qIYxZ9M5x/46aPd+hpu9oz
t0A+N3X/r9n8l5mxJ1YjrF8onPtKur9+eOWbEC5kteGqGWcKjWRPuPSaL3CKKmowp1sagryK
gXnaw6noWqJKIfmWVAvZSX+HaUK6MRMw+047UwAeaPGTLBkZ6jHd82y3mo3RZ4aYwGaZwadJ
kYtE4BeMvXiq+71xY7RTTFwcxin6rR9DVgCksSly5s/kZ72f69N/y9TnkJUibWL4HlNMeTMs
IGp01mNWEYnogtMWtrQR0OomnrljNvMYtc7JZ7Bo5YHofSswBv2SgUqTyq9aq8qL7zvCIgjv
ZpwqruoqVJJCXn/zY/4TgOibMXL5al7UMfju0uztHDO1r3yNbcWaIqQNtbFtaNYaXqv/QlPE
erknUaik5Nh9/sDq9ja0rkqvfhOtR13SMDC6dtx42E1g3ZBHjM9kbfFEyFMlq210+51TCxX7
TO7RfK0p7V7qgaG+mFd1bDBgyMeaLNnuNeS1cIWjGXOWteGzVnsG

/

  GRANT EXECUTE ON "SYS"."LCR$_DDL_RECORD" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR_EXTRA_ATTRIBUTE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR_EXTRA_ATTRIBUTE_T" AS OBJECT ("SYS_XDBPD$" "XDB"."XDB$RAW_LIST_T","attribute_name" VARCHAR2(128 CHAR),"attribute_value" "LCR_ANYDATA_T")NOT FINAL INSTANTIABLE 

/

  GRANT EXECUTE ON "SYS"."LCR_EXTRA_ATTRIBUTE_T" TO "XDB";
  GRANT EXECUTE ON "SYS"."LCR_EXTRA_ATTRIBUTE_T" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR_EXTRA_ATTRIBUTE_VALUES_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR_EXTRA_ATTRIBUTE_VALUES_T" AS OBJECT ("SYS_XDBPD$" "XDB"."XDB$RAW_LIST_T","extra_attribute_value" "LCR_EXTRA_ATTRIBUTE_VALUE_T")FINAL INSTANTIABLE 

/

  GRANT EXECUTE ON "SYS"."LCR_EXTRA_ATTRIBUTE_VALUES_T" TO "XDB";
  GRANT EXECUTE ON "SYS"."LCR_EXTRA_ATTRIBUTE_VALUES_T" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR_EXTRA_ATTRIBUTE_VALUE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR_EXTRA_ATTRIBUTE_VALUE_T" AS VARRAY(2147483647) OF "LCR_EXTRA_ATTRIBUTE_T"

/

  GRANT EXECUTE ON "SYS"."LCR_EXTRA_ATTRIBUTE_VALUE_T" TO "XDB";
  GRANT EXECUTE ON "SYS"."LCR_EXTRA_ATTRIBUTE_VALUE_T" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR_NEW_VALUES_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR_NEW_VALUES_T" AS OBJECT ("SYS_XDBPD$" "XDB"."XDB$RAW_LIST_T","new_value" "LCR_OLD_NEW_VALUE_T")FINAL INSTANTIABLE 

/

  GRANT EXECUTE ON "SYS"."LCR_NEW_VALUES_T" TO "XDB";
  GRANT EXECUTE ON "SYS"."LCR_NEW_VALUES_T" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR_OLD_NEW_VALUE_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR_OLD_NEW_VALUE_T" AS VARRAY(2147483647) OF "LCR_COLUMN_VALUE_T"

/

  GRANT EXECUTE ON "SYS"."LCR_OLD_NEW_VALUE_T" TO "XDB";
  GRANT EXECUTE ON "SYS"."LCR_OLD_NEW_VALUE_T" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR_OLD_VALUES_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR_OLD_VALUES_T" AS OBJECT ("SYS_XDBPD$" "XDB"."XDB$RAW_LIST_T","old_value" "LCR_OLD_NEW_VALUE_T")FINAL INSTANTIABLE 

/

  GRANT EXECUTE ON "SYS"."LCR_OLD_VALUES_T" TO "XDB";
  GRANT EXECUTE ON "SYS"."LCR_OLD_VALUES_T" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR$_PARAMETER_LIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR$_PARAMETER_LIST" FORCE AS TABLE
  OF lcr$_procedure_parameter;

/
--------------------------------------------------------
--  DDL for Type LCR$_PROCEDURE_PARAMETER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR$_PROCEDURE_PARAMETER" FORCE AS OBJECT (
  name           VARCHAR2(4000),  -- parameter name
  data           sys.AnyData      -- parameter value
);

/
--------------------------------------------------------
--  DDL for Type LCR$_PROCEDURE_RECORD
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR$_PROCEDURE_RECORD" 
                                      
AS OPAQUE VARYING (*)
USING LIBRARY lcr_prc_lib
(
   MAP MEMBER FUNCTION map_lcr RETURN NUMBER,
  MEMBER FUNCTION  get_source_database_name RETURN VARCHAR2,
   MEMBER FUNCTION  get_scn                  RETURN NUMBER,
  MEMBER FUNCTION  get_transaction_id       RETURN VARCHAR2,
   MEMBER FUNCTION  get_publication          RETURN VARCHAR2,
   MEMBER FUNCTION  get_package_owner        RETURN VARCHAR2,
   MEMBER FUNCTION  get_package_name         RETURN VARCHAR2,
   MEMBER FUNCTION  get_procedure_name       RETURN VARCHAR2,
   MEMBER FUNCTION  get_parameters           RETURN SYS.LCR$_PARAMETER_LIST,
   MEMBER FUNCTION  get_compatible           RETURN NUMBER,
   MEMBER FUNCTION get_source_time RETURN DATE,
   MEMBER FUNCTION get_thread_number RETURN NUMBER,
   MEMBER FUNCTION get_position RETURN RAW,
   MEMBER FUNCTION  get_tag                  RETURN RAW,
   MEMBER FUNCTION is_null_tag  RETURN VARCHAR2,
   MEMBER FUNCTION  get_root_name            RETURN VARCHAR2,
   MEMBER FUNCTION  get_logon_user           RETURN VARCHAR2,
   MEMBER FUNCTION  get_current_user         RETURN VARCHAR2,
   MEMBER FUNCTION  get_default_user         RETURN VARCHAR2
)
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."LCR$_PROCEDURE_RECORD" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
fe4 3c1
Ye3wt3nXe+nbbUhiaJjdoVPIqOowg9enTCCDfI5Av9dkV+Ujs/I9IYHAXJZ2xho8rKQx3Ijq
Kx9lQJ42Ag7NwXJS5s4EFGznQKLKi860u8dKJEqrNjZ2uctw02PEI0EbzHpx6C3chhahB6kU
9XCBf64oRFDvAAfnfUB01ZeT+U8zLaY1wxYES1DsLhemxTfP6qJ8XR2EAOF4uwP621m2KbNm
7FWprqQ326Zfncs2POh5pPjD7aaLWYi/58h8vMkE3nm/Q7UoyvSaYrw3ZZzgGlOmKXoi2KC4
WZmt/q6+I1QAmOcczKObaXBRTBrI1hSzKyCt/9XTzkT0gNqqAD1LQCfWNrkiZofFNVgX23ha
xn7akixQkx9zhO6W8SMn4TPzFjd1omE7JhLPtAMkhu5EMGFlUuNs56Qkv9cFgNZHnCRKwVe9
C5bhFZrIgCG7gmajZzRJnXLCsquED/xIxL/BuwMpWMMsjlZXG0gWowzccu++Pkc9S2NkdoVy
yTMFDfrjyOXrFqpFVxadyS2qkSYF54mbxV5E9uCHimmE7SOagxzX+HZOh3Dkdk92Es5g+vX5
p3MHTsReEoE+RYesi6sUkCMYV+uZThPwsAioiWo+2ATAFG2zMbfiLm8LZAJplqzK6h9T7MLm
MrCrd2tH56A5chsmN2L4jdQgajHAI+F2w/VLNx970ICvisMrTVe7sUzyhLwnpAbMYfb5knG2
DuA769FoeTB6apwSguE+QKwNpp2Krs+hYXn2u8Jbx9dNOhL5M3LkgUNn3WwN8NeINvx4kEkb
eU6Rf//U+ooaC5XTwwrCn5OLukcW9uUgyMTWs2lyNPDia25rCcGtxJvQvG7UA37196Po0aWs
xz2bSC63FJj10zOozmiCXFIWBcPgt5GgcRqxZzeEqOdeYq1RASNsdtEpUVAg2X9fqofxanbt
rk/54TaMLAA=

/

  GRANT EXECUTE ON "SYS"."LCR$_PROCEDURE_RECORD" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR$_ROW_LIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR$_ROW_LIST" AS TABLE OF sys.lcr$_row_unit;

/

  GRANT EXECUTE ON "SYS"."LCR$_ROW_LIST" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR$_ROW_RECORD
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR$_ROW_RECORD" 
AS OPAQUE VARYING (*)
USING LIBRARY lcr_row_lib
(
   -- Constructor
   STATIC FUNCTION construct(
     source_database_name       in varchar2,
     command_type               in varchar2,
     object_owner               in varchar2,
     object_name                in varchar2,
     tag                        in raw               DEFAULT NULL,
     transaction_id             in varchar2          DEFAULT NULL,
     scn                        in number            DEFAULT NULL,
     old_values                 in sys.lcr$_row_list DEFAULT NULL,
     new_values                 in sys.lcr$_row_list DEFAULT NULL,
     position                   in raw               DEFAULT NULL,
     statement                  in varchar2          DEFAULT NULL,
     bind_variables             in sys.lcr$_row_list DEFAULT NULL,
     bind_by_position           in varchar2          DEFAULT 'N',
     root_name                  in varchar2          DEFAULT NULL
   )  RETURN lcr$_row_record,

   MAP MEMBER FUNCTION map_lcr RETURN NUMBER,

   ---------------## Accessors for lcr$_row_record.source_database_name
   -- Returns the source database name
   MEMBER FUNCTION get_source_database_name RETURN varchar2,

   -- Sets the source database name
   MEMBER PROCEDURE set_source_database_name
   (self in out nocopy lcr$_row_record, source_database_name IN varchar2),

   --------------## Accessors for lcr$_row_record.command_type
   -- Returns the command type of the LCR
   MEMBER FUNCTION get_command_type RETURN VARCHAR2,

   -- Sets the command type
   MEMBER PROCEDURE set_command_type (self in out nocopy lcr$_row_record,
                                      command_type IN VARCHAR2),
   --------------## Accessors for lcr$_row_record.object_owner
   -- Sets the object owner
   MEMBER procedure set_object_owner
    (self in out nocopy lcr$_row_record, object_owner IN VARCHAR2),

   -- Returns the object owner
   MEMBER FUNCTION get_object_owner RETURN varchar2,

   --------------## Accessors for lcr$_row_record.object_name
   -- Returns the object name
   MEMBER FUNCTION get_object_name RETURN varchar2,

   -- Sets the object name
   MEMBER procedure set_object_name
    (self in out nocopy lcr$_row_record, object_name IN VARCHAR2),

   --------------## Accessors for the the column values
   -- This FUNCTION returns the old or new value for the corresponding column.
   -- value_type can only be 'OLD' or 'NEW'.
   -- If the value is NULL, then a sys.AnyData instance with a NULL
   -- value inside is returned. If no value for such a column exists,
   -- NULL is returned.
   -- If use_old is 'Y' and value_type is NEW, and no new value exists then
   -- returns the corresponding old value. If N and value_type is new, then
   -- does not return the old value if new value does not exist.
   -- If the value_type is old or if the command_type of the row LCR is not
   -- UPDATE, then the value of the use_old parameter is ignored.
   MEMBER FUNCTION get_value(
        value_type          IN VARCHAR2,
        column_name         IN VARCHAR2,
        use_old             IN VARCHAR2  DEFAULT 'Y') RETURN Sys.AnyData,

   -- Overwrites the old or new value for the specified column
   MEMBER procedure set_value(self in out nocopy lcr$_row_record,
        value_type          IN VARCHAR2,
        column_name         IN VARCHAR2,
        column_value        IN Sys.AnyData),

   -- Returns long information for the column. Could be one of the following
   --    dbms_lcr.not_a_long
   --    dbms_lcr.null_long
   --    dbms_lcr.inline_long
   --    dbms_lcr.long_chunk
   --    dbms_lcr.last_long_chunk
   -- If use_old is 'Y' and value_type is NEW, and no new value exists then
   -- returns the corresponding old value. If N and value_type is new, then
   -- does not return the old value if new value does not exist.
   -- If the value_type is old or if the command_type of the row LCR is not
   -- UPDATE, then the value of the use_old parameter is ignored.
   MEMBER FUNCTION get_long_information(
        value_type          IN VARCHAR2,
        column_name         IN VARCHAR2,
        use_old             IN VARCHAR2  DEFAULT 'Y') RETURN NUMBER,

   -- Returns lob information for the column. Could be one of the following
   --    dbms_lcr.not_a_lob
   --    dbms_lcr.null_lob
   --    dbms_lcr.inline_lob
   --    dbms_lcr.empty_lob
   --    dbms_lcr.lob_chunk
   --    dbms_lcr.last_lob_chunk
   -- If use_old is 'Y' and value_type is NEW, and no new value exists then
   -- returns the corresponding old value. If N and value_type is new, then
   -- does not return the old value if new value does not exist.
   -- If the value_type is old or if the command_type of the row LCR is not
   -- UPDATE, then the value of the use_old parameter is ignored.
   MEMBER FUNCTION get_lob_information(
        value_type          IN VARCHAR2,
        column_name         IN VARCHAR2,
        use_old             IN VARCHAR2  DEFAULT 'Y') RETURN NUMBER,

   -- Sets lob information for the column. An exception is raised if
   -- column doesn't exist. Valid values for lob_information
   --    dbms_lcr.not_a_lob
   --    dbms_lcr.null_lob
   --    dbms_lcr.inline_lob
   --    dbms_lcr.empty_lob
   --    dbms_lcr.lob_chunk
   --    dbms_lcr.last_lob_chunk
   MEMBER PROCEDURE set_lob_information(self in out nocopy lcr$_row_record,
        value_type          IN VARCHAR2,
        column_name         IN VARCHAR2,
        lob_information     IN NUMBER),

   -- Returns lob offset for the column. value_type can only be 'OLD' or
   -- 'NEW'. If no value exists for the column
   -- or if there is no lob offset for the column, NULL is returned
   MEMBER FUNCTION get_lob_offset(
        value_type          IN VARCHAR2,
        column_name         IN VARCHAR2) RETURN NUMBER,

   -- Sets lob offset for the column. An exception is raised if
   -- column doesn't exist
   MEMBER PROCEDURE set_lob_offset(self in out nocopy lcr$_row_record,
        value_type          IN VARCHAR2,
        column_name         IN VARCHAR2,
        lob_offset          IN NUMBER),

   -- Returns operation size for the lob column. value_type can only be
   -- 'OLD' or 'NEW'. If no value exists for the column
   -- or if this is not an out-of-line lob column
   -- or if the LCR operation is not LOB_ERASE or LOB_TRIM,
   -- NULL is returned
   MEMBER FUNCTION get_lob_operation_size(
        value_type          IN VARCHAR2,
        column_name         IN VARCHAR2) RETURN NUMBER,

   -- Sets the operation size for the lob column. An exception is raised if
   -- column doesn't exist.
   -- Applicable to lob_erase and lob_trim only
   MEMBER PROCEDURE set_lob_operation_size(self in out nocopy lcr$_row_record,
        value_type          IN VARCHAR2,
        column_name         IN VARCHAR2,
        lob_operation_size  IN NUMBER),

   -- Returns xml information for the column. Could be one of the following
   --    dbms_lcr.not_xml
   --    dbms_lcr.xml_doc
   --    dbms_lcr.xml_diff
   MEMBER FUNCTION get_xml_information(
        column_name         IN VARCHAR2) RETURN NUMBER,

   -- Sets xml information for the column. An exception is raised if
   -- column doesn't exist. Valid values for xml_flags
   --    dbms_lcr.not_xml
   --    dbms_lcr.xml_doc
   --    dbms_lcr.xml_diff
   -- The xmlschema owner and url can also be set.
   MEMBER PROCEDURE set_xml_information(self in out nocopy lcr$_row_record,
        column_name         IN VARCHAR2,
        xml_information     IN NUMBER),

   -- Returns a list of old or new values, depending on the value type
   -- specified
   -- If use_old is 'Y' and value_type is NEW, then returns a list of all
   -- new values in the LCR. If a new value does not exist in the list, then
   -- returns the corresponding old value. Therefore, the returned list
   -- contains all existing new values and old values for the new values that
   -- do not exist. If N and value_type is new, then returns a list of all
   -- new values in the LCR without returning any old values.
   -- If the value_type is old or if the command_type of the row LCR is not
   -- UPDATE, then the value of the use_old parameter is ignored.
   MEMBER FUNCTION get_values(
        value_type          IN VARCHAR2,
        use_old             IN VARCHAR2  DEFAULT 'Y')
        return sys.lcr$_row_list,

   -- Replaces all the old values or all the new values for the LCR,
   -- depending on the value type specified
   MEMBER procedure set_values(self in out nocopy lcr$_row_record,
        value_type          IN VARCHAR2,
        value_list          IN sys.lcr$_row_list),

   -- Deletes the old or new values depending on the value type
   -- specified. An exception is raised if the column doesn't exist
   -- value_type is last in order to let default be useful
   MEMBER procedure delete_column(self in out nocopy lcr$_row_record,
       column_name    IN varchar2,
       value_type     IN varchar2 DEFAULT '*'),

   -- Keeps the old or new values depending on the value type
   -- specified. An exception is raised if the column list is NULL
   -- value_type is last in order to let default be useful
   MEMBER procedure keep_columns(self in out nocopy lcr$_row_record,
       column_list    IN varchar2,
       value_type     IN varchar2 DEFAULT '*'),

   -- Adds the value as old or new, depending on the value type
   -- specified, for the column
   MEMBER procedure add_column(self in out nocopy lcr$_row_record,
       value_type     IN varchar2,
       column_name    IN varchar2,
       column_value   IN Sys.AnyData),

   --  This procedure renames the old column, new column or
   --  both (default) depending on the value type specified
   -- value_type is last in order to let default be useful
   MEMBER procedure rename_column(self in out nocopy lcr$_row_record,
       from_column_name  IN varchar2,
       to_column_name    IN varchar2,
       value_type        IN varchar2  DEFAULT '*'),

   --------------## Accessors for lcr$_row_record.source_database_name
   -- This function returns the transaction ID of the LCR.
   MEMBER FUNCTION get_transaction_id       RETURN VARCHAR2,

   -- This function returns the system change NUMBER (SCN) of the LCR.
   MEMBER FUNCTION get_scn RETURN NUMBER,

   --------------------------------------------## Methods for tag
   -- This function sets the tag for the LCR
   MEMBER PROCEDURE set_tag(self in out nocopy lcr$_row_record,
       tag    IN RAW),

   -- This function gets the tag for the LCR
   MEMBER FUNCTION get_tag      RETURN RAW,

   -- This function returns 'Y' or 'N' depending on whether or not
   -- tag for the LCR is NULL
   MEMBER FUNCTION is_null_tag  RETURN VARCHAR2,

   -- This procedure constructs and applys the statement from the row lcr
   MEMBER procedure execute(self in lcr$_row_record,
                            conflict_resolution in boolean),
   -- This function returns the system change NUMBER (SCN) of the commit lcr
   -- for the transaction to which this lcr belongs.
   -- FOR INTERNAL USE ONLY
   MEMBER FUNCTION get_commit_scn RETURN NUMBER,

   -- This function returns the source time of the commit lcr
   -- for the transaction to which this lcr belongs to.
   MEMBER FUNCTION get_commit_time RETURN DATE,

   -- This FUNCTION returns the value for the corresponding optional attribute.
   -- If the value is NULL, then a sys.AnyData instance with a NULL
   -- value inside is returned. If no value for such an attribute exists,
   -- NULL is returned.
   MEMBER FUNCTION get_extra_attribute(
        attribute_name         IN VARCHAR2) RETURN Sys.AnyData,

   -- Overwrites the attribute value for the specified attribute
   MEMBER procedure set_extra_attribute(self in out nocopy lcr$_row_record,
        attribute_name         IN VARCHAR2,
        attribute_value        IN Sys.AnyData),

   -- Returns the minimum compatible setting when such LCR is supported
   -- by Streams.
   MEMBER FUNCTION get_compatible RETURN NUMBER,

   -- Replaces LONG/LONG RAW chunks to fixed width CLOB/BLOB chunks
   -- in the given LCR.
   MEMBER PROCEDURE convert_long_to_lob_chunk(
     self in out nocopy lcr$_row_record),

   -- Returns the creation/redo generation time of the lcr
   MEMBER FUNCTION get_source_time RETURN DATE,

   -- Returns the thread number where the redo for the lcr was generated
   MEMBER FUNCTION get_thread_number RETURN NUMBER,

   -- Returns the position
   MEMBER FUNCTION get_position RETURN RAW,

   -- Return the LCR SCN from an XStream Out position.
   STATIC FUNCTION get_scn_from_position(position IN RAW) RETURN NUMBER,

   -- Return the commit SCN from an XStream Out position.
   STATIC FUNCTION get_commit_scn_from_position(position IN RAW) RETURN NUMBER,

   -- Returns the SQL statement in a CLOB.
   MEMBER PROCEDURE get_row_text
      (self     IN lcr$_row_record,
       row_text IN OUT NOCOPY CLOB),

   -- Returns the WHERE CLAUSE in a CLOB.
   MEMBER PROCEDURE get_where_clause
      (self     IN lcr$_row_record,
       where_clause IN OUT NOCOPY CLOB),

   -- Returns the SQL statement, which will use bind
   -- variables. The values for the bind variables are
   -- in variable_list, and are in order of the binds.
   -- bind_var_syntax can have value ':' (binds will
   -- be of form :1, :2, etc.) or '?' (binds will be
   -- of the form '?').
   MEMBER PROCEDURE get_row_text
      (self            IN            lcr$_row_record,
       row_text        IN OUT NOCOPY CLOB,
       variable_list   IN OUT NOCOPY sys.lcr$_row_list,
       bind_var_syntax IN            VARCHAR2 DEFAULT ':'),

   -- Returns the WHERE CLAUSE , which will use bind
   -- variables. The values for the bind variables are
   -- in variable_list, and are in order of the binds.
   -- bind_var_syntax can have value ':' (binds will
   -- be of form :1, :2, etc.) or '?' (binds will be
   -- of the form '?').
   MEMBER PROCEDURE get_where_clause
      (self            IN            lcr$_row_record,
       where_clause    IN OUT NOCOPY CLOB,
       variable_list   IN OUT NOCOPY sys.lcr$_row_list,
       bind_var_syntax IN            VARCHAR2 DEFAULT ':'),

   -- This function returns 'Y' or 'N' depending on whether or not
   -- the LCR is a statement LCR
   MEMBER FUNCTION is_statement_lcr  RETURN VARCHAR2,

   -- This procedure sets the SQL statment with bind variables.
  -- Use lcr$_row_unit.column_name for the bind variable name
  -- for bind by name.
  -- Specify the bind position in lcr$_row_unit.column_name for
  -- bind by position.
  MEMBER PROCEDURE set_row_text
    (self in out nocopy lcr$_row_record,
     row_text           IN CLOB,
     variable_list IN sys.lcr$_row_list DEFAULT NULL,
     bind_by_position   IN varchar2 DEFAULT 'N'),

   --
   -- get base object name of a row LCR
   --
   MEMBER FUNCTION get_base_object_id  RETURN NUMBER,

   MEMBER FUNCTION get_object_id  RETURN NUMBER,

   -- This procedure sets the source root name
   MEMBER PROCEDURE set_root_name
    (self in out nocopy lcr$_row_record, root_name IN VARCHAR2),
   -- This FUNCTION returns the source root name
   MEMBER FUNCTION get_root_name RETURN varchar2
)
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."LCR$_ROW_RECORD" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
4e85 cd0
gBOt08UJeAiDA6OC5QBs8R/3fAUwg81xHiCG39OdcjrV4+k3FAcOV47+Jm0/DpGDzNVeQBwT
gRCowkq/ljsLH2EFTNJkloEbJu7ZK/Gfu1+R95T6s0cgHG6IzP+cmayskcKiEz35/WGaEMn4
gSfEqmdXhB/nAa3/jC8umauLzObMdVBWrm18wQvq5JxyWhghFH6sx3aPX3wYwTbpju1q3jBt
67tI5ZM4ZU8LezhCQp0zgnWNNiTxfBf6pGwmMisy73PYdnJQj2oXY87cvleoXnHbrVHpdnj2
XlmCcaFHUfqly+gNk1qv+CXgHOcJN/a3MBUZ7lPKWDTfusma1DiSsgy32m+Ak8vYY125XQ1t
FG3FgUGpXN6okdwR4tgyr8XjET64q+7Kuc6fXb6j/VZY25gIvJzSwofsG/QnIstWTmOx5Hhs
QvcJdy2c8XyhSWNkoohmu8fxCXaMGJITD2ETLkNeClUzpTmVzMgG9ZPieRSZzsKYFp1ic8XB
bbPhsM9sSfEyyzx0VX3tYr2tot6iF3ilMGIZFJ5SQRoWmVkiPlDhxiqgZ3KUETeGyaPCrECg
w0SsoN0W3d5S2byzSh4RNcw1j5l2LCXmknyv9D04Bjkcsfs5ArLc1VlTA33UKqDdfGZQ4cYq
oN1LZqkoSvYRNzhgIc8RcVsiBL82qK9SsgtwdtMEHcYqoN3dFFDhxjLm3zfyiCfi3BiO6mi4
/M2azXCIfRmHparBMDeLGoNhRTapDwt6Pw317EzXdnMipCsFtlEP/c5pYAbec2Rg7P8gJ7yY
LI06iPqIBKj9e805cLbBNdXclvtFwAaYK2LBuu5C9xuo7uyozwBH0lyEBGxEmg7xfJNWPUwm
LTYS8Z95p85wyLQ1N2y2lG8fsLlw08+QEKuBaPgYsMD+vFFm3VTw/8HYM9w5LEz+rPgWMCTs
rPj41veZaWMOofBlY8Pbrk8KhscHQTfRsquNNgiz5UPvs4FQ+JN9WiecV1AB98lDhOyc04Ak
17siT0P6kPVNc5mDydfJpoOpFCXj38qzgUv7qm6mH75piFBstUlGwH/u/iE3zesKdakKss7U
nx9z+EA/ql+gf2ddZ15LN/PdGuTltFMnXWT5728a1mGuiOMG4NwCIYh1XqXbrOrp7Pyd9gRW
lmS6zadivVmcAaPgBbg/mnrZSsdrhZamVocc0dP79+HHqkJTWqJaVBSHHNF7nV1Qc2en80n1
1GZ7LiVC6Yrlx/E3WN0rprQYSAbdcHF+6OKhVovCMSJIJLlg2eKdIpjzbdqRfPM7jTYPN/fk
mmBgLfO4liti2zgkP2DvCVP3LCy0M5vMzaLxLgvzb7dQMTZLfhbEULKky6MlWoR8Wm8aGc9U
b3MHXywoegD4pc7GkgoIfhdJMsDy6V5ku5xlhCI/reinqDGg+Sa734Tx9nNcrjkV6TJVr1NV
Es1IepDA2ogKfKXHg1XG0LUF0fYzVUWRx7+xLeVFydzp3COnaI5IPMm0k40TPICuJU/G/z70
EO+1sQ0Fnjaag52Hh21z1z1qtjzc1DBIOpu+rknCq9oFHtx/XgU1+s9mQ97N8ynbQO2hwM72
MqGHjO7u89wD9wAtQV6QO7MsmFLndQcXpVdUF3sA6mXSKLsCbTyPW6giqH8XiT0cBVfwgtLA
z/0V0fZg0uX/JvlC3jVzOA0FX/5Q1Ox/X48P6JvYW/lJ5m+yijH0U3iL5HpTtRVSJF90z/aY
nqWEHqQov+cjelhuEaWjcKSk5twxNCUN+E7kZzBLTuqhPCGDhM27ZyA+PiDr5f+MIkHo+m4+
bsv2GXo48hU516unE7hhcDJLcxGepBhJFhF8V8MlabgIdU97EZ/DEkJIs0VRED4NEiTQ7oth
v9CXdTsQfw2UskX31g8sc/X0Bd6U2Oq9CtZc3L7DcRCjrv+kbEMbaqPGdRLw4rf3kjUOVODM
HUoKImlJ9tTCYK1IHr98j85DCO7YC4eHgB2KgAd0wZSE/D0Te07YQ1fAPi7v7YxDMItDcVCw
rWpMnWRwgROGc7ADNDmBSNZF74vNa4u5rEZfL0JnhEhyDnjOUvJhqc/iLxgeBXeTBp7oZpB2
zNSXvxQnk0DiEdOLUhLSbzlYXMDsBYGnoRm3S4X4b+jQrcDo6FKOi89I1O/J8MvpNfHbNl5M
nvWdrUuBnIH8xIbsAHrwVJqydd5tcIEfwlnclpV0wXbiDtuM95iYcCljmE9Yk5rQt84+br2Y
nGWbdhfqjhRDZ7DmKRzSyqBrRlFPv8Ad5FYqWkCwZTuxNg6eXPETr5QWAWEcykpoeOslpB4i
Q0IFJs98g/ihbTXxevwohMA90wrKxsawgQxaZv4xIdNWU1tEf+5CcGoghH/jFsHiRXoDyXsK
Vetk/sb3AcWsqtoDZDQ21gwG+1jpw2hGIdOc/sr1UXS6/BD/ztrx30maMKSjIiznIJmSt8cF
1NP735jNsLvfmCjvqcXfT3S77omfaJ1c3ktdSApXwmo/lf8hF2xyDf2ga8u+Lr1BS4Pne3Mz
ZUIxIZy5zppzkvk4+AXrfQaU5hKvxb2RaHrEzeghHSBsEx9AnbWvqdwQfXjsUdU4lSh9D7Fu
4WsfCXtxi42Bz9MXohwe6niCU4DpXrPEGvgTTrg6sgD+kW4eirFV7gjOUwW8zwlKWQhRPyj8
So1d/Y/824yhsqDGRwXp8ny9Qt2+n6mGU/nAdpQYp6TR3xeo3MVniX8NXeYrEblIofJUBIZR
A9V4MNsCSebSQiobZ9OEplqearh5/HekguzDT26eLEwIdz7iD2OPFqB1HupSAlt6FXevC9lI
TPgcltmnIca7lNRAcqm8nfUNSDPuUvilRRuH0PpQoNA1N6hVCtnhehDxP/uMv+hVBHPX2Z8U
EvnaMf/BPX2nx0W7nUVEk0G4oogehx5kh3v+zVaktO7O9ZETPfky/Vk87xwJojK7sk2ooN8g
r+Rchr+1I5R9EpndwYt3J/4HwUfnRluUg0veMFR/poVwtUqataY6qVfLRrO87+pzppqYFP58
VIF0A2MwbMjio4/x8N86EsMVMSfjtTEpEWEiQG5d9Z0So4rLIM5pCmOhfHIw9K0M+uFNehqW
2sg9dxCiWYOWcy/i4RGfLMbJofrR6APhcjAyijdDzso/EAQn5dv8uojs6nuM+kJidhyIImgs
PH7BcyHctZCZMlvG9ELBOUpgyS1QibARiAQoU1UHT8SWHewkh8lNNonOY8S1zrayjcC1

/

  GRANT EXECUTE ON "SYS"."LCR$_ROW_RECORD" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LCR$_ROW_UNIT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LCR$_ROW_UNIT" AS OBJECT (
  column_name        VARCHAR2(4000),
  data               SYS.ANYDATA,
  lob_information    NUMBER,
  lob_offset         NUMBER,
  lob_operation_size NUMBER,
  long_information   NUMBER,
  -- as we are adding a new attribute, create a constructor for
  -- older type def to preserve backwards compatibility.
  CONSTRUCTOR FUNCTION lcr$_row_unit(
    column_name        VARCHAR2,
    data               SYS.ANYDATA,
    lob_information    NUMBER,
    lob_offset         NUMBER,
    lob_operation_size NUMBER)
    RETURN SELF AS RESULT
  );
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."LCR$_ROW_UNIT" AS
  CONSTRUCTOR FUNCTION lcr$_row_unit(
    column_name        VARCHAR2,
    data               SYS.ANYDATA,
    lob_information    NUMBER,
    lob_offset         NUMBER,
    lob_operation_size NUMBER)
    RETURN SELF AS RESULT
  AS
  BEGIN
    SELF.column_name        := column_name;
    SELF.data               := data;
    SELF.lob_information    := lob_information;
    SELF.lob_offset         := lob_offset;
    SELF.lob_operation_size := lob_operation_size;
    SELF.long_information   := dbms_lcr.not_a_long;
    RETURN;
  END;
END;

/

  GRANT EXECUTE ON "SYS"."LCR$_ROW_UNIT" TO PUBLIC WITH GRANT OPTION;
--------------------------------------------------------
--  DDL for Type LOGMNR$ALWAYSSUPLOG_SREC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LOGMNR$ALWAYSSUPLOG_SREC" FORCE
                                      
IS OBJECT (
  OWNER        VARCHAR2(128),
  TABLE_NAME   VARCHAR2(128),
  COLUMN_NAME  VARCHAR2(128),
  INTCOL       NUMBER,
  SEGCOL       NUMBER,
  USERCOL      NUMBER
)

/
--------------------------------------------------------
--  DDL for Type LOGMNR$ALWAYSSUPLOG_SRECS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LOGMNR$ALWAYSSUPLOG_SRECS" 
                                      
IS TABLE OF logmnr$alwayssuplog_srec

/
--------------------------------------------------------
--  DDL for Type LOGMNR$INTCOL_ARR_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."LOGMNR$INTCOL_ARR_TYPE" 
                                      
IS TABLE OF INTEGER;

/
--------------------------------------------------------
--  DDL for Type MIGR_FILTER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."MIGR_FILTER" IS OBJECT (
  FILTER_TYPE INTEGER, -- Filter Types are 0-> ALL, 1->NAMELIST, 2->WHERE CLAUSE, 3->OBJECTID LIST
  OBJTYPE VARCHAR2(40),
  OBJECTIDS OBJECTIDLIST,
  NAMES NAMELIST,
  WHERECLAUSE VARCHAR2(1000));

/
--------------------------------------------------------
--  DDL for Type MIGR_FILTER_SET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."MIGR_FILTER_SET" IS TABLE OF MIGR_FILTER;

/
--------------------------------------------------------
--  DDL for Type MSG_PROP_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."MSG_PROP_T" AS OBJECT (
       priority          number,
       delay             number,
       expiration        number,
       correlation       varchar2(128),
       attempts          number,
       exception_queue   varchar2(51),
       enqueue_time      date,
       state             number,
       sender_id         aq$_agent,
       original_msgid    raw(16),
       delivery_mode     number)
 alter type     "SYS"."MSG_PROP_T" modify attribute
           (exception_queue varchar2(128)) CASCADE

/

  GRANT EXECUTE ON "SYS"."MSG_PROP_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type MVAGGRAWBITOR_TYP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."MVAGGRAWBITOR_TYP" AS OBJECT (
 current_bitvec        RAW(255),
 current_bitvec_len    NUMBER,

 STATIC FUNCTION odciaggregateinitialize(sctx OUT MVAggRawBitOr_typ)
    RETURN NUMBER,

 MEMBER FUNCTION odciaggregateiterate(self    IN OUT MVAggRawBitOr_typ,
                                      bitvec  IN     RAW)
    RETURN NUMBER,

 MEMBER FUNCTION odciaggregateterminate(self    IN OUT MVAggRawBitOr_typ,
                                        bitvec  OUT    RAW,
                                        flags   IN     NUMBER)
    RETURN NUMBER,

 MEMBER FUNCTION odciaggregatemerge(self     IN OUT MVAggRawBitOr_typ,
                                    agg_obj  IN     MVAggRawBitOr_typ)
    RETURN NUMBER
);
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."MVAGGRAWBITOR_TYP" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
48a 1c6
xAT9zTi1g8SS88Lb9I7tmTdI3rgwgw23JCAVfC+V2sFeaHVa57MNTdYLy4bFLfcQG1CV/EZF
XJQJPSCax6xa3ibhxTCFnU4SP/7rAt8MRiX/32lk258ehyKXsZAQ0JhyeFAi2d23ymI4HF8U
ebK0WHfmPgfyLyeMoW3yJAu5bDuvOfIicW8uJvpFWhMB9/uWB45u+7b800zCQNON3yY88iwc
qtVOROI6zCE6kQlfj7x1ye1enmY7CCEzNfLSQW0RyetfhLG0QZuAEebGxGgLKq76oK2QEneL
HIdWVGt+EINg6YK0LXT/a2tTnMC7N+WFl3+q9DxDxv1g+IJF+dD2LeZOVakPlGI/BG5by0CF
f1OjE/bCHilsE0oZOoNCbIkHHTpK0srkHJJ/Ggp06vDcgTD5+gfps6euBzmWtQ3RHKBz94Ze
TscDrwycmJbGygTc

/

  GRANT EXECUTE ON "SYS"."MVAGGRAWBITOR_TYP" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type MVREFRESHSCHEDULE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."MVREFRESHSCHEDULE" AS TABLE OF SYS.MVScheduleEntry

/
--------------------------------------------------------
--  DDL for Type MVSCHEDULEDEPENDENCIES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."MVSCHEDULEDEPENDENCIES" AS TABLE OF INTEGER

/
--------------------------------------------------------
--  DDL for Type MVSCHEDULEENTRY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."MVSCHEDULEENTRY" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
d
1de 134
uNifSqd1GSKykurrBbgnBm5tfRAwg/CzJCAVfC9Epf/PntDKXKS0e4fP0NuNtRq8mWy3B2/0
+3/KBJLNDGflZhZNSSC7F9kjsBCZtqebvpOqpMT2isv4IITgCYE5Csl7f9QbzMeCLZmUm07I
Xskf+trNtUcKh6gouYSgTZlTnIL8dImgFmIBmxwZoXzRxfyZuDRFc5oEokU/EATirIn+0T5T
VxxxkuOFtbj7gxS8nwyXYWt6T/8XHdNszV3RIwCMmgOlwyTFOmiEbYXjPPAeiYeH3PgDslNO
BBP6iilbNrgLEw==

/
--------------------------------------------------------
--  DDL for Type NAME_AND_COUNT_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."NAME_AND_COUNT_ARRAY" IS VARRAY(30) OF name_and_count_t;

/
--------------------------------------------------------
--  DDL for Type NAME_AND_COUNT_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."NAME_AND_COUNT_T" IS OBJECT (
  OBJECT_NAME varchar2(30),
  UPDATE_COUNT INTEGER);

/
--------------------------------------------------------
--  DDL for Type NAMELIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."NAMELIST" IS TABLE OF VARCHAR2(40);

/
--------------------------------------------------------
--  DDL for Type OBJECTIDLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."OBJECTIDLIST" IS TABLE OF INTEGER;

/
--------------------------------------------------------
--  DDL for Type OBJRANK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."OBJRANK" FORCE is object(
                             rank number,
                             obj# number)

/
--------------------------------------------------------
--  DDL for Type ODCIARGDESC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIARGDESC" FORCE AS OBJECT
(
  ArgType              NUMBER,
  TableName            VARCHAR2(130),
  TableSchema          VARCHAR2(130),
  ColName              VARCHAR2(4000),
  TablePartitionLower  VARCHAR2(130),
  TablePartitionUpper  VARCHAR2(130),
  Cardinality          NUMBER
);

/

  GRANT EXECUTE ON "SYS"."ODCIARGDESC" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIARGDESCLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIARGDESCLIST" FORCE
  AS VARRAY(32767) of ODCIArgDesc;

/

  GRANT EXECUTE ON "SYS"."ODCIARGDESCLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIBFILELIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIBFILELIST" FORCE
 AS VARRAY(32767) OF BFILE;

/

  GRANT EXECUTE ON "SYS"."ODCIBFILELIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCICOLARRAYVALLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCICOLARRAYVALLIST" FORCE
  AS VARRAY(32767) OF ODCIColValList;

/

  GRANT EXECUTE ON "SYS"."ODCICOLARRAYVALLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCICOLINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCICOLINFO" FORCE AS OBJECT
(
  TableSchema          VARCHAR2(130),
  TableName            VARCHAR2(130),
  ColName              VARCHAR2(4000),
  ColTypeName          VARCHAR2(130),
  ColTypeSchema        VARCHAR2(130),
  TablePartition       VARCHAR2(130),
  ColInfoFlags         NUMBER,
  OrderByPosition      NUMBER,
  TablePartitionIden   NUMBER,
  TablePartitionTotal  NUMBER
);

/

  GRANT EXECUTE ON "SYS"."ODCICOLINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCICOLINFOLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCICOLINFOLIST" FORCE
  AS VARRAY(32) of ODCIColInfo;

/

  GRANT EXECUTE ON "SYS"."ODCICOLINFOLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCICOLINFOLIST2
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCICOLINFOLIST2" FORCE
  AS VARRAY(1000) of ODCIColInfo;

/

  GRANT EXECUTE ON "SYS"."ODCICOLINFOLIST2" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCICOLVALLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCICOLVALLIST" FORCE
  AS VARRAY(32) OF SYS.ANYDATA;

/

  GRANT EXECUTE ON "SYS"."ODCICOLVALLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCICOMPQUERYINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCICOMPQUERYINFO" FORCE AS OBJECT
(
  PredInfo    ODCIFilterInfoList,
  ObyInfo     ODCIOrderByInfoList
);

/

  GRANT EXECUTE ON "SYS"."ODCICOMPQUERYINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCICOST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCICOST" FORCE AS OBJECT
(
  CPUcost         NUMBER,
  IOcost          NUMBER,
  NetworkCost     NUMBER,
  IndexCostInfo   VARCHAR2(255)
);

/

  GRANT EXECUTE ON "SYS"."ODCICOST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIDATELIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIDATELIST" FORCE
 AS VARRAY(32767) OF Date;

/

  GRANT EXECUTE ON "SYS"."ODCIDATELIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIENV
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIENV" FORCE AS OBJECT
(
  EnvFlags     NUMBER,
  CallProperty NUMBER,
  DebugLevel   NUMBER,
  CursorNum    NUMBER
);

/

  GRANT EXECUTE ON "SYS"."ODCIENV" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIEXTTABLEINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIEXTTABLEINFO" FORCE AS OBJECT
(
  TableSchema      VARCHAR2(130),
  TableName        VARCHAR2(130),
  RefCols          ODCIColInfoList2,
  AccessParmClob   CLOB,
  AccessParmBlob   BLOB,
  Locations        ODCIArgDescList,
  Directories      ODCIArgDescList,
  DefaultDirectory VARCHAR2(130),
  DriverType       VARCHAR2(130),
  OpCode           NUMBER,
  AgentNum         NUMBER,
  GranuleSize      NUMBER,
  Flag             NUMBER,
  SamplePercent    NUMBER,
  MaxDoP           NUMBER,
  SharedBuf        RAW(2000),
  MTableName       VARCHAR2(130),
  MTableSchema     VARCHAR2(130),
  TableObjNo       NUMBER,
  AccessParmMod    VARCHAR2(4000)
);

/

  GRANT EXECUTE ON "SYS"."ODCIEXTTABLEINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIEXTTABLEQCINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIEXTTABLEQCINFO" FORCE AS OBJECT
(
  NumGranules            NUMBER,
  NumLocations           NUMBER,
  GranuleInfo            ODCIGranuleList,
  IntraSourceConcurrency NUMBER,
  MaxDoP                 NUMBER,
  SharedBuf              RAW(2000)
);

/

  GRANT EXECUTE ON "SYS"."ODCIEXTTABLEQCINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIFILTERINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIFILTERINFO" FORCE AS OBJECT
(
  ColInfo     SYS.ODCIColInfo,
  Flags       NUMBER,
  Strt        SYS.ANYDATA,
  Stop        SYS.ANYDATA
);

/

  GRANT EXECUTE ON "SYS"."ODCIFILTERINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIFILTERINFOLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIFILTERINFOLIST" FORCE
  AS VARRAY(32000) OF ODCIFilterInfo;

/

  GRANT EXECUTE ON "SYS"."ODCIFILTERINFOLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIFUNCCALLINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIFUNCCALLINFO" FORCE AS OBJECT
(
  ColInfo           ODCIColInfo
);

/

  GRANT EXECUTE ON "SYS"."ODCIFUNCCALLINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIFUNCINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIFUNCINFO" FORCE AS OBJECT
(
  ObjectSchema    VARCHAR2(130),
  ObjectName      VARCHAR2(130),
  MethodName      VARCHAR2(130),
  Flags           NUMBER
);

/

  GRANT EXECUTE ON "SYS"."ODCIFUNCINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIGRANULELIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIGRANULELIST" FORCE
  AS VARRAY(65535) of NUMBER;

/

  GRANT EXECUTE ON "SYS"."ODCIGRANULELIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIINDEXCTX
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIINDEXCTX" FORCE AS OBJECT
(
  IndexInfo ODCIIndexInfo,
  Rid VARCHAR2(5072),
  QueryInfo ODCIQueryInfo
);

/

  GRANT EXECUTE ON "SYS"."ODCIINDEXCTX" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIINDEXINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIINDEXINFO" FORCE AS OBJECT
(
  IndexSchema         VARCHAR2(130),
  IndexName           VARCHAR2(130),
  IndexCols           ODCIColInfoList,
  IndexPartition      VARCHAR2(130),
  IndexInfoFlags      NUMBER,
  IndexParaDegree     NUMBER,
  IndexPartitionIden  NUMBER,
  IndexPartitionTotal NUMBER
);

/

  GRANT EXECUTE ON "SYS"."ODCIINDEXINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCINUMBERLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCINUMBERLIST" 
 AS VARRAY(32767) OF NUMBER;

/

  GRANT EXECUTE ON "SYS"."ODCINUMBERLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIOBJECT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIOBJECT" FORCE AS OBJECT
(
  ObjectSchema VARCHAR2(130),
  ObjectName   VARCHAR2(130)
);

/

  GRANT EXECUTE ON "SYS"."ODCIOBJECT" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIOBJECTLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIOBJECTLIST" FORCE AS VARRAY(32) of ODCIObject;

/

  GRANT EXECUTE ON "SYS"."ODCIOBJECTLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIORDERBYINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIORDERBYINFO" FORCE AS OBJECT
(
  ExprType          NUMBER,
  ObjectSchema      VARCHAR2(130),
  TableName         VARCHAR2(130),
  ExprName          VARCHAR2(130),
  SortOrder         NUMBER
);

/

  GRANT EXECUTE ON "SYS"."ODCIORDERBYINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIORDERBYINFOLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIORDERBYINFOLIST" FORCE
  AS VARRAY(32) OF ODCIOrderByInfo;

/

  GRANT EXECUTE ON "SYS"."ODCIORDERBYINFOLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIPARTINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIPARTINFO" FORCE AS OBJECT
(
  TablePartition      VARCHAR2(130),
  IndexPartition      VARCHAR2(130),
  IndexPartitionIden  NUMBER,
  PartOp              NUMBER
);

/

  GRANT EXECUTE ON "SYS"."ODCIPARTINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIPARTINFOLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIPARTINFOLIST" FORCE AS VARRAY(64000) OF ODCIPartInfo;

/

  GRANT EXECUTE ON "SYS"."ODCIPARTINFOLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIPREDINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIPREDINFO" FORCE AS OBJECT
(
  ObjectSchema    VARCHAR2(130),
  ObjectName      VARCHAR2(130),
  MethodName      VARCHAR2(130),
  Flags           NUMBER

);

/

  GRANT EXECUTE ON "SYS"."ODCIPREDINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIQUERYINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIQUERYINFO" FORCE AS OBJECT
(
  Flags           NUMBER,
  AncOps          ODCIObjectList,
  CompInfo        ODCICompQueryInfo
);

/

  GRANT EXECUTE ON "SYS"."ODCIQUERYINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIRAWLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIRAWLIST" FORCE
 AS VARRAY(32767) OF Raw(2000);

/

  GRANT EXECUTE ON "SYS"."ODCIRAWLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIRIDLIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIRIDLIST" FORCE
 AS VARRAY(32767) OF VARCHAR2(5072);

/

  GRANT EXECUTE ON "SYS"."ODCIRIDLIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCISECOBJ
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCISECOBJ" FORCE AS OBJECT
(
  pobjschema    varchar2(130), -- domain index' schema
  pobjname      varchar2(130), -- domain index' name
  objschema     varchar2(130), -- its secondary object's schema
  objname       varchar2(130)  -- its secondary object's name
);

/

  GRANT EXECUTE ON "SYS"."ODCISECOBJ" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCISECOBJTABLE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCISECOBJTABLE" FORCE IS TABLE OF ODCISecObj;

/

  GRANT EXECUTE ON "SYS"."ODCISECOBJTABLE" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCISTATSOPTIONS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCISTATSOPTIONS" FORCE AS OBJECT
(
  Sample          NUMBER,
  Options         NUMBER,
  Flags           NUMBER
);

/

  GRANT EXECUTE ON "SYS"."ODCISTATSOPTIONS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCITABFUNCINFO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCITABFUNCINFO" FORCE AS OBJECT
(
  Attrs      ODCINumberList,  -- referenced attribute positions
  RetType    AnyType          -- table function's return type
)

/

  GRANT EXECUTE ON "SYS"."ODCITABFUNCINFO" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCITABFUNCSTATS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCITABFUNCSTATS" FORCE AS OBJECT
(
  num_rows NUMBER
);

/

  GRANT EXECUTE ON "SYS"."ODCITABFUNCSTATS" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type ODCIVARCHAR2LIST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ODCIVARCHAR2LIST" FORCE
 AS VARRAY(32767) OF VARCHAR2(4000);

/

  GRANT EXECUTE ON "SYS"."ODCIVARCHAR2LIST" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type OLAPIMPL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."OLAPIMPL_T" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
d
8f be
EIRG/2mT9NgI9iSPGvYFDdiol58wg+nw7Z4VfI5gkE6Ov341bpncePoCYSGhviQR6DSprNa7
0CbLQQjPLHY72jUxuA9BZIASHez/DEZwR4kNWC8dno6dCWl4V6ZY9z5hDr+m1AV88MFItz6S
8LySICqnmi3vXNF1CjOPf/Qbee31yGJC4HiHrixLge/+

/
--------------------------------------------------------
--  DDL for Type OLAPRANCURIMPL_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."OLAPRANCURIMPL_T" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
d
e6b 31e
yDCAintbN1duA04z97r7oq3bd78wg0OnLtDrfC9Arf7qXzOJ8ue93FpudheDdS6KfEFQzT7F
CmbIb1QN6QbBgkjE9T7/xrnyPStdL2xB0LSCch51wZSs1cPpbbuSwZfPmO3e3w4n/y45RRvm
2S7N92dCuCkSd3ryYKYi6kaTjDqeqXdWQto/PowB18ViuNrPBENHzXZDm8e18jGt2RfWPpHg
lWBqGmHs8AOPZXlhk2XS7FkY9FedOepOUri1Y43/Lb7brbRFWfc5YL5R0Xle5Z4ixSXCJXgL
46LTwC5v5RV41GXc92bcCWHmMd476Od74JZZ8hiLyGNjIHfY9/7jnFxsFZVkgYuCKX6+vIcQ
c6A0487XdMFlqljXlIBHjWah21oc8czPKQVQMJDmLINi+BcLgoyUmKfgLKPhj6Ap/NkQsbzY
B6cC2EH6tN6d9q48mDkMxwKG0cPV5j5iGyJwHFpVxfKT88g+ClHuNY+I2lLABbCyT72E1uAk
cYPo4J7uZjQ1qK3l/Gt/0NPDWa5ygNw9J0KYVJCHLjeNn9kkJ9POTTxivoN/MWU9p9UGqjPs
VZn7n8d5RPgoc1ud+ebkDaiibbFF6eM3MMQ1NvQkSNAOWAdzWbVevpLX4A2t9i1BPSxpqR4J
swgswttLdef5tpGQSRxt+ralxF2RItOq6gP7q8jvCoC8qiNHjtWI/HuzkHb8+sDHc0PSaQx4
g2Id3hmBGgeGTB9FfmrQ4PPHKBJFuBwoiqRSeD9gdn0TLB5DQsBQVQ6zzlVtmhvjR3o=

/
--------------------------------------------------------
--  DDL for Type OLAP_SRF_T
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."OLAP_SRF_T" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
d
43 81
W5k4+sqVQjtqncAgNbc3AtqGS2swg0SvLbKpfHQ2ZyfozmUxpvSXNu9n41QsumeNc8SP/yRe
dwzYeEhVqO74LVE2JsT+EfJahEzcYkoh4ZKr172Xt+huwe5bz6nzjQ==

/

  GRANT EXECUTE ON "SYS"."OLAP_SRF_T" TO PUBLIC;
--------------------------------------------------------
--  DDL for Type OPATCH_NODE_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."OPATCH_NODE_ARRAY" as VARRAY(100) of varchar(128);

/
--------------------------------------------------------
--  DDL for Type ORACLE_BIGDATA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ORACLE_BIGDATA" FORCE AUTHID CURRENT_USER AS OBJECT
(
  xtctx  RAW(4),
  STATIC FUNCTION ODCIGetInterfaces(ifclist OUT NOCOPY SYS.ODCIObjectList)
         RETURN NUMBER DETERMINISTIC,

  STATIC FUNCTION ODCIExtTableOpen(lctx   IN OUT NOCOPY oracle_bigdata,
                                   xti    IN            SYS.ODCIExtTableInfo,
                                   xri       OUT NOCOPY SYS.ODCIExtTableQCInfo,
                                   pcl       OUT NOCOPY SYS.ODCIColInfoList2,
                                   flag   IN OUT        number,
                                   strv   IN OUT        number,
                                   env    IN            SYS.ODCIEnv,
                                   xtArgs IN OUT        raw)
         RETURN number DETERMINISTIC,

-- Fetch data for the given granule.  Note that cnverr is the number
-- of conversion errors that occurred while fetching and converting rows
-- for the current granule, gnum is the current granule number.

  MEMBER FUNCTION ODCIExtTableFetch(gnum   IN     number,
                                    cnverr IN OUT number,
                                    flag   IN OUT number,
                                    env    IN     SYS.ODCIEnv,
                                    xtArgs IN OUT raw)
         RETURN number DETERMINISTIC,

  MEMBER FUNCTION ODCIExtTablePopulate(flag   IN OUT number,
                                       env    IN     SYS.ODCIEnv,
                                       xtArgs IN OUT raw)
         RETURN number DETERMINISTIC,

  MEMBER FUNCTION ODCIExtTableClose(flag   IN OUT number,
                                    env    IN     SYS.ODCIEnv,
                                    xtArgs IN OUT raw)
         RETURN number DETERMINISTIC
) NOT PERSISTABLE;
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."ORACLE_BIGDATA" 
IS
--
-- ODCIGetInterfaces - returns supported interface and stream version.
--
  STATIC FUNCTION ODCIGETINTERFACES(ifclist OUT NOCOPY SYS.ODCIOBJECTLIST)
       RETURN NUMBER DETERMINISTIC IS
  BEGIN
      ifclist := SYS.ODCIOBJECTLIST
                        (
                          SYS.ODCIOBJECT('SYS','ODCIEXTTABLE1'),
                          SYS.ODCIOBJECT('SYS','ODCIEXTTABLE_STREAM1')
                        );
      RETURN ODCICONST.SUCCESS;
  END ODCIGETINTERFACES;
--
-- ODCIExtTableOpen
--
  STATIC FUNCTION ODCIEXTTABLEOPEN(LCTX IN OUT NOCOPY oracle_bigdata,
                                   xti    IN            SYS.ODCIEXTTABLEINFO,
                                   xri       OUT NOCOPY SYS.ODCIEXTTABLEQCINFO,
                                   pcl       OUT NOCOPY SYS.ODCICOLINFOLIST2,
                                   flag   IN OUT        NUMBER,
                                   strv   IN OUT        NUMBER,
                                   env    IN            SYS.ODCIENV,
                                   xtArgs IN OUT        RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_OPEN"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      lctx,
      lctx   INDICATOR STRUCT,
      lctx   duration,
      xti,
      xti    INDICATOR STRUCT,
      xri,
      xri    INDICATOR STRUCT,
      pcl,
      pcl    INDICATOR,
      flag,
      flag   INDICATOR,
      strv,
      strv   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTableFetch
--
  MEMBER FUNCTION ODCIEXTTABLEFETCH(gnum     IN     NUMBER,
                                    cnverr   IN OUT NUMBER,
                                    flag     IN OUT NUMBER,
                                    env      IN     SYS.ODCIENV,
                                    xtArgs   IN OUT RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_FETCH"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      gnum,
      gnum   INDICATOR,
      cnverr,
      cnverr INDICATOR,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTablePopulate
--
  MEMBER FUNCTION ODCIEXTTABLEPOPULATE(flag   IN OUT NUMBER,
                                       env    IN     SYS.ODCIENV,
                                       xtArgs IN OUT        RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_POPULATE"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTableClose
--
  MEMBER FUNCTION ODCIEXTTABLECLOSE(flag   IN OUT NUMBER,
                                    env    IN     SYS.ODCIENV,
                                    xtArgs IN OUT        RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_CLOSE"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
END;

/
--------------------------------------------------------
--  DDL for Type ORACLE_DATAPUMP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ORACLE_DATAPUMP" FORCE AUTHID CURRENT_USER AS OBJECT
(
  xtctx  RAW(4),
  STATIC FUNCTION ODCIGetInterfaces(ifclist OUT NOCOPY SYS.ODCIObjectList)
         RETURN NUMBER,

  STATIC FUNCTION ODCIExtTableOpen(lctx   IN OUT NOCOPY oracle_datapump,
                                   xti    IN            SYS.ODCIExtTableInfo,
                                   xri       OUT NOCOPY SYS.ODCIExtTableQCInfo,
                                   pcl       OUT NOCOPY SYS.ODCIColInfoList2,
                                   flag   IN OUT        number,
                                   strv   IN OUT        number,
                                   env    IN            SYS.ODCIEnv,
                                   xtArgs IN OUT        raw)
         RETURN number,

-- Fetch data for the given granule.  Note that cnverr is the number
-- of conversion errors that occurred while fetching and converting rows
-- for the current granule, gnum is the current granule number.

  MEMBER FUNCTION ODCIExtTableFetch(gnum   IN     number,
                                    cnverr IN OUT number,
                                    flag   IN OUT number,
                                    env    IN     SYS.ODCIEnv,
                                    xtArgs IN OUT raw)
         RETURN number,
  MEMBER FUNCTION ODCIExtTablePopulate(flag   IN OUT number,
                                       env    IN     SYS.ODCIEnv,
                                       xtArgs IN OUT raw)
         RETURN number,

  MEMBER FUNCTION ODCIExtTableClose(flag   IN OUT number,
                                    env    IN     SYS.ODCIEnv,
                                    xtArgs IN OUT raw)
         RETURN number
) NOT PERSISTABLE;
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."ORACLE_DATAPUMP" 
IS
--
-- ODCIGetInterfaces - returns supported interface and stream version.
--
  STATIC FUNCTION ODCIGETINTERFACES(ifclist OUT NOCOPY SYS.ODCIOBJECTLIST)
       RETURN NUMBER IS
  BEGIN
      ifclist := SYS.ODCIOBJECTLIST
                        (
                          SYS.ODCIOBJECT('SYS','ODCIEXTTABLE1'),
                          SYS.ODCIOBJECT('SYS','ODCIEXTTABLE_STREAM1')
                        );
      RETURN ODCICONST.SUCCESS;
  END ODCIGETINTERFACES;
--
-- ODCIExtTableOpen
--
  STATIC FUNCTION ODCIEXTTABLEOPEN(LCTX IN OUT NOCOPY oracle_datapump,
                                   xti    IN            SYS.ODCIEXTTABLEINFO,
                                   xri       OUT NOCOPY SYS.ODCIEXTTABLEQCINFO,
                                   pcl       OUT NOCOPY SYS.ODCICOLINFOLIST2,
                                   flag   IN OUT NUMBER,
                                   strv   IN OUT NUMBER,
                                   env    IN     SYS.ODCIENV,
                                   xtArgs IN OUT RAW)
    RETURN NUMBER AS LANGUAGE C
    NAME "QXXQ_OPEN"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      lctx,
      lctx   INDICATOR STRUCT,
      lctx   duration,
      xti,
      xti    INDICATOR STRUCT,
      xri,
      xri    INDICATOR STRUCT,
      pcl,
      pcl    INDICATOR,
      flag,
      flag   INDICATOR,
      strv,
      strv   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTableFetch
--
  MEMBER FUNCTION ODCIEXTTABLEFETCH(gnum   IN     NUMBER,
                                    cnverr IN OUT NUMBER,
                                    flag   IN OUT NUMBER,
                                    env    IN     SYS.ODCIENV,
                                    xtArgs IN OUT RAW)
    RETURN NUMBER AS LANGUAGE C
    NAME "QXXQ_FETCH"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      gnum,
      gnum   INDICATOR,
      cnverr,
      cnverr INDICATOR,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTablePopulate
--
  MEMBER FUNCTION ODCIEXTTABLEPOPULATE(flag   IN OUT NUMBER,
                                       env    IN     SYS.ODCIENV,
                                       xtArgs IN OUT RAW)
    RETURN NUMBER AS LANGUAGE C
    NAME "QXXQ_POPULATE"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );

--
-- ODCIExtTableClose
--
  MEMBER FUNCTION ODCIEXTTABLECLOSE(flag   IN OUT NUMBER,
                                    env    IN     SYS.ODCIENV,
                                    xtArgs IN OUT RAW)
    RETURN NUMBER AS LANGUAGE C
    NAME "QXXQ_CLOSE"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
END;

/
--------------------------------------------------------
--  DDL for Type ORACLE_HDFS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ORACLE_HDFS" FORCE AUTHID CURRENT_USER AS OBJECT
(
  xtctx  RAW(4),
  STATIC FUNCTION ODCIGetInterfaces(ifclist OUT NOCOPY SYS.ODCIObjectList)
         RETURN NUMBER DETERMINISTIC,

  STATIC FUNCTION ODCIExtTableOpen(lctx   IN OUT NOCOPY oracle_hdfs,
                                   xti    IN            SYS.ODCIExtTableInfo,
                                   xri       OUT NOCOPY SYS.ODCIExtTableQCInfo,
                                   pcl       OUT NOCOPY SYS.ODCIColInfoList2,
                                   flag   IN OUT        number,
                                   strv   IN OUT        number,
                                   env    IN            SYS.ODCIEnv,
                                   xtArgs IN OUT       raw)
         RETURN number DETERMINISTIC,

-- Fetch data for the given granule.  Note that cnverr is the number
-- of conversion errors that occurred while fetching and converting rows
-- for the current granule, gnum is the current granule number.

  MEMBER FUNCTION ODCIExtTableFetch(gnum   IN     number,
                                    cnverr IN OUT number,
                                    flag   IN OUT number,
                                    env    IN     SYS.ODCIEnv,
                                    xtArgs IN OUT raw)
         RETURN number DETERMINISTIC,

  MEMBER FUNCTION ODCIExtTablePopulate(flag   IN OUT number,
                                       env    IN     SYS.ODCIEnv,
                                       xtArgs IN OUT raw)
         RETURN number DETERMINISTIC,

  MEMBER FUNCTION ODCIExtTableClose(flag IN OUT number,
                                    env    IN     SYS.ODCIEnv,
                                    xtArgs IN OUT raw)
         RETURN number DETERMINISTIC
) NOT PERSISTABLE;
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."ORACLE_HDFS" 
IS
--
-- ODCIGetInterfaces - returns supported interface and stream version.
--
  STATIC FUNCTION ODCIGETINTERFACES(ifclist OUT NOCOPY SYS.ODCIOBJECTLIST)
       RETURN NUMBER DETERMINISTIC IS
  BEGIN
      ifclist := SYS.ODCIOBJECTLIST
                        (
                          SYS.ODCIOBJECT('SYS','ODCIEXTTABLE1'),
                          SYS.ODCIOBJECT('SYS','ODCIEXTTABLE_STREAM1')
                        );
      RETURN ODCICONST.SUCCESS;
  END ODCIGETINTERFACES;
--
-- ODCIExtTableOpen
--
  STATIC FUNCTION ODCIEXTTABLEOPEN(LCTX IN OUT NOCOPY oracle_hdfs,
                                   xti    IN          SYS.ODCIEXTTABLEINFO,
                                   xri    OUT NOCOPY  SYS.ODCIEXTTABLEQCINFO,
                                   pcl    OUT NOCOPY  SYS.ODCICOLINFOLIST2,
                                   flag   IN  OUT     NUMBER,
                                   strv   IN  OUT     NUMBER,
                                   env    IN          SYS.ODCIENV,
                                   xtArgs IN  OUT     RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_OPEN"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      lctx,
      lctx   INDICATOR STRUCT,
      lctx   duration,
      xti,
      xti    INDICATOR STRUCT,
      xri,
      xri    INDICATOR STRUCT,
      pcl,
      pcl    INDICATOR,
      flag,
      flag   INDICATOR,
      strv,
      strv   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTableFetch
--
  MEMBER FUNCTION ODCIEXTTABLEFETCH(gnum     IN     NUMBER,
                                    cnverr   IN OUT NUMBER,
                                    flag     IN OUT NUMBER,
                                    env      IN     SYS.ODCIENV,
                                    xtArgs   IN OUT RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_FETCH"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      gnum,
      gnum   INDICATOR,
      cnverr,
      cnverr INDICATOR,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTablePopulate
--
  MEMBER FUNCTION ODCIEXTTABLEPOPULATE(flag   IN OUT NUMBER,
                                       env    IN     SYS.ODCIENV,
                                       xtArgs IN OUT        RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_POPULATE"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTableClose
--
  MEMBER FUNCTION ODCIEXTTABLECLOSE(flag   IN OUT NUMBER,
                                    env    IN     SYS.ODCIENV,
                                    xtArgs IN OUT        RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_CLOSE"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
END;

/
--------------------------------------------------------
--  DDL for Type ORACLE_HIVE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ORACLE_HIVE" FORCE AUTHID CURRENT_USER AS OBJECT
(
  xtctx  RAW(4),
  STATIC FUNCTION ODCIGetInterfaces(ifclist OUT NOCOPY SYS.ODCIObjectList)
         RETURN NUMBER DETERMINISTIC,

  STATIC FUNCTION ODCIExtTableOpen(lctx   IN OUT NOCOPY oracle_hive,
                                   xti    IN            SYS.ODCIExtTableInfo,
                                   xri       OUT NOCOPY SYS.ODCIExtTableQCInfo,
                                   pcl       OUT NOCOPY SYS.ODCIColInfoList2,
                                   flag   IN OUT        number,
                                   strv   IN OUT        number,
                                   env    IN            SYS.ODCIEnv,
                                   xtArgs IN OUT        raw)
         RETURN number DETERMINISTIC,

-- Fetch data for the given granule.  Note that cnverr is the number
-- of conversion errors that occurred while fetching and converting rows
-- for the current granule, gnum is the current granule number.

  MEMBER FUNCTION ODCIExtTableFetch(gnum   IN     number,
                                    cnverr IN OUT number,
                                    flag   IN OUT number,
                                    env    IN     SYS.ODCIEnv,
                                    xtArgs IN OUT raw)
         RETURN number DETERMINISTIC,

  MEMBER FUNCTION ODCIExtTablePopulate(flag   IN OUT number,
                                       env    IN     SYS.ODCIEnv,
                                       xtArgs IN OUT raw)
         RETURN number DETERMINISTIC,

  MEMBER FUNCTION ODCIExtTableClose(flag   IN OUT number,
                                    env    IN     SYS.ODCIEnv,
                                    xtArgs IN OUT raw)
         RETURN number DETERMINISTIC
) NOT PERSISTABLE;
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."ORACLE_HIVE" 
IS
--
-- ODCIGetInterfaces - returns supported interface and stream version.
--
  STATIC FUNCTION ODCIGETINTERFACES(ifclist OUT NOCOPY SYS.ODCIOBJECTLIST)
       RETURN NUMBER DETERMINISTIC IS
  BEGIN
      ifclist := SYS.ODCIOBJECTLIST
                        (
                          SYS.ODCIOBJECT('SYS','ODCIEXTTABLE1'),
                          SYS.ODCIOBJECT('SYS','ODCIEXTTABLE_STREAM1')
                        );
      RETURN ODCICONST.SUCCESS;
  END ODCIGETINTERFACES;
--
-- ODCIExtTableOpen
--
  STATIC FUNCTION ODCIEXTTABLEOPEN(LCTX   IN OUT NOCOPY oracle_hive,
                                   xti    IN            SYS.ODCIEXTTABLEINFO,
                                   xri       OUT NOCOPY SYS.ODCIEXTTABLEQCINFO,
                                   pcl       OUT NOCOPY SYS.ODCICOLINFOLIST2,
                                   flag   IN OUT        NUMBER,
                                   strv   IN OUT        NUMBER,
                                   env    IN            SYS.ODCIENV,
                                   xtArgs IN OUT        RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_OPEN"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      lctx,
      lctx   INDICATOR STRUCT,
      lctx   duration,
      xti,
      xti    INDICATOR STRUCT,
      xri,
      xri    INDICATOR STRUCT,
      pcl,
      pcl    INDICATOR,
      flag,
      flag   INDICATOR,
      strv,
      strv   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTableFetch
--
  MEMBER FUNCTION ODCIEXTTABLEFETCH(gnum     IN     NUMBER,
                                    cnverr   IN OUT NUMBER,
                                    flag     IN OUT NUMBER,
                                    env      IN     SYS.ODCIENV,
                                    xtArgs   IN OUT RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_FETCH"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      gnum,
      gnum   INDICATOR,
      cnverr,
      cnverr INDICATOR,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTablePopulate
--
  MEMBER FUNCTION ODCIEXTTABLEPOPULATE(flag   IN OUT NUMBER,
                                       env    IN     SYS.ODCIENV,
                                       xtArgs IN OUT        RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_POPULATE"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTableClose
--
  MEMBER FUNCTION ODCIEXTTABLECLOSE(flag   IN OUT NUMBER,
                                    env    IN     SYS.ODCIENV,
                                    xtArgs IN OUT        RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_CLOSE"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
END;

/
--------------------------------------------------------
--  DDL for Type ORACLE_LOADER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ORACLE_LOADER" FORCE AUTHID CURRENT_USER AS OBJECT
(
  xtctx  RAW(4),
  STATIC FUNCTION ODCIGetInterfaces(ifclist OUT NOCOPY SYS.ODCIObjectList)
         RETURN NUMBER DETERMINISTIC,

  STATIC FUNCTION ODCIExtTableOpen(lctx   IN OUT NOCOPY oracle_loader,
                                   xti    IN            SYS.ODCIExtTableInfo,
                                   xri       OUT NOCOPY SYS.ODCIExtTableQCInfo,
                                   pcl       OUT NOCOPY SYS.ODCIColInfoList2,
                                   flag   IN OUT        number,
                                   strv   IN OUT        number,
                                   env    IN            SYS.ODCIEnv,
                                   xtArgs IN OUT        raw)
         RETURN number DETERMINISTIC,

-- Fetch data for the given granule.  Note that cnverr is the number
-- of conversion errors that occurred while fetching and converting rows
-- for the current granule, gnum is the current granule number.

  MEMBER FUNCTION ODCIExtTableFetch(gnum   IN     number,
                                    cnverr IN OUT number,
                                    flag   IN OUT number,
                                    env    IN     SYS.ODCIEnv,
                                    xtArgs IN OUT raw)
         RETURN number DETERMINISTIC,

  MEMBER FUNCTION ODCIExtTablePopulate(flag   IN OUT number,
                                       env    IN     SYS.ODCIEnv,
                                       xtArgs IN OUT raw)
         RETURN number DETERMINISTIC,

  MEMBER FUNCTION ODCIExtTableClose(flag   IN OUT number,
                                    env    IN     SYS.ODCIEnv,
                                    xtArgs IN OUT raw)
         RETURN number DETERMINISTIC
) NOT PERSISTABLE;
/
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "SYS"."ORACLE_LOADER" 
IS
--
-- ODCIGetInterfaces - returns supported interface and stream version.
--
  STATIC FUNCTION ODCIGETINTERFACES(ifclist OUT NOCOPY SYS.ODCIOBJECTLIST)
       RETURN NUMBER DETERMINISTIC IS
  BEGIN
      ifclist := SYS.ODCIOBJECTLIST
                        (
                          SYS.ODCIOBJECT('SYS','ODCIEXTTABLE1'),
                          SYS.ODCIOBJECT('SYS','ODCIEXTTABLE_STREAM1')
                        );
      RETURN ODCICONST.SUCCESS;
  END ODCIGETINTERFACES;
--
-- ODCIExtTableOpen
--
  STATIC FUNCTION ODCIEXTTABLEOPEN(LCTX IN OUT NOCOPY oracle_loader,
                                   xti    IN            SYS.ODCIEXTTABLEINFO,
                                   xri       OUT NOCOPY SYS.ODCIEXTTABLEQCINFO,
                                   pcl       OUT NOCOPY SYS.ODCICOLINFOLIST2,
                                   flag   IN OUT        NUMBER,
                                   strv   IN OUT        NUMBER,
                                   env    IN            SYS.ODCIENV,
                                   xtArgs IN OUT        RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_OPEN"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      lctx,
      lctx   INDICATOR STRUCT,
      lctx   duration,
      xti,
      xti    INDICATOR STRUCT,
      xri,
      xri    INDICATOR STRUCT,
      pcl,
      pcl    INDICATOR,
      flag,
      flag   INDICATOR,
      strv,
      strv   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTableFetch
--
  MEMBER FUNCTION ODCIEXTTABLEFETCH(gnum     IN     NUMBER,
                                    cnverr   IN OUT NUMBER,
                                    flag     IN OUT NUMBER,
                                    env      IN     SYS.ODCIENV,
                                    xtArgs   IN OUT RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_FETCH"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      gnum,
      gnum   INDICATOR,
      cnverr,
      cnverr INDICATOR,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTablePopulate
--
  MEMBER FUNCTION ODCIEXTTABLEPOPULATE(flag   IN OUT NUMBER,
                                       env    IN     SYS.ODCIENV,
                                       xtArgs IN OUT RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_POPULATE"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
--
-- ODCIExtTableClose
--
  MEMBER FUNCTION ODCIEXTTABLECLOSE(flag   IN OUT NUMBER,
                                    env    IN     SYS.ODCIENV,
                                    xtArgs IN OUT RAW)
    RETURN NUMBER DETERMINISTIC AS LANGUAGE C
    NAME "QXXQ_CLOSE"
    LIBRARY QXXQLIB
    WITH CONTEXT
    PARAMETERS
    (
      CONTEXT,
      SELF,
      SELF   INDICATOR STRUCT,
      flag,
      flag   INDICATOR,
      env,
      env    INDICATOR STRUCT,
      xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
      RETURN OCINUMBER
    );
END;

/
--------------------------------------------------------
--  DDL for Type ORA_DM_BUILD_FLAT_OROW
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "SYS"."ORA_DM_BUILD_FLAT_OROW" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
d
365 160
5LwIIFakjIobrCWblC/QVKghVIwwg3n32Uhqyi/pmP/qRyX3RaVwwWPi3WmVlChtj6P/1LW1
H+lhUUXS0XKzpsei7FuEqJfpmOnw7T3ZsI3evX9ZFCyOd5wp01xbUSEoXYCwWc9yIc5L7w9O
beMrb0R4RMRET54iH88+zqOlzZbH7ZpKQoB7u+UjloY0fXzF9t8+yH7Ifvd6qEJgm6xdlPr9
yK10WsPbTePM84xmYOlfGASUf8XgwxRnzJy1fbrUudGMTYNF4tATlFDfUGHd1M8giV5sh2YB
awGjLC7RhPyQQhQpQD16/kDoIlXqGhelBfP4qt1A3IOaLWoIhs1bo7CXGg==

/

  GRANT EXECUTE ON "SYS"."ORA_DM_BUILD_FLAT_OROW" TO PUBLIC;
